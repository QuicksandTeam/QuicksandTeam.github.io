{"remainingRequest":"D:\\Github_pages\\QuicksandTeam.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Github_pages\\QuicksandTeam.github.io\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Github_pages\\QuicksandTeam.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\Github_pages\\QuicksandTeam.github.io\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!D:\\Github_pages\\QuicksandTeam.github.io\\docs\\zh\\column\\jysf\\0neWhatistimecomplexity.md?vue&type=template&id=fc98c208&","dependencies":[{"path":"D:\\Github_pages\\QuicksandTeam.github.io\\docs\\zh\\column\\jysf\\0neWhatistimecomplexity.md","mtime":1635387707353},{"path":"D:\\Github_pages\\QuicksandTeam.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1633964595791},{"path":"D:\\Github_pages\\QuicksandTeam.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1633964602389},{"path":"D:\\Github_pages\\QuicksandTeam.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1633964595791},{"path":"D:\\Github_pages\\QuicksandTeam.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1633964602389},{"path":"D:\\Github_pages\\QuicksandTeam.github.io\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1633964594030}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("p", [
        _vm._v(
          "大家好 ，我是久远，今天开始，由我来给大家分享算法以及数据结构的相关知识。"
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "什么是算法" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#什么是算法" } },
          [_vm._v("#")]
        ),
        _vm._v(" 什么是算法")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("今天我们先来讨论一个问题：什么是算法？")]),
      _vm._v(" "),
      _c("p", [_vm._v("算法是指计算方法么？并不准确。")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("算法这个名称虽然听着硬核，但是我们换个场景你就会非常熟悉。")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "小学数学课上，你是不是可以用 3+3+3 或者 3*3 来解决三个三相加这个问题，虽然算的结果都是9，但是中间我们用的方法是不一样的。"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "假如你今天要做一道菜，你是不是需要菜谱，菜谱上肯定会告诉你，你做这个菜需要什么材料，分几步完成，完成这道菜需要多久。"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "而我们今天要讲的算法，就是计算机编程界的菜谱，它就是计算机解决问题的方法。用不同的办法去解决同一个问题，结果虽然都一样，但是过程可能千差万别。"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "正因为计算机解决问题的方法有很多个，我们便要拿标准去衡量，到底哪些算法更好，更适合我们去使用。"
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "时空复杂度" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#时空复杂度" } },
          [_vm._v("#")]
        ),
        _vm._v(" 时空复杂度")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("怎么衡量一个算法的好坏呢？")]),
      _vm._v(" "),
      _c("p", [_vm._v("举个现实的例子：")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "小明和小亮去企业面试，hr 要求他们用代码实现一个需求，一天之后，两个人交付了各自的代码，都能实现 hr 的需求。而只有小明被录用了。这是因为："
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("小明的代码运行一次花了 50ms ,内存占用 5MB 。")]),
      _vm._v(" "),
      _c("p", [_vm._v("而小亮的代码运行一次要花 10s ，占用内存 50MB 。")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "小亮的代码虽然能够实现功能，但是运行时间和内存占用都没有小明的少，自然没有被录用。"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("所以我们衡量代码的好坏要从时间和空间两个角度去考虑。即：")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("时间复杂度")]),
        _vm._v(" "),
        _c("li", [_vm._v("空间复杂度")])
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("在本文中，我们先讲解时间复杂度。")]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "时间复杂度" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#时间复杂度" } },
          [_vm._v("#")]
        ),
        _vm._v(" 时间复杂度")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("我们可以将时间复杂度划分为两个小概念：")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("基本操作次数")]),
        _vm._v(" "),
        _c("li", [_vm._v("渐进时间复杂度")])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "基本操作次数" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#基本操作次数" } },
          [_vm._v("#")]
        ),
        _vm._v(" 基本操作次数")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("我们假设计算机运行一行基础代码执行一次运算。")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("void")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("T0101")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"hello world!"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("//执行一次")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br")
        ])
      ]),
      _c("div", { staticClass: "language-python line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-python" } }, [
          _c("code", [
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"helo world"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("#执行一次")
            ]),
            _vm._v("\n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br")
        ])
      ]),
      _c("p", [_vm._v("这个方法需要执行1次运算。")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("void")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("T0102")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("<")
            ]),
            _vm._v(" n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" i"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("++")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 再计算 for 循环外层执行次数 n+1 次")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"hello world!"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 先计算 for 循环里层执行的次数 n 次")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br")
        ])
      ]),
      _c("div", { staticClass: "language-python line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-python" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("in")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("range")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 再计算 for 循环外层执行次数 n+1 次")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"hello world!"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 先计算 for 循环里层执行的次数为 n 次")
            ]),
            _vm._v("\n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br")
        ])
      ]),
      _c("p", [
        _vm._v(
          "解析 python 代码：\n上面这个方法需要执行（n+1+n）= 2n+1 次运算。\n在 for 循环中，我们首先初始化变量 i ，它并没有实际的意义，仅用作记录我们到底循环了几次，由"
        ),
        _c("code", [_vm._v("for i in range(n)")]),
        _vm._v(
          "这行代码可知，我们的 i 从 0 开始计数，直到 n，总共n+1次，即 i 计数这件事执行了 n+1 次，因此 for 循环的外层执行次数为 n+1 次。\nfor 循环的内容为打印 "
        ),
        _c("code", [_vm._v("hello world！")]),
        _vm._v(
          "这句话。为什么 for 循环里层执行的次数为 n 而不是 n+1 ？ 是因为 i 从 0 开始计数，当我们不断循环到i的计数为 n-1 时 执行 "
        ),
        _c("code", [_vm._v('print("hello world!")')]),
        _vm._v(
          " 然后 i 的计数累加为 n ,此时已经到了循环边界，我们便跳出循环，不再执行"
        ),
        _c("code", [_vm._v("print（“hello world!”)")]),
        _vm._v("，因此循环体内的内容只执行 n 次。")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("我们把算法需要执行的运算次数用 输入大小n 的函数表示，即 T(n).")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "为了估算算法需要的运行时间和简化算法分析，我们引入时间复杂度的概念。"
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("我们再来看几个例子：")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("1."),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("3")]),
                          _c("mi", [_vm._v("n")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n) = 3n")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("3")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ]),
        _vm._v(",执行次数是线性的。")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("void")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("T0103")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("<")
            ]),
            _vm._v(" n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" i"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("++")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 外层循环 n 次 ")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"一"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 执行一次")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"二"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 执行一次")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"三"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 执行一次")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br")
        ])
      ]),
      _c("div", { staticClass: "language-python line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-python" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("in")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("range")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 外层循环 n 次 ")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"-"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 执行一次")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"二"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 执行一次")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"三"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 执行一次")
            ]),
            _vm._v("\n    \n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br")
        ])
      ]),
      _c("p", [
        _vm._v("2."),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("5")]),
                          _c("mi", [_vm._v("l")]),
                          _c("mi", [_vm._v("o")]),
                          _c("mi", [_vm._v("g")]),
                          _c("mi", [_vm._v("n")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n) = 5logn")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8888799999999999em",
                    "vertical-align": "-0.19444em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("5")]),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.01968em" }
                  },
                  [_vm._v("l")]
                ),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("o")]),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.03588em" }
                  },
                  [_vm._v("g")]
                ),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ]),
        _vm._v(" ,执行次数是用对数计算的。")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-java line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("void")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("T0104")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" i"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(">")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" i"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("/=")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("2")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 观察 n 与 i 的运算关系 成对数关系")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("println")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"一"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 执行一次")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("println")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"二"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 执行一次")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("println")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"三"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 执行一次")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("println")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"四"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 执行一次")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("println")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"五"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 执行一次")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("8")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("9")]),
          _c("br")
        ])
      ]),
      _c("div", { staticClass: "language-python line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-python" } }, [
          _c("code", [
            _vm._v("i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" n "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v(
                "# 在这里 n 代表的是某个特定的数字，如果要进行代码复制，请将 n 改为指定的数字去运行"
              )
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("while")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v(">")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("1")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"一"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 执行一次")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"二"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 执行一次")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"三"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 执行一次")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"四"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 执行一次")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"五"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 执行一次")
            ]),
            _vm._v("\n    i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" i"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("//")
            ]),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("2")
            ]),
            _vm._v("\n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("6")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("7")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("8")]),
          _c("br")
        ])
      ]),
      _c("p", [
        _vm._v("3."),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("2")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n) = 2")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("2")])
              ])
            ]
          )
        ]),
        _vm._v(" , 执行次数是常量。")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "language-JAVA line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("void")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("T0105")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("    \n    "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("println")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"一"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 没有循环次数    ")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("println")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"二"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 只需要输出两次内容执行次数为 2")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br")
        ])
      ]),
      _c("div", { staticClass: "language-python line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-python" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"一"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 无循环次数")
            ]),
            _vm._v("\n"),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"二"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 只需要输出两次内容执行的次数为 2")
            ]),
            _vm._v("\n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br")
        ])
      ]),
      _c("p", [_vm._v("4.$ T(n) = n^2$ ,执行次数为幂函数。")]),
      _vm._v(" "),
      _c("div", { staticClass: "language-JAVA line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-java" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("void")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("T0106")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v("    \n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("<")
            ]),
            _vm._v(" n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" i"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("++")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 循环次数为 n")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("int")
            ]),
            _vm._v(" j "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("=")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token number" } }, [
              _vm._v("0")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" j "),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("<")
            ]),
            _vm._v(" n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" j"),
            _c("span", { pre: true, attrs: { class: "token operator" } }, [
              _vm._v("++")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("{")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 循环次数为 n")
            ]),
            _vm._v("\n            "),
            _c("span", { pre: true, attrs: { class: "token class-name" } }, [
              _vm._v("System")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _vm._v("out"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(".")
            ]),
            _c("span", { pre: true, attrs: { class: "token function" } }, [
              _vm._v("println")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"Hello, World!"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(";")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("// 循环体时间复杂度为 O(1)         ")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("    "),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("}")
            ]),
            _vm._v("\n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("4")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("5")]),
          _c("br")
        ])
      ]),
      _c("div", { staticClass: "language-python line-numbers-mode" }, [
        _c("pre", { pre: true, attrs: { class: "language-python" } }, [
          _c("code", [
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _vm._v(" i "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("in")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("range")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 循环次数 n    ")
            ]),
            _vm._v("\n    "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("for")
            ]),
            _vm._v(" j "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("in")
            ]),
            _vm._v(" "),
            _c("span", { pre: true, attrs: { class: "token builtin" } }, [
              _vm._v("range")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _vm._v("n"),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(":")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 循环次数 n         ")
            ]),
            _vm._v("\n        "),
            _c("span", { pre: true, attrs: { class: "token keyword" } }, [
              _vm._v("print")
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v("(")
            ]),
            _c("span", { pre: true, attrs: { class: "token string" } }, [
              _vm._v('"hello world"')
            ]),
            _c("span", { pre: true, attrs: { class: "token punctuation" } }, [
              _vm._v(")")
            ]),
            _c("span", { pre: true, attrs: { class: "token comment" } }, [
              _vm._v("# 循环体时间复杂度为 O(1)")
            ]),
            _vm._v("\n")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "line-numbers-wrapper" }, [
          _c("span", { staticClass: "line-number" }, [_vm._v("1")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("2")]),
          _c("br"),
          _c("span", { staticClass: "line-number" }, [_vm._v("3")]),
          _c("br")
        ])
      ]),
      _c("h3", { attrs: { id: "渐进时间复杂度" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#渐进时间复杂度" } },
          [_vm._v("#")]
        ),
        _vm._v(" 渐进时间复杂度")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "现在我们已经有了 T(n) ,是否就可以分析和比较代码的运行时间了呢？不不不，n 你还没确定呢。"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "假设A的执行次数是$ T(n) = 100n $，算法 B 执行的次数是  $ T(n) = 5n^2 $  ,这辆谁大就要取决于 n 了。"
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("因此为了解决这类难题，我们有了渐进时间复杂度的概念。")]),
      _vm._v(" "),
      _c("p", [_vm._v("维基百科的定义如下：")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "在计算机科学中，算法的时间复杂度是一个函数，它定性描述该算法的运行时间。时间复杂度常用大 O 符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("直白的讲就是，渐进复杂度就是将我们计算的程序的执行次数函数 "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n)")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")])
              ])
            ]
          )
        ]),
        _vm._v("  简化为数量级，例如  "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c("mrow", [_c("mi", [_vm._v("n")])], 1),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("n")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.43056em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ]),
        _vm._v("、"),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("2")])],
                            1
                          )
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("n^2")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8141079999999999em",
                    "vertical-align": "0em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("2")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]
          )
        ]),
        _vm._v(" 、"),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("3")])],
                            1
                          )
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("n^3")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8141079999999999em",
                    "vertical-align": "0em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("3")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]
          )
        ]),
        _vm._v("  等。")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("那我们要如何推算出时间复杂度呢？有以下几个原则：")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "如果运行时间是常数级的（例如：1,2,3,4,6等），则直接用常数 1 代替表示。"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("只保留时间函数中的最高阶项。")]),
        _vm._v(" "),
        _c("li", [_vm._v("如果最高阶项存在，则省去最高阶项前面的系数。")])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "例如，如果一个算法对于任何大小为  n （必须比 n0 大）的输入，它至多需要  "
        ),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mn", [_vm._v("5")]),
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("3")])],
                            1
                          ),
                          _c("mo", [_vm._v("+")]),
                          _c("mn", [_vm._v("3")]),
                          _c("mi", [_vm._v("n")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("5n^3 + 3n")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.897438em",
                    "vertical-align": "-0.08333em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("5")]),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("3")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2222222222222222em" }
                }),
                _c("span", { staticClass: "mbin" }, [_vm._v("+")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2222222222222222em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("3")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ]),
        _vm._v("  的时间运行完毕，那么它的渐近时间复杂度是  "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("O")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("3")])],
                            1
                          ),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("O(n^3)")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "1.064108em",
                    "vertical-align": "-0.25em"
                  }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.02778em" }
                  },
                  [_vm._v("O")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("3")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")])
              ])
            ]
          )
        ]),
        _vm._v(" 。")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("这个推算过程即为：")]),
      _vm._v(" "),
      _c("p", [
        _vm._v("1.保留函数中的最高阶项。即:  "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mn", [_vm._v("5")]),
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("3")])],
                            1
                          ),
                          _c("mo", [_vm._v("+")]),
                          _c("mn", [_vm._v("3")]),
                          _c("mi", [_vm._v("n")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("5n^3+3n")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.897438em",
                    "vertical-align": "-0.08333em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("5")]),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("3")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2222222222222222em" }
                }),
                _c("span", { staticClass: "mbin" }, [_vm._v("+")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2222222222222222em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("3")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ]),
        _vm._v(" "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [_c("mo", [_vm._v("−")]), _c("mo", [_vm._v(">")])],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("->")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.66666em",
                    "vertical-align": "-0.08333em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("−")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v(">")])
              ])
            ]
          )
        ]),
        _vm._v(" "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mn", [_vm._v("5")]),
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("3")])],
                            1
                          )
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("5n^3")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8141079999999999em",
                    "vertical-align": "0em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("5")]),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("3")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("2.最高阶项存在，则省去最高阶项前面的系数。即:  "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mn", [_vm._v("5")]),
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("3")])],
                            1
                          )
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("5n^3")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8141079999999999em",
                    "vertical-align": "0em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("5")]),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("3")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]
          )
        ]),
        _vm._v(" "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [_c("mo", [_vm._v("−")]), _c("mo", [_vm._v(">")])],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("->")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.66666em",
                    "vertical-align": "-0.08333em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("−")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v(">")])
              ])
            ]
          )
        ]),
        _vm._v(" "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("3")])],
                            1
                          )
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("n^3")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8141079999999999em",
                    "vertical-align": "0em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("3")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("我们再来复习一下我们刚才看的那几个计算时间函数的例子。")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("1."),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("3")]),
                          _c("mi", [_vm._v("n")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n) = 3n")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("3")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("最高阶项为 "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [_c("mn", [_vm._v("3")]), _c("mi", [_vm._v("n")])],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("3n")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("3")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ]),
        _vm._v("  ,省去 3 ，则转化为的时间复杂度为：")
      ]),
      _vm._v(" "),
      _c("p", { staticClass: "katex-block" }, [
        _c("span", { staticClass: "katex-display" }, [
          _c("span", { staticClass: "katex" }, [
            _c(
              "span",
              { staticClass: "katex-mathml" },
              [
                _c(
                  "math",
                  {
                    attrs: {
                      xmlns: "http://www.w3.org/1998/Math/MathML",
                      display: "block"
                    }
                  },
                  [
                    _c(
                      "semantics",
                      [
                        _c(
                          "mrow",
                          [
                            _c("mi", [_vm._v("T")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v("(")
                            ]),
                            _c("mi", [_vm._v("n")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v(")")
                            ]),
                            _c("mo", [_vm._v("=")]),
                            _c("mi", [_vm._v("O")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v("(")
                            ]),
                            _c("mi", [_vm._v("n")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v(")")
                            ])
                          ],
                          1
                        ),
                        _c(
                          "annotation",
                          { attrs: { encoding: "application/x-tex" } },
                          [_vm._v("T(n) = O(n)\n")]
                        )
                      ],
                      1
                    )
                  ],
                  1
                )
              ],
              1
            ),
            _c(
              "span",
              { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
              [
                _c("span", { staticClass: "base" }, [
                  _c("span", {
                    staticClass: "strut",
                    staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                  }),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.13889em" }
                    },
                    [_vm._v("T")]
                  ),
                  _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  }),
                  _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  })
                ]),
                _c("span", { staticClass: "base" }, [
                  _c("span", {
                    staticClass: "strut",
                    staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                  }),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.02778em" }
                    },
                    [_vm._v("O")]
                  ),
                  _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "mclose" }, [_vm._v(")")])
                ])
              ]
            )
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src:
              "https://gitee.com/huangjiabaoaiyc/image/raw/master/20211028101622.png",
            alt: ""
          }
        })
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("2."),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("5")]),
                          _c("mi", [_vm._v("l")]),
                          _c("mi", [_vm._v("o")]),
                          _c("mi", [_vm._v("g")]),
                          _c("mi", [_vm._v("n")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n) = 5logn")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8888799999999999em",
                    "vertical-align": "-0.19444em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("5")]),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.01968em" }
                  },
                  [_vm._v("l")]
                ),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("o")]),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.03588em" }
                  },
                  [_vm._v("g")]
                ),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ]),
        _vm._v("  , 最高阶项为  "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mn", [_vm._v("5")]),
                          _c("mi", [_vm._v("l")]),
                          _c("mi", [_vm._v("o")]),
                          _c("mi", [_vm._v("g")]),
                          _c("mi", [_vm._v("n")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("5logn")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8888799999999999em",
                    "vertical-align": "-0.19444em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("5")]),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.01968em" }
                  },
                  [_vm._v("l")]
                ),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("o")]),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.03588em" }
                  },
                  [_vm._v("g")]
                ),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ]),
        _vm._v(" ，省去系数 5，则转化的时间复杂度为：")
      ]),
      _vm._v(" "),
      _c("p", { staticClass: "katex-block" }, [
        _c("span", { staticClass: "katex-display" }, [
          _c("span", { staticClass: "katex" }, [
            _c(
              "span",
              { staticClass: "katex-mathml" },
              [
                _c(
                  "math",
                  {
                    attrs: {
                      xmlns: "http://www.w3.org/1998/Math/MathML",
                      display: "block"
                    }
                  },
                  [
                    _c(
                      "semantics",
                      [
                        _c(
                          "mrow",
                          [
                            _c("mi", [_vm._v("T")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v("(")
                            ]),
                            _c("mi", [_vm._v("n")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v(")")
                            ]),
                            _c("mo", [_vm._v("=")]),
                            _c("mi", [_vm._v("O")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v("(")
                            ]),
                            _c("mi", [_vm._v("l")]),
                            _c("mi", [_vm._v("o")]),
                            _c("mi", [_vm._v("g")]),
                            _c("mi", [_vm._v("n")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v(")")
                            ])
                          ],
                          1
                        ),
                        _c(
                          "annotation",
                          { attrs: { encoding: "application/x-tex" } },
                          [_vm._v("T(n) = O(logn)\n")]
                        )
                      ],
                      1
                    )
                  ],
                  1
                )
              ],
              1
            ),
            _c(
              "span",
              { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
              [
                _c("span", { staticClass: "base" }, [
                  _c("span", {
                    staticClass: "strut",
                    staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                  }),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.13889em" }
                    },
                    [_vm._v("T")]
                  ),
                  _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  }),
                  _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  })
                ]),
                _c("span", { staticClass: "base" }, [
                  _c("span", {
                    staticClass: "strut",
                    staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                  }),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.02778em" }
                    },
                    [_vm._v("O")]
                  ),
                  _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.01968em" }
                    },
                    [_vm._v("l")]
                  ),
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("o")]),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.03588em" }
                    },
                    [_vm._v("g")]
                  ),
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "mclose" }, [_vm._v(")")])
                ])
              ]
            )
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src:
              "https://gitee.com/huangjiabaoaiyc/image/raw/master/20211028101635.png",
            alt: ""
          }
        })
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("3."),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("2")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n) = 2")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("2")])
              ])
            ]
          )
        ]),
        _vm._v(" ，只有常数量级，则拿 1 替换常数，转换后的时间复杂度为：")
      ]),
      _vm._v(" "),
      _c("p", { staticClass: "katex-block" }, [
        _c("span", { staticClass: "katex-display" }, [
          _c("span", { staticClass: "katex" }, [
            _c(
              "span",
              { staticClass: "katex-mathml" },
              [
                _c(
                  "math",
                  {
                    attrs: {
                      xmlns: "http://www.w3.org/1998/Math/MathML",
                      display: "block"
                    }
                  },
                  [
                    _c(
                      "semantics",
                      [
                        _c(
                          "mrow",
                          [
                            _c("mi", [_vm._v("T")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v("(")
                            ]),
                            _c("mi", [_vm._v("n")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v(")")
                            ]),
                            _c("mo", [_vm._v("=")]),
                            _c("mi", [_vm._v("O")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v("(")
                            ]),
                            _c("mn", [_vm._v("1")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v(")")
                            ])
                          ],
                          1
                        ),
                        _c(
                          "annotation",
                          { attrs: { encoding: "application/x-tex" } },
                          [_vm._v("T(n) = O(1)\n")]
                        )
                      ],
                      1
                    )
                  ],
                  1
                )
              ],
              1
            ),
            _c(
              "span",
              { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
              [
                _c("span", { staticClass: "base" }, [
                  _c("span", {
                    staticClass: "strut",
                    staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                  }),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.13889em" }
                    },
                    [_vm._v("T")]
                  ),
                  _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  }),
                  _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  })
                ]),
                _c("span", { staticClass: "base" }, [
                  _c("span", {
                    staticClass: "strut",
                    staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                  }),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.02778em" }
                    },
                    [_vm._v("O")]
                  ),
                  _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                  _c("span", { staticClass: "mord" }, [_vm._v("1")]),
                  _c("span", { staticClass: "mclose" }, [_vm._v(")")])
                ])
              ]
            )
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src:
              "https://gitee.com/huangjiabaoaiyc/image/raw/master/20211028101657.png",
            alt: ""
          }
        })
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("4."),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("2")])],
                            1
                          )
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n)=n^2")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8141079999999999em",
                    "vertical-align": "0em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("2")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "这四种时间复杂度究竟谁更快，谁更更慢呢？当 n 足够大时，我们可以得到这样的结论："
        )
      ]),
      _vm._v(" "),
      _c("p", { staticClass: "katex-block" }, [
        _c("span", { staticClass: "katex-display" }, [
          _c("span", { staticClass: "katex" }, [
            _c(
              "span",
              { staticClass: "katex-mathml" },
              [
                _c(
                  "math",
                  {
                    attrs: {
                      xmlns: "http://www.w3.org/1998/Math/MathML",
                      display: "block"
                    }
                  },
                  [
                    _c(
                      "semantics",
                      [
                        _c(
                          "mrow",
                          [
                            _c("mi", [_vm._v("O")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v("(")
                            ]),
                            _c("mn", [_vm._v("1")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v(")")
                            ]),
                            _c("mo", [_vm._v("<")]),
                            _c("mi", [_vm._v("O")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v("(")
                            ]),
                            _c("mi", [_vm._v("l")]),
                            _c("mi", [_vm._v("o")]),
                            _c("mi", [_vm._v("g")]),
                            _c("mi", [_vm._v("n")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v(")")
                            ]),
                            _c("mo", [_vm._v("<")]),
                            _c("mi", [_vm._v("O")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v("(")
                            ]),
                            _c("mi", [_vm._v("n")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v(")")
                            ]),
                            _c("mo", [_vm._v("<")]),
                            _c("mi", [_vm._v("O")]),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v("(")
                            ]),
                            _c(
                              "msup",
                              [
                                _c("mi", [_vm._v("n")]),
                                _c("mn", [_vm._v("2")])
                              ],
                              1
                            ),
                            _c("mo", { attrs: { stretchy: "false" } }, [
                              _vm._v(")")
                            ])
                          ],
                          1
                        ),
                        _c(
                          "annotation",
                          { attrs: { encoding: "application/x-tex" } },
                          [_vm._v("O(1)<O(logn)<O(n)<O(n^2)\n")]
                        )
                      ],
                      1
                    )
                  ],
                  1
                )
              ],
              1
            ),
            _c(
              "span",
              { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
              [
                _c("span", { staticClass: "base" }, [
                  _c("span", {
                    staticClass: "strut",
                    staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                  }),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.02778em" }
                    },
                    [_vm._v("O")]
                  ),
                  _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                  _c("span", { staticClass: "mord" }, [_vm._v("1")]),
                  _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  }),
                  _c("span", { staticClass: "mrel" }, [_vm._v("<")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  })
                ]),
                _c("span", { staticClass: "base" }, [
                  _c("span", {
                    staticClass: "strut",
                    staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                  }),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.02778em" }
                    },
                    [_vm._v("O")]
                  ),
                  _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.01968em" }
                    },
                    [_vm._v("l")]
                  ),
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("o")]),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.03588em" }
                    },
                    [_vm._v("g")]
                  ),
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  }),
                  _c("span", { staticClass: "mrel" }, [_vm._v("<")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  })
                ]),
                _c("span", { staticClass: "base" }, [
                  _c("span", {
                    staticClass: "strut",
                    staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                  }),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.02778em" }
                    },
                    [_vm._v("O")]
                  ),
                  _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  }),
                  _c("span", { staticClass: "mrel" }, [_vm._v("<")]),
                  _c("span", {
                    staticClass: "mspace",
                    staticStyle: { "margin-right": "0.2777777777777778em" }
                  })
                ]),
                _c("span", { staticClass: "base" }, [
                  _c("span", {
                    staticClass: "strut",
                    staticStyle: {
                      height: "1.1141079999999999em",
                      "vertical-align": "-0.25em"
                    }
                  }),
                  _c(
                    "span",
                    {
                      staticClass: "mord mathnormal",
                      staticStyle: { "margin-right": "0.02778em" }
                    },
                    [_vm._v("O")]
                  ),
                  _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                  _c("span", { staticClass: "mord" }, [
                    _c("span", { staticClass: "mord mathnormal" }, [
                      _vm._v("n")
                    ]),
                    _c("span", { staticClass: "msupsub" }, [
                      _c("span", { staticClass: "vlist-t" }, [
                        _c("span", { staticClass: "vlist-r" }, [
                          _c(
                            "span",
                            {
                              staticClass: "vlist",
                              staticStyle: { height: "0.8641079999999999em" }
                            },
                            [
                              _c(
                                "span",
                                {
                                  staticStyle: {
                                    top: "-3.113em",
                                    "margin-right": "0.05em"
                                  }
                                },
                                [
                                  _c("span", {
                                    staticClass: "pstrut",
                                    staticStyle: { height: "2.7em" }
                                  }),
                                  _c(
                                    "span",
                                    {
                                      staticClass:
                                        "sizing reset-size6 size3 mtight"
                                    },
                                    [
                                      _c(
                                        "span",
                                        { staticClass: "mord mtight" },
                                        [_vm._v("2")]
                                      )
                                    ]
                                  )
                                ]
                              )
                            ]
                          )
                        ])
                      ])
                    ])
                  ]),
                  _c("span", { staticClass: "mclose" }, [_vm._v(")")])
                ])
              ]
            )
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src:
              "https://gitee.com/huangjiabaoaiyc/image/raw/master/20211028101715.png",
            alt: ""
          }
        })
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "时间复杂度的差异" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#时间复杂度的差异" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" 时间复杂度的差异")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "介绍了这么多，肯定有读者心中会产生疑问，你这说了半天...函数式子，能不能让我们直接体会一下时间复杂度的差异？"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("假设算法A的执行次数是 "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("100")]),
                          _c("mi", [_vm._v("n")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n) =100n")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("100")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ]),
        _vm._v("  ,")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("时间复杂度为 "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("O")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mi", [_vm._v("n")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("O(n)=n")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.02778em" }
                  },
                  [_vm._v("O")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.43056em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("算法 B 的执行次数是 "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("5")]),
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("2")])],
                            1
                          )
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n) = 5n^2")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8141079999999999em",
                    "vertical-align": "0em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("5")]),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("2")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]
          )
        ]),
        _vm._v("  ,")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("时间复杂度为 "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("O")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("2")])],
                            1
                          )
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("O(n) = n^2")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.02778em" }
                  },
                  [_vm._v("O")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8141079999999999em",
                    "vertical-align": "0em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("2")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("如果  "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("n")]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("1")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("n=1")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.43056em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("1")])
              ])
            ]
          )
        ]),
        _vm._v(" ，使用算法 A 和算法 B 的次数均为 1")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("但是当 "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c("mrow", [_c("mi", [_vm._v("n")])], 1),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("n")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.43056em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ]),
        _vm._v(" 逐渐增大时，时间复杂度的差异性就体现出来了。")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("当 "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("n")]),
                          _c("mo", [_vm._v("<")]),
                          _c("mn", [_vm._v("20")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("n<20")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.5782em",
                    "vertical-align": "-0.0391em"
                  }
                }),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("<")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("20")])
              ])
            ]
          )
        ]),
        _vm._v(" 时， "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("100")]),
                          _c("mi", [_vm._v("n")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n)=100n")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("100")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")])
              ])
            ]
          )
        ]),
        _vm._v(" 的增长速度比 "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("5")]),
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("2")])],
                            1
                          )
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n)=5n^2")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.8141079999999999em",
                    "vertical-align": "0em"
                  }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("5")]),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("2")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]
          )
        ]),
        _vm._v(" 快")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("当 "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("n")]),
                          _c("mo", [_vm._v(">")]),
                          _c("mn", [_vm._v("20")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("n>20")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "0.5782em",
                    "vertical-align": "-0.0391em"
                  }
                }),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v(">")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("20")])
              ])
            ]
          )
        ]),
        _vm._v(" 时， "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mn", [_vm._v("5")]),
                          _c(
                            "msup",
                            [_c("mi", [_vm._v("n")]), _c("mn", [_vm._v("2")])],
                            1
                          )
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n)5n^2")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: {
                    height: "1.064108em",
                    "vertical-align": "-0.25em"
                  }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", { staticClass: "mord" }, [_vm._v("5")]),
                _c("span", { staticClass: "mord" }, [
                  _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                  _c("span", { staticClass: "msupsub" }, [
                    _c("span", { staticClass: "vlist-t" }, [
                      _c("span", { staticClass: "vlist-r" }, [
                        _c(
                          "span",
                          {
                            staticClass: "vlist",
                            staticStyle: { height: "0.8141079999999999em" }
                          },
                          [
                            _c(
                              "span",
                              {
                                staticStyle: {
                                  top: "-3.063em",
                                  "margin-right": "0.05em"
                                }
                              },
                              [
                                _c("span", {
                                  staticClass: "pstrut",
                                  staticStyle: { height: "2.7em" }
                                }),
                                _c(
                                  "span",
                                  {
                                    staticClass:
                                      "sizing reset-size6 size3 mtight"
                                  },
                                  [
                                    _c("span", { staticClass: "mord mtight" }, [
                                      _vm._v("2")
                                    ])
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      ])
                    ])
                  ])
                ])
              ])
            ]
          )
        ]),
        _vm._v(" 的增长速度比 "),
        _c("span", { staticClass: "katex" }, [
          _c(
            "span",
            { staticClass: "katex-mathml" },
            [
              _c(
                "math",
                { attrs: { xmlns: "http://www.w3.org/1998/Math/MathML" } },
                [
                  _c(
                    "semantics",
                    [
                      _c(
                        "mrow",
                        [
                          _c("mi", [_vm._v("T")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v("(")
                          ]),
                          _c("mi", [_vm._v("n")]),
                          _c("mo", { attrs: { stretchy: "false" } }, [
                            _vm._v(")")
                          ]),
                          _c("mo", [_vm._v("=")]),
                          _c("mn", [_vm._v("100")])
                        ],
                        1
                      ),
                      _c(
                        "annotation",
                        { attrs: { encoding: "application/x-tex" } },
                        [_vm._v("T(n) = 100")]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _c(
            "span",
            { staticClass: "katex-html", attrs: { "aria-hidden": "true" } },
            [
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "1em", "vertical-align": "-0.25em" }
                }),
                _c(
                  "span",
                  {
                    staticClass: "mord mathnormal",
                    staticStyle: { "margin-right": "0.13889em" }
                  },
                  [_vm._v("T")]
                ),
                _c("span", { staticClass: "mopen" }, [_vm._v("(")]),
                _c("span", { staticClass: "mord mathnormal" }, [_vm._v("n")]),
                _c("span", { staticClass: "mclose" }, [_vm._v(")")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                }),
                _c("span", { staticClass: "mrel" }, [_vm._v("=")]),
                _c("span", {
                  staticClass: "mspace",
                  staticStyle: { "margin-right": "0.2777777777777778em" }
                })
              ]),
              _c("span", { staticClass: "base" }, [
                _c("span", {
                  staticClass: "strut",
                  staticStyle: { height: "0.64444em", "vertical-align": "0em" }
                }),
                _c("span", { staticClass: "mord" }, [_vm._v("100")])
              ])
            ]
          )
        ]),
        _vm._v("  快")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src:
              "https://gitee.com/huangjiabaoaiyc/image/raw/master/20211028101728.png",
            alt: ""
          }
        })
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "可见当我们要处理的对象足够大的时候，选时间复杂度较低的算法可使我们事半功倍，提高我们的程序运行效率。"
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "总结" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#总结" } }, [
          _vm._v("#")
        ]),
        _vm._v(" 总结")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "本次我们详细的介绍了时间复杂度的概念。下次我们将引入空间复杂度的概念。"
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("公众号：AI悦创，首发！")]),
      _vm._v(" "),
      _c("blockquote", [
        _c("p", [
          _vm._v(
            "流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！"
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("方法一："),
          _c(
            "a",
            {
              attrs: {
                href:
                  "http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("QQ"), _c("OutboundLink")],
            1
          )
        ]),
        _vm._v(" "),
        _c("p", [_vm._v("方法二：微信：Jiabcdefh")])
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}