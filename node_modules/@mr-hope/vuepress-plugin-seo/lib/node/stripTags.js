"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.striptags = exports.StateMachine = exports.InCommentState = exports.InQuotedStringInTagState = exports.InTagState = exports.InTagNameState = exports.InPlaintextState = void 0;
const TAG_START = "<";
const TAG_END = ">";
const ENCODED_TAG_START = "&lt;";
const ENCODED_TAG_END = "&gt;";
const isSpace = (character) => character === " " ||
    character === "\n" ||
    character === "\r" ||
    character === "\t";
const isQuote = (character) => character === '"' || character === "'";
class InPlaintextState {
    consume(character, transition) {
        if (character === TAG_START) {
            transition(new InTagNameState());
            return "";
        }
        return character;
    }
}
exports.InPlaintextState = InPlaintextState;
class InTagNameState {
    constructor() {
        this.nameBuffer = "";
    }
    consume(character, transition) {
        if (this.nameBuffer.length === 0) {
            if (isSpace(character)) {
                transition(new InPlaintextState());
                return "<" + character;
            }
            if (character === "/")
                return "";
        }
        if (isSpace(character)) {
            transition(new InTagState(1 /* disallowed */));
            return "";
        }
        if (character == TAG_START) {
            this.nameBuffer += ENCODED_TAG_START;
            return "";
        }
        if (character == TAG_END) {
            transition(new InPlaintextState());
            return "";
        }
        if (character == "-" && this.nameBuffer == "!-") {
            transition(new InCommentState());
            return "";
        }
        this.nameBuffer += character;
        return "";
    }
}
exports.InTagNameState = InTagNameState;
class InTagState {
    constructor(mode) {
        this.mode = mode;
    }
    consume(character, transition) {
        if (character == TAG_END)
            transition(new InPlaintextState());
        else if (isQuote(character))
            transition(new InQuotedStringInTagState(this.mode, character));
        if (this.mode == 1 /* disallowed */)
            return "";
        if (character == TAG_START)
            return ENCODED_TAG_START;
        return character;
    }
}
exports.InTagState = InTagState;
class InQuotedStringInTagState {
    constructor(mode, quoteCharacter) {
        this.mode = mode;
        this.quoteCharacter = quoteCharacter;
    }
    consume(character, transition) {
        if (character == this.quoteCharacter)
            transition(new InTagState(this.mode));
        if (this.mode == 1 /* disallowed */)
            return "";
        if (character == TAG_START)
            return ENCODED_TAG_START;
        if (character == TAG_END)
            return ENCODED_TAG_END;
        return character;
    }
}
exports.InQuotedStringInTagState = InQuotedStringInTagState;
class InCommentState {
    constructor() {
        this.consecutiveHyphens = 0;
    }
    consume(character, transition) {
        if (character == ">" && this.consecutiveHyphens >= 2)
            transition(new InPlaintextState());
        else if (character == "-")
            this.consecutiveHyphens++;
        else
            this.consecutiveHyphens = 0;
        return "";
    }
}
exports.InCommentState = InCommentState;
class StateMachine {
    constructor() {
        this.state = new InPlaintextState();
        this.transitionFunction = (next) => {
            this.state = next;
        };
    }
    consume(text) {
        let outputBuffer = "";
        for (const character of text)
            outputBuffer += this.state.consume(character, this.transitionFunction);
        return outputBuffer;
    }
}
exports.StateMachine = StateMachine;
const striptags = (text = "") => text ? new StateMachine().consume(text) : "";
exports.striptags = striptags;
//# sourceMappingURL=stripTags.js.map