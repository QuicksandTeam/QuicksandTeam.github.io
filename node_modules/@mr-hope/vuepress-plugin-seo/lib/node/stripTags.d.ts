declare type QuoteCharacter = '"' | "'";
export declare type StateTransitionFunction = (next: State) => void;
export interface State {
    consume(character: string, transition: StateTransitionFunction): string;
}
declare type InPlaintextStateTransitionFunction = (next: InTagNameState) => void;
export declare class InPlaintextState implements State {
    consume(character: string, transition: InPlaintextStateTransitionFunction): string;
}
export declare const enum TagMode {
    allowed = 0,
    disallowed = 1
}
declare type InTagNameStateTransitionFunction = (next: InPlaintextState | InTagState<TagMode.allowed> | InTagState<TagMode.disallowed> | InCommentState) => void;
export declare class InTagNameState implements State {
    private nameBuffer;
    consume(character: string, transition: InTagNameStateTransitionFunction): string;
}
declare type InTagStateTransitionFunction<T extends TagMode> = (next: InPlaintextState | InQuotedStringInTagState<T>) => void;
export declare class InTagState<T extends TagMode> implements State {
    readonly mode: T;
    constructor(mode: T);
    consume(character: string, transition: InTagStateTransitionFunction<T>): string;
}
declare type InQuotedStringInTagStateTransitionFunction<T extends TagMode> = (next: InTagState<T>) => void;
export declare class InQuotedStringInTagState<T extends TagMode> implements State {
    readonly mode: T;
    readonly quoteCharacter: QuoteCharacter;
    constructor(mode: T, quoteCharacter: QuoteCharacter);
    consume(character: string, transition: InQuotedStringInTagStateTransitionFunction<T>): string;
}
declare type InCommentStateTransitionFunction = (next: InPlaintextState) => void;
export declare class InCommentState implements State {
    private consecutiveHyphens;
    consume(character: string, transition: InCommentStateTransitionFunction): string;
}
export declare class StateMachine {
    private state;
    private transitionFunction;
    constructor();
    consume(text: string): string;
}
export declare const striptags: (text?: string) => string;
export {};
