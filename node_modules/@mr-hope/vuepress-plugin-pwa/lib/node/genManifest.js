"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.genManifest = exports.getManifest = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const vuepress_shared_1 = require("@mr-hope/vuepress-shared");
const chalk_1 = require("chalk");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const getManifest = async (options, context) => {
    const { sourceDir, siteConfig, themeConfig } = context;
    const userManifestPath = (0, path_1.resolve)(sourceDir, "./.vuepress/public/manifest.webmanifest");
    const userManifestJSONPath = (0, path_1.resolve)(sourceDir, "./.vuepress/public/manifest.json");
    const optionManifest = options.manifest || {};
    const userManifest = JSON.parse((0, fs_extra_1.existsSync)(userManifestPath)
        ? await (0, fs_extra_1.readFile)(userManifestPath, "utf8")
        : (0, fs_extra_1.existsSync)(userManifestJSONPath)
            ? await (0, fs_extra_1.readFile)(userManifestJSONPath, "utf8")
            : "{}");
    const finalManifest = Object.assign(Object.assign({ name: siteConfig.title || themeConfig.title || "Site", short_name: siteConfig.title || themeConfig.title || "Site", description: siteConfig.description || "A site built with vuepress-theme-hope", lang: (0, vuepress_shared_1.getRootLang)(context), start_url: context.base, scope: context.base, display: "standalone", theme_color: options.themeColor || "#46bd87", background_color: "#ffffff", orientation: "portrait-primary", prefer_related_applications: false }, userManifest), optionManifest);
    return finalManifest;
};
exports.getManifest = getManifest;
const genManifest = async (options, context) => {
    console.log((0, chalk_1.blue)("PWA:"), chalk_1.black.bgYellow("wait"), "Generating manifest.webmanifest...");
    const { cwd, outDir } = context;
    const manifest = await (0, exports.getManifest)(options, context);
    const manifestPath = (0, path_1.resolve)(outDir, "manifest.webmanifest");
    await (0, fs_extra_1.writeJSON)(manifestPath, manifest, {
        flag: "w",
    });
    console.log((0, chalk_1.blue)("PWA:"), chalk_1.black.bgGreen("Success"), `Manifest generated and saved to ${(0, chalk_1.cyan)((0, path_1.relative)(cwd, manifestPath))}`);
};
exports.genManifest = genManifest;
//# sourceMappingURL=genManifest.js.map