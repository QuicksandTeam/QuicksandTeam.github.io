<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://book.bornforthi.com/rss.xml" rel="self" type="application/rss+xml"/>
    <title>流沙团队</title>
    <link>https://book.bornforthi.com/</link>
    <description>一股无形的力量，流沙团队：AI悦创、久远,编程一对一教学,Python,爬虫,深度学习,机器学习,数据分析,网络,IT,技术,博客,算法与数据结构</description>
    <language>zh-CN</language>
    <pubDate>Sat, 06 Nov 2021 00:24:20 GMT</pubDate>
    <lastBuildDate>Sat, 06 Nov 2021 00:24:20 GMT</lastBuildDate>
    <generator>@mr-hope/vuepress-plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <copyright>Copyright by Bornforthi</copyright>
    <category>久远讲算法</category>
    <category>AI悦创·算法</category>
    <category>Markdown 基础</category>
    <category>Python 基础</category>
    <item>
      <title>关于流沙团队</title>
      <link>https://book.bornforthi.com/AboutTeam/</link>
      <guid>https://book.bornforthi.com/AboutTeam/</guid>
      <source url="https://book.bornforthi.com/rss.xml">关于流沙团队</source>
      <pubDate>Wed, 27 Oct 2021 09:32:48 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="关于流沙团队"> 关于流沙团队</h1>
<p>你好，我是悦创。也是流沙团队的创始人之一，团队成立于 2021年11月3日。</p>
]]></content:encoded>
    </item>
    <item>
      <title>博客主页</title>
      <link>https://book.bornforthi.com/</link>
      <guid>https://book.bornforthi.com/</guid>
      <source url="https://book.bornforthi.com/rss.xml">博客主页</source>
      <pubDate>Mon, 18 Oct 2021 05:18:35 GMT</pubDate>
      <content:encoded><![CDATA[<p>如果你有其他需求或者疑问，点击：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ 在线客服</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Blog Home</title>
      <link>https://book.bornforthi.com/en/</link>
      <guid>https://book.bornforthi.com/en/</guid>
      <source url="https://book.bornforthi.com/rss.xml">Blog Home</source>
      <content:encoded><![CDATA[<p>This is a blog home page.</p>
<p>To use this layout, you should set both <code>blog: true</code> and <code>home: true</code> in the page front matter.</p>
<p>For related configuration docs, please see <a href="https://vuepress-theme-hope.github.io/guide/blog/home/" target="_blank" rel="noopener noreferrer">blog homepage</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>网站信息</title>
      <link>https://book.bornforthi.com/WebSiteData/</link>
      <guid>https://book.bornforthi.com/WebSiteData/</guid>
      <source url="https://book.bornforthi.com/rss.xml">网站信息</source>
      <content:encoded><![CDATA[<h1 id="网站信息"> 网站信息</h1>
<table>
<thead>
<tr>
<th>序号</th>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>zh</td>
<td>中文版本</td>
</tr>
<tr>
<td>02</td>
<td>zh/Column/</td>
<td>专栏</td>
</tr>
<tr>
<td>03</td>
<td>zh/Column/MarkdownBase</td>
<td>Markdown基础</td>
</tr>
<tr>
<td>04</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>序号</th>
<th>url</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>https://bornforthi-5tn34wj41-bornforthi.vercel.app/ui</td>
<td>评论管理</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>Project home</title>
      <link>https://book.bornforthi.com/en/home/</link>
      <guid>https://book.bornforthi.com/en/home/</guid>
      <source url="https://book.bornforthi.com/rss.xml">Project home</source>
      <pubDate>Sat, 23 Oct 2021 02:01:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>This is an example of a normal homepage. You can place your main content here.</p>
<p>To use this layout, you need to set <code>home: true</code> in the page front matter.</p>
<p>For related descriptions of configuration items, please see <a href="https://vuepress-theme-hope.github.io/guide/layout/home/" target="_blank" rel="noopener noreferrer">Project HomePage Layout Config</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>AI悦创·算法</title>
      <link>https://book.bornforthi.com/zh/column/aiycsf/</link>
      <guid>https://book.bornforthi.com/zh/column/aiycsf/</guid>
      <source url="https://book.bornforthi.com/rss.xml">AI悦创·算法</source>
      <pubDate>Wed, 27 Oct 2021 01:27:50 GMT</pubDate>
      <content:encoded><![CDATA[<p><img src="/ColumnImages/aiycsf/xuesuanfala.png" alt="" /></p>
]]></content:encoded>
      <enclosure url="https://book.bornforthi.com/ColumnImages/aiycsf/xuesuanfala.png" type="image/png"/>
    </item>
    <item>
      <title>01-【久远讲算法】什么是时间复杂度？</title>
      <link>https://book.bornforthi.com/zh/column/jysf/0neWhatistimecomplexity/</link>
      <guid>https://book.bornforthi.com/zh/column/jysf/0neWhatistimecomplexity/</guid>
      <source url="https://book.bornforthi.com/rss.xml">01-【久远讲算法】什么是时间复杂度？</source>
      <category>久远讲算法</category>
      <pubDate>Mon, 27 Sep 2021 23:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>大家好 ，我是久远，今天开始，由我来给大家分享算法以及数据结构的相关知识。</p>
<h2 id="什么是算法"> 什么是算法</h2>
<p>今天我们先来讨论一个问题：什么是算法？</p>
<p>算法是指计算方法么？并不准确。</p>
<p>算法这个名称虽然听着硬核，但是我们换个场景你就会非常熟悉。</p>
<p>小学数学课上，你是不是可以用 3+3+3 或者 3*3 来解决三个三相加这个问题，虽然算的结果都是9，但是中间我们用的方法是不一样的。</p>
<p>假如你今天要做一道菜，你是不是需要菜谱，菜谱上肯定会告诉你，你做这个菜需要什么材料，分几步完成，完成这道菜需要多久。</p>
<p>而我们今天要讲的算法，就是计算机编程界的菜谱，它就是计算机解决问题的方法。用不同的办法去解决同一个问题，结果虽然都一样，但是过程可能千差万别。</p>
<p>正因为计算机解决问题的方法有很多个，我们便要拿标准去衡量，到底哪些算法更好，更适合我们去使用。</p>
<h2 id="时空复杂度"> 时空复杂度</h2>
<p>怎么衡量一个算法的好坏呢？</p>
<p>举个现实的例子：</p>
<p>小明和小亮去企业面试，hr 要求他们用代码实现一个需求，一天之后，两个人交付了各自的代码，都能实现 hr 的需求。而只有小明被录用了。这是因为：</p>
<p>小明的代码运行一次花了 50ms ,内存占用 5MB 。</p>
<p>而小亮的代码运行一次要花 10s ，占用内存 50MB 。</p>
<p>小亮的代码虽然能够实现功能，但是运行时间和内存占用都没有小明的少，自然没有被录用。</p>
<p>所以我们衡量代码的好坏要从时间和空间两个角度去考虑。即：</p>
<ul>
<li>时间复杂度</li>
<li>空间复杂度</li>
</ul>
<p>在本文中，我们先讲解时间复杂度。</p>
<h2 id="时间复杂度"> 时间复杂度</h2>
<p>我们可以将时间复杂度划分为两个小概念：</p>
<ul>
<li>基本操作次数</li>
<li>渐进时间复杂度</li>
</ul>
<h3 id="基本操作次数"> 基本操作次数</h3>
<p>我们假设计算机运行一行基础代码执行一次运算。</p>
<div><pre><code><span>void</span> <span>T0101</span><span>(</span><span>)</span><span>{</span>
<span>System</span><span>.</span>out<span>.</span><span>print</span><span>(</span><span>"hello world!"</span><span>)</span><span>;</span> <span>//执行一次</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code> <span>print</span><span>(</span><span>"helo world"</span><span>)</span><span>#执行一次</span>
</code></pre>
<div><span>1</span><br></div></div><p>这个方法需要执行1次运算。</p>
<div><pre><code><span>void</span> <span>T0102</span><span>(</span><span>int</span> n<span>)</span><span>{</span>
<span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span><span>{</span><span>// 再计算 for 循环外层执行次数 n+1 次</span>
<span>System</span><span>.</span>out<span>.</span><span>print</span><span>(</span><span>"hello world!"</span><span>)</span><span>// 先计算 for 循环里层执行的次数 n 次</span>
<span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>for</span> i <span>in</span> <span>range</span><span>(</span>n<span>)</span><span>:</span> <span># 再计算 for 循环外层执行次数 n+1 次</span>
    <span>print</span><span>(</span><span>"hello world!"</span><span>)</span><span># 先计算 for 循环里层执行的次数为 n 次</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>解析 python 代码：
上面这个方法需要执行（n+1+n）= 2n+1 次运算。
在 for 循环中，我们首先初始化变量 i ，它并没有实际的意义，仅用作记录我们到底循环了几次，由<code>for i in range(n)</code>这行代码可知，我们的 i 从 0 开始计数，直到 n，总共n+1次，即 i 计数这件事执行了 n+1 次，因此 for 循环的外层执行次数为 n+1 次。
for 循环的内容为打印 <code>hello world！</code>这句话。为什么 for 循环里层执行的次数为 n 而不是 n+1 ？ 是因为 i 从 0 开始计数，当我们不断循环到i的计数为 n-1 时 执行 <code>print(&quot;hello world!&quot;)</code> 然后 i 的计数累加为 n ,此时已经到了循环边界，我们便跳出循环，不再执行<code>print（“hello world!”)</code>，因此循环体内的内容只执行 n 次。</p>
<p>我们把算法需要执行的运算次数用 输入大小n 的函数表示，即 T(n).</p>
<p>为了估算算法需要的运行时间和简化算法分析，我们引入时间复杂度的概念。</p>
<p>我们再来看几个例子：</p>
<p>1.<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>3</span><span>n</span></span></span></span>,执行次数是线性的。</p>
<div><pre><code><span>void</span> <span>T0103</span><span>(</span><span>int</span> n<span>)</span><span>{</span>
<span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span><span>{</span> <span>// 外层循环 n 次 </span>
<span>System</span><span>.</span>out<span>.</span><span>print</span><span>(</span><span>"一"</span><span>)</span><span>;</span> <span>// 执行一次</span>
<span>System</span><span>.</span>out<span>.</span><span>print</span><span>(</span><span>"二"</span><span>)</span><span>;</span> <span>// 执行一次</span>
<span>System</span><span>.</span>out<span>.</span><span>print</span><span>(</span><span>"三"</span><span>)</span><span>;</span> <span>// 执行一次</span>
<span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><pre><code><span>for</span> i <span>in</span> <span>range</span><span>(</span>n<span>)</span><span>:</span><span># 外层循环 n 次 </span>
    <span>print</span><span>(</span><span>"-"</span><span>)</span><span># 执行一次</span>
    <span>print</span><span>(</span><span>"二"</span><span>)</span><span># 执行一次</span>
    <span>print</span><span>(</span><span>"三"</span><span>)</span><span># 执行一次</span>
    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>2.<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>5</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span></span></span></span> ,执行次数是用对数计算的。</p>
<div><pre><code><span>void</span> <span>T0104</span><span>(</span><span>int</span> n<span>)</span><span>{</span>
    <span>for</span><span>(</span><span>int</span> i <span>=</span> n<span>;</span> i<span>></span><span>1</span><span>;</span> i<span>/=</span><span>2</span><span>)</span><span>{</span><span>// 观察 n 与 i 的运算关系 成对数关系</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"一"</span><span>)</span><span>;</span><span>// 执行一次</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"二"</span><span>)</span><span>;</span><span>// 执行一次</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"三"</span><span>)</span><span>;</span><span>// 执行一次</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"四"</span><span>)</span><span>;</span><span>// 执行一次</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"五"</span><span>)</span><span>;</span><span>// 执行一次</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><pre><code>i <span>=</span> n <span># 在这里 n 代表的是某个特定的数字，如果要进行代码复制，请将 n 改为指定的数字去运行</span>
<span>while</span> i <span>></span> <span>1</span> <span>:</span>
    <span>print</span><span>(</span><span>"一"</span><span>)</span><span># 执行一次</span>
    <span>print</span><span>(</span><span>"二"</span><span>)</span><span># 执行一次</span>
    <span>print</span><span>(</span><span>"三"</span><span>)</span><span># 执行一次</span>
    <span>print</span><span>(</span><span>"四"</span><span>)</span><span># 执行一次</span>
    <span>print</span><span>(</span><span>"五"</span><span>)</span><span># 执行一次</span>
    i <span>=</span> i<span>//</span><span>2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>3.<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span> , 执行次数是常量。</p>
<div><pre><code><span>void</span> <span>T0105</span><span>(</span><span>int</span> n<span>)</span><span>{</span>    
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"一"</span><span>)</span><span>;</span><span>// 没有循环次数    </span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"二"</span><span>)</span><span>;</span><span>// 只需要输出两次内容执行次数为 2</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span>print</span><span>(</span><span>"一"</span><span>)</span><span># 无循环次数</span>
<span>print</span><span>(</span><span>"二"</span><span>)</span><span># 只需要输出两次内容执行的次数为 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>4.<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span> ,执行次数为幂函数。</p>
<div><pre><code><span>void</span> <span>T0106</span><span>(</span><span>int</span> n<span>)</span> <span>{</span>    
    <span>for</span><span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span> <span>{</span> <span>// 循环次数为 n</span>
        <span>for</span><span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> n<span>;</span> j<span>++</span><span>)</span> <span>{</span><span>// 循环次数为 n</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"Hello, World!"</span><span>)</span><span>;</span> <span>// 循环体时间复杂度为 O(1)         </span>
        <span>}</span>    <span>}</span><span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>for</span> i <span>in</span> <span>range</span><span>(</span>n<span>)</span><span>:</span><span># 循环次数 n    </span>
    <span>for</span> j <span>in</span> <span>range</span><span>(</span>n<span>)</span><span>:</span><span># 循环次数 n         </span>
        <span>print</span><span>(</span><span>"hello world"</span><span>)</span><span># 循环体时间复杂度为 O(1)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="渐进时间复杂度"> 渐进时间复杂度</h3>
<p>现在我们已经有了 T(n) ,是否就可以分析和比较代码的运行时间了呢？不不不，n 你还没确定呢。</p>
<p>假设A的执行次数是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>100</span><span>n</span></span></span></span>，算法 B 执行的次数是  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span>5</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span>  ,这辆谁大就要取决于 n 了。</p>
<p>因此为了解决这类难题，我们有了渐进时间复杂度的概念。</p>
<p>维基百科的定义如下：</p>
<p>在计算机科学中，算法的时间复杂度是一个函数，它定性描述该算法的运行时间。时间复杂度常用大 O 符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。</p>
<p>直白的讲就是，渐进复杂度就是将我们计算的程序的执行次数函数 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span></span></span></span>  简化为数量级，例如  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>、<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span> 、<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span></span></span></span></span></span></span></span>  等。</p>
<p>那我们要如何推算出时间复杂度呢？有以下几个原则：</p>
<ul>
<li>如果运行时间是常数级的（例如：1,2,3,4,6等），则直接用常数 1 代替表示。</li>
<li>只保留时间函数中的最高阶项。</li>
<li>如果最高阶项存在，则省去最高阶项前面的系数。</li>
</ul>
<p>例如，如果一个算法对于任何大小为  n （必须比 n0 大）的输入，它至多需要  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.897438em;vertical-align:-0.08333em;"></span><span>5</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>3</span><span>n</span></span></span></span>  的时间运行完毕，那么它的渐近时间复杂度是  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.064108em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span></span></span></span></span><span>)</span></span></span></span> 。</p>
<p>这个推算过程即为：</p>
<p>1.保留函数中的最高阶项。即:  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.897438em;vertical-align:-0.08333em;"></span><span>5</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>3</span><span>n</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>−</span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span>5</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span></span></span></span></span></span></span></span></p>
<p>2.最高阶项存在，则省去最高阶项前面的系数。即:  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span>5</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span></span></span></span></span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>−</span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span> <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span></span></span></span></span></span></span></span></p>
<p>我们再来复习一下我们刚才看的那几个计算时间函数的例子。</p>
<p>1.<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>3</span><span>n</span></span></span></span></p>
<p>最高阶项为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.64444em;vertical-align:0em;"></span><span>3</span><span>n</span></span></span></span>  ,省去 3 ，则转化为的时间复杂度为：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span></span></p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/20211028101622.png" alt="" /></p>
<p>2.<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>5</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span></span></span></span>  , 最高阶项为  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>5</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span></span></span></span> ，省去系数 5，则转化的时间复杂度为：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>)</span></span></span></span></span></p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/20211028101635.png" alt="" /></p>
<p>3.<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span> ，只有常数量级，则拿 1 替换常数，转换后的时间复杂度为：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>1</span><span>)</span></span></span></span></span></p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/20211028101657.png" alt="" /></p>
<p>4.<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></p>
<p>这四种时间复杂度究竟谁更快，谁更更慢呢？当 n 足够大时，我们可以得到这样的结论：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span></span></p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/20211028101715.png" alt="" /></p>
<h2 id="时间复杂度的差异"> 时间复杂度的差异</h2>
<p>介绍了这么多，肯定有读者心中会产生疑问，你这说了半天...函数式子，能不能让我们直接体会一下时间复杂度的差异？</p>
<p>假设算法A的执行次数是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>100</span><span>n</span></span></span></span>  ,</p>
<p>时间复杂度为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span></p>
<p>算法 B 的执行次数是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span>5</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span>  ,</p>
<p>时间复杂度为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></p>
<p>如果  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span> ，使用算法 A 和算法 B 的次数均为 1</p>
<p>但是当 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span> 逐渐增大时，时间复杂度的差异性就体现出来了。</p>
<p>当 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>n</span><span style="margin-right:0.2777777777777778em;"></span><span>&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>20</span></span></span></span> 时， <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>100</span><span>n</span></span></span></span> 的增长速度比 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span>5</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span> 快</p>
<p>当 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>n</span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>20</span></span></span></span> 时， <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.064108em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span>5</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span> 的增长速度比 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>100</span></span></span></span>  快</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/20211028101728.png" alt="" /></p>
<p>可见当我们要处理的对象足够大的时候，选时间复杂度较低的算法可使我们事半功倍，提高我们的程序运行效率。</p>
<h2 id="总结"> 总结</h2>
<p>本次我们详细的介绍了时间复杂度的概念。下次我们将引入空间复杂度的概念。</p>
<p>公众号：AI悦创，首发！</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://gitee.com/huangjiabaoaiyc/image/raw/master/20211028101622.png" type="image/png"/>
    </item>
    <item>
      <title>01-Week1：Python 基础数据类型和链表</title>
      <link>https://book.bornforthi.com/zh/column/aiycsf/Week1/</link>
      <guid>https://book.bornforthi.com/zh/column/aiycsf/Week1/</guid>
      <source url="https://book.bornforthi.com/rss.xml">01-Week1：Python 基础数据类型和链表</source>
      <category>AI悦创·算法</category>
      <pubDate>Sun, 31 Oct 2021 17:10:33 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<p>我们先来看看今天要学习的内容：</p>
<ul>
<li>列表、集合、元组、字典</li>
<li>链表</li>
</ul>
<h2 id="_1-你真的了解这四个数据类型吗"> 1. 你真的了解这四个数据类型吗？</h2>
<ul>
<li>列表/list</li>
<li>元组/tuple</li>
<li>字典/dict</li>
<li>集合/set</li>
</ul>
<h3 id="_1-1-列表-vs-元组"> 1.1 列表 VS. 元组</h3>
<ol>
<li>可变与不可变</li>
<li>选择存储策略
<ol>
<li>存储经纬度用：元组</li>
<li>存储用户访问：列表</li>
</ol>
</li>
</ol>
<h3 id="_1-2-字典-vs-集合"> 1.2 字典 VS. 集合</h3>
<ul>
<li>字典：键对值</li>
<li>集合：值</li>
</ul>
<h2 id="_2-任务「统计一片文章词频」"> 2. 任务「统计一片文章词频」</h2>
<p>目标文本：<a href="https://www.yuque.com/attachments/yuque/0/2021/txt/1359959/1620740300099-66131a04-22db-4d7a-b5c5-94e8de6544df.txt?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2021%2Ftxt%2F1359959%2F1620740300099-66131a04-22db-4d7a-b5c5-94e8de6544df.txt%22%2C%22name%22%3A%22I_Have_a_Dream.txt%22%2C%22size%22%3A9186%2C%22type%22%3A%22%22%2C%22ext%22%3A%22txt%22%2C%22status%22%3A%22done%22%2C%22source%22%3A%22transfer%22%2C%22id%22%3A%22jSRfM%22%2C%22card%22%3A%22file%22%7D" target="_blank" rel="noopener noreferrer">I_Have_a_Dream.txt</a>/<a href="https://www.aiyc.top/1774.html" target="_blank" rel="noopener noreferrer">https://www.aiyc.top/1774.html</a></p>
<p>解决代码如下，不过代码主要为了解决问题，优化后的代码，也会提供。<strong>本任务主要是为了让你熟悉各个数据类型的用法。</strong></p>
<div><pre><code><span># -*- coding: utf-8 -*-</span>
<span># @Time    : 2021/5/11 9:42 下午</span>
<span># @Author  : AI悦创</span>
<span># @FileName: words_count_main.py</span>
<span># @Software: PyCharm</span>
<span># @Blog    ：http://www.aiyc.top</span>
<span># @公众号   ：AI悦创</span>
words <span>=</span> <span>[</span><span>]</span>


<span>def</span> <span>find_word_count</span><span>(</span>words<span>)</span><span>:</span>
	word_count <span>=</span> <span>{</span><span>}</span>
	<span># 1.0</span>
	<span># for word in set(words):</span>
	<span># 	word_count[word] =  0</span>
	<span># for word in  words:</span>
	<span># 	word_count[word] += 1</span>
	<span>for</span> word <span>in</span> words<span>:</span>
		<span>if</span> word <span>in</span> word_count<span>:</span>
			word_count<span>[</span>word<span>]</span> <span>+=</span> <span>1</span>
		<span>else</span><span>:</span>
			word_count<span>[</span>word<span>]</span> <span>=</span> <span>1</span>
	<span>return</span> word_count


<span>with</span> <span>open</span><span>(</span><span>'I_Have_a_Dream.txt'</span><span>,</span> mode<span>=</span><span>'r'</span><span>,</span> encoding<span>=</span><span>'utf-8'</span><span>)</span> <span>as</span> f<span>:</span>
	<span>"""
	f.read() -> type: &lt;class 'str'>
	f.readline() -> type: &lt;class 'str'> -> Read a line
	f.readlines() -> type: &lt;class 'list'> -> Read all
	"""</span>
	lines <span>=</span> f<span>.</span>readlines<span>(</span><span>)</span>
	<span>for</span> line <span>in</span> lines<span>:</span>
		line <span>=</span> line<span>.</span>replace<span>(</span><span>','</span><span>,</span> <span>''</span><span>)</span>
		line <span>=</span> line<span>.</span>replace<span>(</span><span>':'</span><span>,</span> <span>''</span><span>)</span>
		line <span>=</span> line<span>.</span>replace<span>(</span><span>'?'</span><span>,</span> <span>''</span><span>)</span>
		line <span>=</span> line<span>.</span>replace<span>(</span><span>'!'</span><span>,</span> <span>''</span><span>)</span>
		line <span>=</span> line<span>.</span>replace<span>(</span><span>'"'</span><span>,</span> <span>''</span><span>)</span>
		line <span>=</span> line<span>.</span>replace<span>(</span><span>'\n'</span><span>,</span> <span>''</span><span>)</span>
		line <span>=</span> line<span>.</span>replace<span>(</span><span>'”'</span><span>,</span> <span>''</span><span>)</span>
		line <span>=</span> line<span>.</span>replace<span>(</span><span>'.'</span><span>,</span> <span>''</span><span>)</span>
		line <span>=</span> line<span>.</span>replace<span>(</span><span>';'</span><span>,</span> <span>''</span><span>)</span>
		line <span>=</span> line<span>.</span>replace<span>(</span><span>'“'</span><span>,</span> <span>''</span><span>)</span>
		<span>for</span> word <span>in</span> line<span>.</span>split<span>(</span><span>' '</span><span>)</span><span>:</span>
			<span>if</span> word<span>:</span> words<span>.</span>append<span>(</span>word<span>)</span>

<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>
	<span>print</span><span>(</span><span>len</span><span>(</span>words<span>)</span><span>)</span>
	<span>print</span><span>(</span><span>len</span><span>(</span><span>set</span><span>(</span>words<span>)</span><span>)</span><span>)</span>
	r <span>=</span> find_word_count<span>(</span>words<span>)</span>
	<span>print</span><span>(</span>r<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><p>**补充：**不推荐使用如下方式访问文件：</p>
<div><pre><code>f <span>=</span> <span>open</span><span>(</span><span>"text.txt"</span><span>,</span> <span>"w"</span><span>)</span>
f<span>.</span>read<span>(</span><span>)</span>
f<span>.</span>close<span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_3-链表"> 3. 链表</h2>
<p>在我们接触的 Python 中的列表，其实就是可以做成链表的形式使用的。</p>
<div><pre><code>L <span>=</span> <span>[</span><span>3</span><span>,</span> <span>5</span><span>,</span> <span>6</span><span>]</span>
L<span>.</span>append<span>(</span><span>7</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p><strong>如何自己实现一个类似的结构呢？<strong>可以</strong>查询元素、添加元素、插入元素、删除元素</strong></p>
<p>那我们先来简单的、系统的了解一下链表的定义。与数组相似，<strong>链表</strong>也是一种线性数据结构。这里有一个例子：</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291655350.png" alt="image.png" /></p>
<p>正如你所看到的，<strong>链表中的每个元素实际上是一个单独的对象，而所有对象都通过每个元素中的引用字段链接在一起。</strong></p>
<p>链表有两种类型：<strong>单链表</strong>和<strong>双链表</strong>。上面给出的例子是一个单链表，这里有一个双链表的例子：</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291655147.png" alt="image.png" /></p>
<p>不过，我这里主要讲解当链表结构。链表是一种线性数据结构，它通过引用字段将所有分离的元素链接在一起。</p>
<p><strong>其实，不就类似我们的铁链。</strong></p>
<h3 id="_3-1-定义一个最简单的链表"> 3.1 定义一个最简单的链表</h3>
<div><pre><code><span>class</span> <span>IntList</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>
		<span>"""
		first:存自己本身的数据
		rest:存下一个节点，也就下一个节点是谁
		"""</span>
		self<span>.</span>first <span>=</span> <span>None</span>
		self<span>.</span>rest <span>=</span> <span>None</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291655932.png" alt="image.png" />
<img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291655607.png" alt="image.png" /></p>
<div><pre><code>l1 <span>=</span> IntList<span>(</span><span>)</span>
l1<span>.</span>first <span>=</span> <span>5</span>

l2 <span>=</span> IntList<span>(</span><span>)</span>
l2<span>.</span>first <span>=</span> <span>10</span>

l3 <span>=</span> IntList<span>(</span><span>)</span>
l3<span>.</span>first <span>=</span> <span>15</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291657818.png" alt="image.png" /></p>
<p><strong>上面代码其实就可以理解为，创建了每一节车厢，那我们该如何吧车厢链接起来呢？</strong></p>
<div><pre><code>l1<span>.</span>rest <span>=</span> l2
l2<span>.</span>rest <span>=</span> l3
<span># 正好使用两行代码连在一起了，也就是火车的两个铁链</span>
<span># PS: 如果你这么写的话：l1.rest = l2.first > 注意：这将不是链接一个车厢，而是连接一个 Value。</span>
<span># 所以：l1.rest = l2 才是连接车厢</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291657853.png" alt="image.png" /></p>
<p>但是，要是像下面代码这样写是不行的。<strong>这就好像，我们的火车一节连着一节，连的是一整个车厢不是就一部分。其中，lx.first 是一个值。</strong></p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291658571.png" alt="image.png" /></p>
<blockquote>
<p>可以使用：<a href="http://pythontutor.com/" target="_blank" rel="noopener noreferrer">http://pythontutor.com/</a> 来讲解</p>
</blockquote>
<p><strong>那我们如何输出数据呢？</strong></p>
<div><pre><code><span>print</span><span>(</span><span>"第一节车厢：{}"</span><span>.</span><span>format</span><span>(</span>l1<span>.</span>first<span>)</span><span>)</span>
<span>print</span><span>(</span><span>"第二节车厢：{}"</span><span>.</span><span>format</span><span>(</span>l1<span>.</span>rest<span>.</span>first<span>)</span><span>)</span>
<span>print</span><span>(</span><span>"第三节车厢：{}"</span><span>.</span><span>format</span><span>(</span>l1<span>.</span>rest<span>.</span>rest<span>.</span>first<span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="_3-2-「改进」如何只用一个-l-来操作呢"> 3.2 「改进」如何只用一个 l 来操作呢？</h3>
<div><pre><code><span>class</span> <span>IntList</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>
		self<span>.</span>first <span>=</span> <span>None</span>
		self<span>.</span>rest <span>=</span> <span>None</span>

l <span>=</span> IntList<span>(</span><span>)</span>
l<span>.</span>first <span>=</span> <span>5</span>
l<span>.</span>rest <span>=</span> <span>None</span>

l<span>.</span>rest <span>=</span> IntList<span>(</span><span>)</span>
l<span>.</span>rest<span>.</span>first <span>=</span> <span>10</span>
l<span>.</span>rest<span>.</span>rest <span>=</span> <span>None</span>

l<span>.</span>rest<span>.</span>rest <span>=</span> IntList<span>(</span><span>)</span>
l<span>.</span>rest<span>.</span>rest<span>.</span>first <span>=</span> <span>15</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><div><pre><code><span>class</span> <span>IntList</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>
		self<span>.</span>first <span>=</span> <span>None</span>
		self<span>.</span>rest <span>=</span> <span>None</span>

l <span>=</span> IntList<span>(</span><span>)</span>
l<span>.</span>first <span>=</span> <span>5</span>
l<span>.</span>rest <span>=</span> IntList<span>(</span><span>)</span>
l<span>.</span>rest<span>.</span>first <span>=</span> <span>10</span>
l<span>.</span>rest<span>.</span>rest <span>=</span> IntList<span>(</span><span>)</span>
l<span>.</span>rest<span>.</span>rest<span>.</span>first <span>=</span> <span>15</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291658575.png" alt="image.png" /></p>
<h3 id="_3-3-问题"> 3.3 问题</h3>
<p>不知道，大家有没有发现，如果这么写的话。我们要写10节车厢或者以上的话不得写死了。</p>
<div><pre><code><span>class</span> <span>IntList</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span>
		self<span>.</span>first <span>=</span> <span>None</span>
		self<span>.</span>rest <span>=</span> <span>None</span>

l <span>=</span> IntList<span>(</span><span>)</span>
l<span>.</span>first <span>=</span> <span>5</span>
l<span>.</span>rest <span>=</span> <span>None</span>

l<span>.</span>rest <span>=</span> IntList<span>(</span><span>)</span>
l<span>.</span>rest<span>.</span>first <span>=</span> <span>10</span>
l<span>.</span>rest<span>.</span>rest <span>=</span> <span>None</span>

l<span>.</span>rest<span>.</span>rest <span>=</span> IntList<span>(</span><span>)</span>
l<span>.</span>rest<span>.</span>rest<span>.</span>first <span>=</span> <span>15</span>

l<span>.</span>rest<span>.</span>rest<span>.</span>rest <span>=</span> IntList<span>(</span><span>)</span>
l<span>.</span>rest<span>.</span>rest<span>.</span>rest<span>.</span>first <span>=</span> <span>20</span>

l<span>.</span>rest<span>.</span>rest<span>.</span>rest<span>.</span>rest <span>=</span> IntList<span>(</span><span>)</span>
l<span>.</span>rest<span>.</span>rest<span>.</span>rest<span>.</span>rest<span>.</span>first <span>=</span> <span>25</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291659246.png" alt="image.png" /></p>
<p>所以，我们虽然实现了链表的结构，但是不完美。我们可以再进一步的去改进一下。</p>
<p><strong>首先，我们肯定不希望之后还是要写一堆 rest 这样肯定是超级麻烦的。</strong></p>
<h3 id="_3-4-改进代码"> 3.4 改进代码</h3>
<div><pre><code><span>class</span> <span>IntList</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> first<span>,</span> rest<span>)</span><span>:</span>
		self<span>.</span>first <span>=</span> first
		self<span>.</span>rest <span>=</span> rest

l1 <span>=</span> IntList<span>(</span><span>5</span><span>,</span> <span>None</span><span>)</span>
l2 <span>=</span> IntList<span>(</span><span>10</span><span>,</span> l1<span>)</span>
l3 <span>=</span> IntList<span>(</span><span>15</span><span>,</span> l2<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291659707.png" alt="image.png" /></p>
<p>当然，我们也可以就用一个 l：</p>
<div><pre><code><span>class</span> <span>IntList</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> first<span>,</span> rest<span>)</span><span>:</span>
		self<span>.</span>first <span>=</span> first
		self<span>.</span>rest <span>=</span> rest

l <span>=</span> IntList<span>(</span><span>5</span><span>,</span> <span>None</span><span>)</span>
l <span>=</span> IntList<span>(</span><span>10</span><span>,</span> l<span>)</span>
l <span>=</span> IntList<span>(</span><span>15</span><span>,</span> l<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291659920.png" alt="image.png" /></p>
<p>这样写，肯定比之前的书写要简洁。但是又出现问题了，就是我们每一个衔接的数据是显示出来了，但这个问题我们后面解决。接下来，我们先来添加个 size 函数。</p>
<h3 id="_3-5-添加一个-size-方法-方便用户查询链表的大小"> 3.5 添加一个 size() 方法，方便用户查询链表的大小</h3>
<p>这个地方，需要递归作为前置知识：</p>
<div><pre><code><span>def</span> <span>size</span><span>(</span>self<span>)</span><span>:</span>
	<span>if</span> self<span>.</span>rest <span>is</span> <span>None</span><span>:</span>
		<span>return</span> <span>1</span>
	<span>else</span><span>:</span>
		<span>return</span> <span>1</span> <span>+</span> self<span>.</span>rest<span>.</span>size<span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id="_1-第一次-self-rest"> 1. 第一次： self.rest()</h4>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291659448.png" alt="image.png" /></p>
<h4 id="_2-第二次-self-rest-size-self-rest-rest-is-none"> 2. 第二次：self.rest.size() —&gt; self.rest.rest is None</h4>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291708020.png" alt="image.png" /></p>
<h4 id="_3-self-rest-rest-size-self-rest-rest-rest-is-none"> 3. self.rest.rest.size() —&gt; self.rest.rest.rest is None</h4>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291708521.png" alt="image.png" /></p>
<p>接下来，上 GIF：</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291708202.gif" alt="动画.gif" /></p>
<h3 id="_3-6-不使用递归如何实现"> 3.6 不使用递归如何实现？</h3>
<div><pre><code><span>def</span> <span>get_length</span><span>(</span>self<span>,</span> linked<span>)</span><span>:</span>
	<span>"""方法二"""</span>
	length <span>=</span> <span>0</span>
	<span>while</span> linked<span>:</span>
		length <span>+=</span> <span>1</span>
		linked <span>=</span> linked<span>.</span>rest
	<span>return</span> length
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>不过上面写的虽然实现了，但是总体来说有点奇怪，在调用的时候：</p>
<div><pre><code><span>print</span><span>(</span>l<span>.</span>get_length<span>(</span>l<span>)</span><span>)</span> <span># 这样调用有点奇怪</span>
</code></pre>
<div><span>1</span><br></div></div><p>所以，进行改进：</p>
<div><pre><code><span>def</span> <span>iterative_size</span><span>(</span>self<span>)</span><span>:</span>
		<span># l == self 抽象理解</span>
		p <span>=</span> self
		total_size <span>=</span> <span>0</span>
		<span>while</span> p <span>is</span> <span>not</span> <span>None</span><span>:</span>
			total_size <span>+=</span> <span>1</span>
			p <span>=</span> p<span>.</span>rest
		<span>return</span> total_size
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这样调用就很自然了：</p>
<div><pre><code><span>print</span><span>(</span>l<span>.</span>iterative_size<span>(</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="_3-7-改进"> 3.7 改进</h3>
<p>添加一个 **get() **方法，方便用户查询某个元素：</p>
<div><pre><code><span>def</span> <span>get</span><span>(</span>self<span>,</span> index<span>)</span><span>:</span>
	<span>if</span> i <span>==</span> <span>0</span><span>:</span>
		<span>return</span> self<span>.</span>first
	<span>else</span><span>:</span>
		<span>return</span> self<span>.</span>rest<span>.</span>get<span>(</span>index<span>-</span><span>1</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>def</span> <span>get_index</span><span>(</span>self<span>,</span> index<span>)</span><span>:</span>
	    <span>'''第二种查询方法'''</span>
	    <span>if</span> index <span>&lt;</span> <span>0</span>：
	        <span>return</span> <span>-</span><span>1</span>
	    node <span>=</span> self<span>.</span>first
	    <span>for</span> _ <span>in</span> <span>range</span><span>(</span>index<span>+</span><span>1</span><span>)</span><span>:</span>
	        node <span>=</span> node<span>.</span>rest
	   <span>return</span> node<span>.</span>first
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="_3-8-question"> 3.8 Question</h3>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291708792.jpeg" alt="" /></p>
<p><strong>现在的链表更像是一个“没穿衣服的”数据结构。</strong></p>
<p>内部数据也是直接爆露出来的，有些地方也是看起来很奇怪。</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291709206.png" alt="image.png" /></p>
<p>None 和 l 应该是内部的数据，不应该让外部的人看见的。</p>
<div><pre><code><span>class</span> <span>IntNode</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> item<span>,</span> <span>next</span><span>)</span><span>:</span>
		self<span>.</span>item <span>=</span> item
		self<span>.</span><span>next</span> <span>=</span> <span>next</span>

<span>class</span> <span>SLList</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>)</span><span>:</span>
		self<span>.</span>first <span>=</span> IntNode<span>(</span>x<span>,</span> <span>None</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>我们可以对比一下：</p>
<div><pre><code>l <span>=</span> SLList<span>(</span><span>10</span><span>)</span>
<span># l = IntList(5, None) 比之前的好</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>但是目前不能添加多个车厢（链表），添加多个链表的数据都会被覆盖：</p>
<div><pre><code>l <span>=</span> SLList<span>(</span><span>5</span><span>)</span>
l <span>=</span> SLList<span>(</span><span>10</span><span>)</span>
l <span>=</span> SLList<span>(</span><span>15</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291709795.gif" alt="动画.gif" /></p>
<p>所以，我们需要添加一个函数来添加数据。</p>
<div><pre><code><span>def</span> <span>add_first</span><span>(</span>self<span>,</span> x<span>)</span><span>:</span>
	self<span>.</span>first <span>=</span> IntNode<span>(</span>x<span>,</span> self<span>.</span>first<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>这样，我们添加数据就是：</p>
<div><pre><code>l <span>=</span> SLList<span>(</span><span>5</span><span>)</span>
l<span>.</span>add_first<span>(</span><span>10</span><span>)</span>
l<span>.</span>add_first<span>(</span><span>15</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291709860.png" alt="image.png" /></p>
<p>SLList 新增加一个方法叫 <code>get_first()</code> ，用来让用户获取当前链表第一个元素：</p>
<div><pre><code><span>def</span> <span>get_first</span><span>(</span>self<span>)</span><span>:</span>
	<span>return</span> self<span>.</span>first<span>.</span>item
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_3-9-比较一下"> 3.9 比较一下</h3>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291709717.png" alt="image.png" /></p>
<div><pre><code><span># filename: compare.py</span>
<span>class</span> <span>IntList</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> f<span>,</span> r<span>)</span><span>:</span>
		<span>"""
		first:存自己本身的数据
		rest:存下一个节点，也就下一个节点是谁
		"""</span>
		self<span>.</span>first <span>=</span> f
		self<span>.</span>rest <span>=</span> r

	<span>def</span> <span>size</span><span>(</span>self<span>)</span><span>:</span>
		<span>"""方法一"""</span>
		<span># l == self 抽象理解</span>
		<span>if</span> self<span>.</span>rest <span>is</span> <span>None</span><span>:</span>
			<span>return</span> <span>1</span>
		<span>else</span><span>:</span>
			<span>return</span> <span>1</span> <span>+</span> self<span>.</span>rest<span>.</span>size<span>(</span><span>)</span>

	<span>def</span> <span>get_length</span><span>(</span>self<span>,</span> linked<span>)</span><span>:</span>
		<span>"""方法二"""</span>
		length <span>=</span> <span>0</span>
		<span>while</span> linked<span>:</span>
			length <span>+=</span> <span>1</span>
			linked <span>=</span> linked<span>.</span>rest
		<span>return</span> length

	<span>def</span> <span>iterative_size</span><span>(</span>self<span>)</span><span>:</span>
		<span># l == self 抽象理解</span>
		p <span>=</span> self
		total_size <span>=</span> <span>0</span>
		<span>while</span> p <span>is</span> <span>not</span> <span>None</span><span>:</span>
			total_size <span>+=</span> <span>1</span>
			p <span>=</span> p<span>.</span>rest
		<span>return</span> total_size

	<span>def</span> <span>get</span><span>(</span>self<span>,</span> index<span>)</span><span>:</span>
		<span>if</span> i <span>==</span> <span>0</span><span>:</span>
			<span>return</span> self<span>.</span>first
		<span>else</span><span>:</span>
			<span>return</span> self<span>.</span>rest<span>.</span>get<span>(</span>index<span>-</span><span>1</span><span>)</span>


l1 <span>=</span> IntList<span>(</span><span>5</span><span>,</span> <span>None</span><span>)</span>
l2 <span>=</span> IntList<span>(</span><span>10</span><span>,</span> l1<span>)</span>
l3 <span>=</span> IntList<span>(</span><span>15</span><span>,</span> l2<span>)</span>
<span>print</span><span>(</span>l1<span>.</span>first<span>)</span>
<span>print</span><span>(</span>l2<span>.</span>first<span>)</span>
<span>print</span><span>(</span>l3<span>.</span>first<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291709200.png" alt="image.png" />
<img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291710484.png" alt="image.png" /></p>
<h3 id="_4-0-然而还是有点问题"> 4.0 然而还是有点问题</h3>
<p>如果，我破解出了 SLList 里面的变量的名称，一样可以修改，比如：</p>
<div><pre><code>l<span>.</span>first<span>.</span><span>next</span><span>.</span><span>next</span> <span>=</span> <span>8</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="_4-1-改进"> 4.1 改进</h3>
<p>将 first 变量改为私有变量。</p>
<div><pre><code><span>class</span> <span>IntNode</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> item<span>,</span> <span>next</span><span>)</span><span>:</span>
		self<span>.</span>item <span>=</span> item
		self<span>.</span><span>next</span> <span>=</span> <span>next</span>

<span>class</span> <span>SLList</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>)</span><span>:</span>
		self<span>.</span>__first <span>=</span> IntNode<span>(</span>x<span>,</span> <span>None</span><span>)</span>

	<span>def</span> <span>add_first</span><span>(</span>self<span>,</span> x<span>)</span><span>:</span>
		self<span>.</span>__first <span>=</span> IntNode<span>(</span>x<span>,</span> self<span>.</span>__first<span>)</span>
        
l <span>=</span> SLList<span>(</span><span>5</span><span>)</span>
l<span>.</span>add_first<span>(</span><span>10</span><span>)</span>
l<span>.</span>add_first<span>(</span><span>15</span><span>)</span>
<span># print(l.get_first())</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>class 里的私有变量只能再 class 的内部访问：</p>
<div><pre><code><span>print</span><span>(</span>l<span>.</span>__first<span>)</span>
AttributeError<span>:</span> <span>'SLList'</span> <span>object</span> has no attribute <span>'__first'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="_4-2-为什么要设计私有变量"> 4.2 为什么要设计私有变量？</h3>
<p><strong>将类的内部细节隐藏起来</strong></p>
<ul>
<li>用户不需要了解太多类的细节</li>
<li>设计者可以拥有更为安全的对于程序的控制全</li>
</ul>
<p><strong>以汽车来类比</strong></p>
<ul>
<li>公共的方法或变量：油门、方向盘</li>
<li>私有的方法或变量：燃油管道、旋转阀</li>
</ul>
<h3 id="_4-3-改进"> 4.3 改进</h3>
<p>SLList 新增加一个方法叫 <code>add_last()</code> ，用来让用户向链表末尾添加一个元素。</p>
<div><pre><code><span>def</span> <span>add_last</span><span>(</span>self<span>,</span> x<span>)</span><span>:</span>
	p <span>=</span> self<span>.</span>__first
	<span>while</span> p<span>.</span><span>next</span> <span>is</span> <span>not</span> <span>None</span><span>:</span>
		p <span>=</span> p<span>.</span><span>next</span>
	p<span>.</span><span>next</span> <span>=</span> IntNode<span>(</span>x<span>,</span> <span>None</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>l<span>.</span>add_last<span>(</span><span>20</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291710279.png" alt="image.png" /></p>
<h3 id="_4-4-改进"> 4.4 改进</h3>
<p>SLList 新增加一个方法叫 <code>size()</code> ：</p>
<div><pre><code><span>def</span> <span>__size</span><span>(</span>self<span>,</span> p<span>)</span><span>:</span>
	<span>if</span> p<span>.</span><span>next</span> <span>is</span> <span>None</span><span>:</span>
		<span>return</span> <span>1</span>
	<span>else</span><span>:</span>
		<span>return</span> <span>1</span> <span>+</span> self<span>.</span>__size<span>(</span>p<span>.</span><span>next</span><span>)</span>
    
<span>def</span> <span>size</span><span>(</span>self<span>)</span><span>:</span>
	<span>return</span> self<span>.</span>__size<span>(</span>self<span>.</span>__first<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>每次查询 <code>size()</code> 都要把整个链表遍历一遍，是不是低效了？</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291710626.png" alt="image.png" /></p>
<div><pre><code><span># -*- coding: utf-8 -*-</span>
<span># @Author: AI悦创</span>
<span># @Date:   2021-10-15 14:50:07</span>
<span># @Last Modified by:   aiyc</span>
<span># @Last Modified time: 2021-10-18 15:49:59</span>
<span>class</span> <span>IntNode</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> item<span>,</span> <span>next</span><span>)</span><span>:</span>
		self<span>.</span>item <span>=</span> item
		self<span>.</span><span>next</span> <span>=</span> <span>next</span>

<span>class</span> <span>SLList</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>)</span><span>:</span>
		self<span>.</span>__first <span>=</span> IntNode<span>(</span>x<span>,</span> <span>None</span><span>)</span>
		self<span>.</span>__size <span>=</span> <span>1</span>

	<span>def</span> <span>add_first</span><span>(</span>self<span>,</span> x<span>)</span><span>:</span>
		self<span>.</span>__first <span>=</span> IntNode<span>(</span>x<span>,</span> self<span>.</span>__first<span>)</span>
		self<span>.</span>__size <span>+=</span> <span>1</span>

	<span>def</span> <span>get_first</span><span>(</span>self<span>)</span><span>:</span>
		<span>return</span> self<span>.</span>first<span>.</span>item

	<span>def</span> <span>add_last</span><span>(</span>self<span>,</span> x<span>)</span><span>:</span>
		p <span>=</span> self<span>.</span>__first
		<span>while</span> p<span>.</span><span>next</span> <span>is</span> <span>not</span> <span>None</span><span>:</span>
			p <span>=</span> p<span>.</span><span>next</span>
		p<span>.</span><span>next</span> <span>=</span> IntNode<span>(</span>x<span>,</span> <span>None</span><span>)</span>
		self<span>.</span>__size <span>+=</span> <span>1</span>

	<span>def</span> <span>__size</span><span>(</span>self<span>,</span> p<span>)</span><span>:</span>
		<span>if</span> p<span>.</span><span>next</span> <span>is</span> <span>None</span><span>:</span>
			<span>return</span> <span>1</span>
		<span>else</span><span>:</span>
			<span>return</span> <span>1</span> <span>+</span> self<span>.</span>__size<span>(</span>p<span>.</span><span>next</span><span>)</span>

	<span># def size(self):</span>
	<span># 	return self.__size(self.__first)</span>

	<span>def</span> <span>size</span><span>(</span>self<span>)</span><span>:</span>
		<span>return</span> self<span>.</span>__size

l <span>=</span> SLList<span>(</span><span>5</span><span>)</span>
l<span>.</span>add_first<span>(</span><span>10</span><span>)</span>
l<span>.</span>add_first<span>(</span><span>15</span><span>)</span>
l<span>.</span>add_last<span>(</span><span>20</span><span>)</span>
<span># print(l.__first)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><h3 id="_4-5-改进"> 4.5 改进</h3>
<p>如果，我希望创建一个空链表呢？</p>
<div><pre><code><span># -*- coding: utf-8 -*-</span>
<span># @Author: AI悦创</span>
<span># @Date:   2021-10-18 15:53:48</span>
<span># @Last Modified by:   aiyc</span>
<span># @Last Modified time: 2021-10-18 15:58:12</span>
<span>class</span> <span>IntNode</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> item<span>,</span> <span>next</span><span>)</span><span>:</span>
		self<span>.</span>item <span>=</span> item
		self<span>.</span><span>next</span> <span>=</span> <span>next</span>

<span>class</span> <span>SLList</span><span>(</span><span>object</span><span>)</span><span>:</span>
	<span>def</span> <span>__init__</span><span>(</span>self<span>,</span> x<span>=</span><span>None</span><span>)</span><span>:</span>
		self<span>.</span>__first <span>=</span> IntNode<span>(</span>x<span>,</span> <span>None</span><span>)</span>
		self<span>.</span>__size <span>=</span> <span>1</span>

	<span>def</span> <span>add_first</span><span>(</span>self<span>,</span> x<span>)</span><span>:</span>
		<span>if</span> self<span>.</span>__first<span>.</span>item <span>is</span> <span>None</span><span>:</span>
			self<span>.</span>__first<span>.</span>item <span>=</span> x
		<span>else</span><span>:</span>
			self<span>.</span>__first <span>=</span> IntNode<span>(</span>x<span>,</span> self<span>.</span>__first<span>)</span>
			self<span>.</span>__size <span>+=</span> <span>1</span>

	<span>def</span> <span>get_first</span><span>(</span>self<span>)</span><span>:</span>
		<span>return</span> self<span>.</span>first<span>.</span>item

	<span>def</span> <span>add_last</span><span>(</span>self<span>,</span> x<span>)</span><span>:</span>
		p <span>=</span> self<span>.</span>__first
		<span>while</span> p<span>.</span><span>next</span> <span>is</span> <span>not</span> <span>None</span><span>:</span>
			p <span>=</span> p<span>.</span><span>next</span>
		p<span>.</span><span>next</span> <span>=</span> IntNode<span>(</span>x<span>,</span> <span>None</span><span>)</span>
		self<span>.</span>__size <span>+=</span> <span>1</span>

	<span>def</span> <span>__size</span><span>(</span>self<span>,</span> p<span>)</span><span>:</span>
		<span>if</span> p<span>.</span><span>next</span> <span>is</span> <span>None</span><span>:</span>
			<span>return</span> <span>1</span>
		<span>else</span><span>:</span>
			<span>return</span> <span>1</span> <span>+</span> self<span>.</span>__size<span>(</span>p<span>.</span><span>next</span><span>)</span>

	<span># def size(self):</span>
	<span># 	return self.__size(self.__first)</span>

	<span>def</span> <span>size</span><span>(</span>self<span>)</span><span>:</span>
		<span>return</span> self<span>.</span>__size

l <span>=</span> SLList<span>(</span><span>)</span>
l<span>.</span>add_first<span>(</span><span>5</span><span>)</span>
l<span>.</span>add_first<span>(</span><span>10</span><span>)</span>
l<span>.</span>add_first<span>(</span><span>15</span><span>)</span>
l<span>.</span>add_last<span>(</span><span>20</span><span>)</span>
<span># print(l.__first)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291655350.png" type="image/png"/>
    </item>
    <item>
      <title>久远讲算法</title>
      <link>https://book.bornforthi.com/zh/column/jysf/</link>
      <guid>https://book.bornforthi.com/zh/column/jysf/</guid>
      <source url="https://book.bornforthi.com/rss.xml">久远讲算法</source>
      <pubDate>Tue, 26 Oct 2021 02:24:23 GMT</pubDate>
      <content:encoded><![CDATA[<p>久远讲算法专栏，利用 Python 来系统的讲解数据结构与算法，主要分为基础篇和提高篇，基础篇包含了数据结构和算法的基本内容，适用对象为：0 基础学习编程的读者，对 Python 有一定的了解想要提高自身编程水平的读者。提高篇主要以力扣题目为核心，对算法进行详细讲解。</p>
]]></content:encoded>
    </item>
    <item>
      <title>03- 【久远讲算法】数组——最简单的数据结构</title>
      <link>https://book.bornforthi.com/zh/column/jysf/Arraythesimplestdatastructure/</link>
      <guid>https://book.bornforthi.com/zh/column/jysf/Arraythesimplestdatastructure/</guid>
      <source url="https://book.bornforthi.com/rss.xml">03- 【久远讲算法】数组——最简单的数据结构</source>
      <category>久远讲算法</category>
      <pubDate>Sun, 12 Sep 2021 09:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>前言：</p>
<p>前面两篇文章，我们对算法以及时空复杂度进行了详细的讲解，但是，这其实是远远不够的，时空复杂度只是我们算法学习中的冰山一角，下面让我们通过数组的学习来正式打开算法与数据结构的大门吧！</p>
<p>以下是我之后文章的具体走向，感兴趣的小伙伴可以跟着路线进行自学哦！基础篇暂定走向为：数组→链表→栈和队列→树→递归</p>
<p>基础篇更完以后我将会开启力扣刷题套路篇哦，带大家一起提高对编程语言以及算法的熟练度。</p>
<h2 id="什么是数组"> 什么是数组</h2>
<p>关于数组，虽然它是数据结构世界里最常用以及最简单的，但是之前仍有同学向我反馈：数组难以理解！那我们就来对数组进行详细的讲解，帮助大家解惑。</p>
<p>首先我们在此声明，python 本身的库中其实是没有数组这个内置类型的，但存在有列表 ( list ) 这个内置类型，列表和数组在长相以及实际应用上是相似的，因此我尝试拿列表来进行数组相关知识的讲解。（实际上在 python 的 numpy 库中是存在有数组这样一个数据结构的，之后我们会专门写一篇文章来分析数组和列表的异同。）</p>
<p>在计算机科学中，数组数据结构，简称数组，英文名为 array ，是由相同类型的元素的集合所组成的数据结构，分配一块连续的内存来存储。利用元素的索引可以计算出该元素对应的存储地址。</p>
<p>是不是看完这一长串理论，已经开始晕了？那我们现在提炼这段话并就来用现实生活的例子来解析这段话，带大家认识到底什么是数组。</p>
<p>假设我们是指挥官，我们编程时使用数组，就相当于我们作为指挥官给指定人数的士兵布置了一个团队任务。而这个指定人数的队伍，就可以视为一个数组。</p>
<ul>
<li>数组由相同类型的元素的集合所组成。这就像是现实中的一列士兵，他们的职业都是军人，即所谓的类型相同，他们都是同一个连或者同一个团的，即同一个集合。</li>
<li>数组分配一块连续的内存来存储。即同一列士兵，在做任务时，一般都会吃住在同一片区域。</li>
<li>利用元素的索引可以计算出该元素对应的存储地址。士兵每天训练时要进行有序的排队，当喊道第几号士兵时，可以通过这位士兵的回答，得知他的各种信息，例如执行任务期间，住在哪片区域具体哪个位置。我们从平常计数报数都是从 1 开始，而计算机默认是从 0 开始，这点要记清楚，以防之后进行和数组相关的操作产生混乱。</li>
</ul>
<p>因此我们可知，数组就如同一列整齐的士兵，他们都是正规的军人，他们在队伍里有指定的位置，且通过叫号，可以知晓他们的讯息。正如军队里的士兵存在编号一样，数组中的每一个元素也有着自己的下标，只不过这个下标从 0 开始，一直到数组长度 -1。</p>
<p>数组一般用来存储具有 &quot;一对一&quot; 逻辑关系数据的线性存储结构，即是在内存中顺序存储，因此可以很好地实现逻辑上的顺序表。</p>
<p>数组在内存中的顺序存储，具体是什么样子呢？</p>
<p>内存是由一个个连续的内存单元组成的，每一个内存单元都有自己的地址。在这些内存单元中，有些被其他数据占用了，有些是空闲的。数组中的每一个元素，都存储在小小的内存单元中，并且元素之间紧密排列，既不能打乱元素的存储顺序，也不能跳过某个存储单元进行存储。</p>
<p>这就像是宿舍分配的床位，每个宿舍有几个指定的床位，床位号一般都是连续的，每个床位号对应一个学生，这些学生可能有人每天都在宿舍住，有的可能搬出去住。床位号都是按顺序来的，进行安排时也不会考虑跳过哪个号进行床位分配。</p>
<p>理论性的介绍先告一段落，单单了解数组的理论知识还远远不够，接下来我们将系统性的介绍数组在编程中的使用。</p>
<h2 id="数组的使用"> 数组的使用</h2>
<p>任何数据结构的操作基本离不开，增删改查这四种情况。接下来就让我给大家介绍数组的增删改查怎么实现。</p>
<h3 id="数组元素的查询"> 数组元素的查询</h3>
<div><pre><code><span>// 初始化</span>
<span>String</span><span>[</span><span>]</span> array <span>=</span> <span>new</span> <span>String</span><span>[</span><span>]</span><span>{</span><span>'red'</span><span>,</span> <span>'green'</span><span>,</span> <span>'blue'</span><span>,</span> <span>'yellow'</span><span>,</span> <span>'white'</span><span>,</span> <span>'black'</span><span>}</span><span>;</span>
<span>// 通过下标进行索引</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>array<span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>array<span>[</span><span>1</span><span>]</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>array<span>[</span><span>2</span><span>]</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code>list_array<span>=</span><span>[</span><span>'red'</span><span>,</span> <span>'green'</span><span>,</span> <span>'blue'</span><span>,</span> <span>'yellow'</span><span>,</span> <span>'white'</span><span>,</span> <span>'black'</span><span>]</span>
<span>print</span><span>(</span> list_array<span>[</span><span>0</span><span>]</span> <span>)</span><span>#red</span>
<span>print</span><span>(</span> list_array<span>[</span><span>1</span><span>]</span> <span>)</span><span>#green</span>
<span>print</span><span>(</span> list_array<span>[</span><span>2</span><span>]</span> <span>)</span><span>#blue</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>对 python 代码进行讲解：</p>
<p>我们新建了一个长度为 6 的数组，并查询数组 list_array 下标为 0，1，2的元素，并将他们打印出来。</p>
<p>对于数组来说，读取元素是最简单的操作。由于数组在内存中顺序存储，所以只要给出一个数组下标，就可以读取到对应的数组元素。</p>
<p>例如我们当前新建的list_array数组，我们要读取数组下标为 3 的元素，就写作 array_list[3]；读取的元素即为  yellow ，读取数组下标为 5 的元素，就写作 array_list[5]，读取的数组为 black ，需要注意的是，输入的下标必须在数组的长度范围之内，否则会出现数组越界。</p>
<ul>
<li>
<p>tips:</p>
<p>在 python 中，使用 list 进行数组的新建，然后索引时，它其实是不会报错的，这也是数组和列表的一大区别，其实本质还是因为列表类似于动态数组，我们在别的编程语言中使用的数组，明确而言是有指定的长度的， 超越指定的长度时，它会进行越界报错，而动态数组的长度是没有准确规定，只要不超出内存，即可在数组末尾一直添加元素，这点是不是和python中的列表很像呢？</p>
</li>
</ul>
<h3 id="数组元素的更改"> 数组元素的更改</h3>
<div><pre><code><span>String</span><span>[</span><span>]</span> array <span>=</span> <span>new</span> <span>String</span><span>[</span><span>]</span><span>{</span><span>'red'</span><span>,</span> <span>'green'</span><span>,</span> <span>'blue'</span><span>,</span> <span>'yellow'</span><span>,</span> <span>'white'</span><span>,</span> <span>'black'</span><span>}</span><span>;</span>
array<span>[</span><span>0</span><span>]</span> <span>=</span> <span>'orange'</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>list_array<span>=</span><span>[</span><span>'red'</span><span>,</span> <span>'green'</span><span>,</span> <span>'blue'</span><span>,</span> <span>'yellow'</span><span>,</span> <span>'white'</span><span>,</span> <span>'black'</span><span>]</span>
list_array<span>[</span><span>0</span><span>]</span> <span>=</span> <span>'orange'</span> 
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>对 python 代码进行讲解：</p>
<p>依旧是我们的 list_array  ,现在我想把第一位的红色变成橘色，那么我们直接使用下标索引，找到 'red' ,然后将其赋值为 'orange' 即可。</p>
<p>要把数组中某一个元素的值改为一个新值，也是非常简单的操作。我们直接利用下标索引到它，然后将其赋值为新的值就可以了。</p>
<h3 id="时间复杂度分析"> 时间复杂度分析</h3>
<p>我们根据索引就可以查询到元素的位置，若想要更改直接覆盖掉它的值即可。因此数组元素的修改和查找的时间复杂度均为   <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>1</span><span>)</span></span></span></span>。</p>
<ul>
<li>
<p>tips:</p>
<p>关于时间复杂度的讲解，参考我之前的文章：</p>
</li>
</ul>
<h3 id="数组元素的插入"> 数组元素的插入</h3>
<p>数组元素的插入分为以下几种：</p>
<ul>
<li>尾部插入</li>
<li>中间插入</li>
<li>超范围插入</li>
</ul>
<p>在这里python只需要几行代码即可实现这一切，因为涉及到底层逻辑以及链表的知识，我们在此章不进行详细的讲解，只讲应用。而python的底层实际上是 c语言写的，所以接下来我们会对数组元素的插入进行系统的介绍，其实这是 python 底层已经帮我们做了的事情，但是要学习数据结构，我们就要从底层开始了解一个方法是怎么被实现的，所以我依旧对数组的插入进行了较本质的讲解。</p>
<ul>
<li>尾部插入</li>
</ul>
<p>在 java 和 c 语言中，尾部插入是最简单的方法,我们只需要对数组进行一次循环找到要插入的位置，然后进行赋值即可。</p>
<ul>
<li>中间插入</li>
</ul>
<p>而进行中间的插入时，我们就要考虑这些：</p>
<ol>
<li>确认数组本身是否还有空余的位置。如果没有空余的位置，那么我们就要进行超范围插入了。如果有空余的位置，我们进行下面的操作。</li>
<li>挪位置。先为了给这个元素让出一个位置，这个元素指定的位置之后的元素都要向后移动一个位置，不然的话，是没有位置留给插入的那个元素的。</li>
<li>将元素放进腾出的那个位置。原来的元素进行挪位操作后，该元素进行赋值归位，这样元素就插入成功了。</li>
<li>数组长度+1，正因为成功插入了一个元素，所以数组的长度进行了变化。</li>
</ol>
<ul>
<li>超范围插入</li>
</ul>
<p>什么是超范围插入？ 比如我定义了一个数组，长度为 6 ，而从 0 到 5 这6个位置，都有元素，数组已经满了，但是我们依旧想要向其中插入插入元素，这个时候我们就需要扩大数组的长度了，可是数组的长度在创建时就已经确定了，不是说变就可以轻易的改变的，所以我们通常的操作便是，创建一个新数组，长度是旧数组的 2 倍，再把旧数组中的元素统统复制过去，这样就实现了数组的扩容。</p>
<p>以下是 java 代码实现的，新建一个数组，对其进行插入操作。虽然和我上面说的步骤几乎是一样的，但是代码量可以说是很多了。</p>
<div><pre><code><span>private</span> <span>int</span><span>[</span><span>]</span> array<span>;</span>
<span>private</span> <span>int</span> size<span>;</span>

<span>public</span> <span>MyArray</span><span>(</span><span>int</span> capacity<span>)</span><span>{</span>
    <span>this</span><span>.</span>array <span>=</span> <span>new</span> <span>int</span><span>[</span>capacity<span>]</span><span>;</span>
    size <span>=</span> <span>0</span><span>;</span>
<span>}</span>

<span>/**
 * 数组插入元素
 * * index 插入的位置
 * element 插入的元素
 */</span>
<span>public</span> <span>void</span> <span>insert</span><span>(</span><span>int</span> index<span>,</span> <span>int</span> element<span>)</span>  <span>{</span>
    <span>//判断访问下标是否超出范围</span>
    <span>if</span><span>(</span>index<span>&lt;</span><span>0</span> <span>||</span> index<span>></span>size<span>)</span><span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"超出数组实际元素范围！"</span><span>)</span><span>;</span>
    <span>}</span>
    <span>//如果实际元素达到数组容量上限，则对数组进行扩容</span>
    <span>if</span><span>(</span>size <span>>=</span> array<span>.</span>length<span>)</span><span>{</span>
        <span>resize</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
    <span>//从右向左循环，将元素逐个向右挪1位</span>
    <span>for</span><span>(</span><span>int</span> i<span>=</span>size<span>-</span><span>1</span><span>;</span> i<span>>=</span>index<span>;</span> i<span>--</span><span>)</span><span>{</span>
        array<span>[</span>i<span>+</span><span>1</span><span>]</span> <span>=</span> array<span>[</span>i<span>]</span><span>;</span>
    <span>}</span>
    <span>//腾出的位置放入新元素</span>
    array<span>[</span>index<span>]</span> <span>=</span> element<span>;</span>
    size<span>++</span><span>;</span>
<span>}</span>
<span>/**
* 数组扩容
*/</span>
<span>public</span> <span>void</span> <span>resize</span><span>(</span><span>)</span><span>{</span>
    <span>int</span><span>[</span><span>]</span> arrayNew <span>=</span> <span>new</span> <span>int</span><span>[</span>array<span>.</span>length<span>*</span><span>2</span><span>]</span><span>;</span>
    <span>//从旧数组复制到新数组</span>
    <span>System</span><span>.</span><span>arraycopy</span><span>(</span>array<span>,</span> <span>0</span><span>,</span> arrayNew<span>,</span> <span>0</span><span>,</span> array<span>.</span>length<span>)</span><span>;</span>
    array <span>=</span> arrayNew<span>;</span>
<span>}</span>

<span>/**
* 输出数组
*/</span>
<span>public</span> <span>void</span> <span>output</span><span>(</span><span>)</span><span>{</span>
    <span>for</span><span>(</span><span>int</span> i<span>=</span><span>0</span><span>;</span> i<span>&lt;</span>size<span>;</span> i<span>++</span><span>)</span><span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>array<span>[</span>i<span>]</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
    <span>MyArray</span> myArray <span>=</span> <span>new</span> <span>MyArray</span><span>(</span><span>10</span><span>)</span><span>;</span>
    myArray<span>.</span><span>insert</span><span>(</span><span>0</span><span>,</span><span>7</span><span>)</span><span>;</span>
    myArray<span>.</span><span>insert</span><span>(</span><span>1</span><span>,</span><span>5</span><span>)</span><span>;</span>
    myArray<span>.</span><span>insert</span><span>(</span><span>2</span><span>,</span><span>9</span><span>)</span><span>;</span>
    myArray<span>.</span><span>insert</span><span>(</span><span>3</span><span>,</span><span>8</span><span>)</span><span>;</span>
    myArray<span>.</span><span>insert</span><span>(</span><span>1</span><span>,</span><span>4</span><span>)</span><span>;</span>
    myArray<span>.</span><span>output</span><span>(</span><span>)</span><span>;</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br></div></div><p>而在 python 中，我们在现实的使用过程中，无需担心自己是否也要像使用 java 那样，只为处理一个插入操作，就写了如此多的代码，我们只要调用列表自带的方法就可以了。</p>
<ul>
<li>列表中的 append 方法</li>
</ul>
<p>列表中的 append 方法，对应数组中的尾部插入，它的底层实现形式类似于上文提到的java中的实现形式。</p>
<div><pre><code>list_array <span>=</span> <span>[</span><span>'red'</span><span>,</span> <span>'green'</span><span>,</span> <span>'blue'</span><span>]</span>
list_array<span>.</span>append<span>(</span><span>'black'</span><span>)</span>
<span>print</span> <span>(</span><span>"更新后的列表 : "</span><span>,</span> list_array<span>)</span> 
<span>#更新后的列表为['red', 'green', 'blue','black']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>对 python 代码进行讲解：</p>
<p>我们新生成的列表对其直接使用append方法，在其中输入我们要添加的元素即可，然后我们的元素就被添加到了列表的末尾了。</p>
<ul>
<li>列表中的 insert 方法</li>
</ul>
<p>列表中的 insert 方法，对应数组中的中间插入，只需要一步调用方法，即可完成 java 中那么多的判断以及元素的插入，可见 python 的强大。又因为列表本身可以视为动态数组，其实对于长度的要求并没有数组那么苛刻，它是可以随意插入元素的，无需担心长度，容量问题。</p>
<div><pre><code>list_array <span>=</span> <span>[</span><span>'red'</span><span>,</span> <span>'green'</span><span>,</span> <span>'blue'</span><span>]</span>
list_array<span>.</span>insert<span>(</span><span>0</span><span>,</span> <span>'black'</span><span>)</span>
<span>print</span> <span>(</span><span>'列表插入元素后为 : '</span><span>,</span> list_array<span>)</span>
<span>#更新后的列表为 ['black', 'red', 'green', 'blue']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>对 python 代码进行讲解：</p>
<p>对新生成的列表使用 insert 方法，insert 方法有两个参数，第一个参数为，我们要将元素插入到列表的哪个位置，第二个参数为元素内容。该段代码即为使用 insert 方法将 'black' 插入到列表的头部。</p>
<ul>
<li>列表中的 extend 方法</li>
</ul>
<p>列表中的 extend 方法，用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。可以视为是数组扩容的一种特殊情况。</p>
<div><pre><code>list_array <span>=</span> <span>[</span><span>'red'</span><span>,</span> <span>'green'</span><span>,</span> <span>'blue'</span><span>]</span>
list2<span>=</span><span>list</span><span>(</span><span>range</span><span>(</span><span>5</span><span>)</span><span>)</span> <span># 创建 0-4 的列表</span>
list1<span>.</span>extend<span>(</span>list2<span>)</span>  <span># 扩展列表</span>
<span>print</span> <span>(</span><span>"扩展后的列表："</span><span>,</span> list1<span>)</span>
<span>#扩展后的列表： ['red', 'green', 'blue', 0, 1, 2, 3, 4]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="数组元素的删除"> 数组元素的删除</h3>
<p>数组的删除操作和插入操作的过程相反，如果是在数组的最后删除元素，那么直接去除元素即可，但是如果是在头部或者数组的中间删除元素，那么其后的元素都需要向前挪动 1 位。</p>
<p>删除简单的地方在于，我们无需关心下标是否会越界，容量是肯定不会超过申请的大小的。</p>
<div><pre><code><span>public</span> <span>int</span> <span>delete</span><span>(</span><span>int</span> index<span>)</span>  <span>{</span>
    <span>//判断访问下标是否超出范围</span>
    <span>if</span><span>(</span>index<span>&lt;</span><span>0</span> <span>||</span> index<span>>=</span>size<span>)</span><span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"超出数组实际元素范围！"</span><span>)</span><span>;</span>
    <span>}</span>
    <span>int</span> deleted<span>=</span> array<span>[</span>index<span>]</span><span>;</span>
    <span>//从左向右循环，将元素逐个向左挪1位</span>
    <span>for</span><span>(</span><span>int</span> i<span>=</span>index<span>;</span> i<span>&lt;</span>size<span>-</span><span>1</span><span>;</span> i<span>++</span><span>)</span><span>{</span>
        array<span>[</span>i<span>]</span> <span>=</span> array<span>[</span>i<span>+</span><span>1</span><span>]</span><span>;</span>
    <span>}</span>
    size<span>--</span><span>;</span>
    <span>return</span> deleted<span>;</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>python 列表中有两种方法和数组的删除操作匹配，即 pop 和 remove 方法。</p>
<ul>
<li>列表中的pop方法</li>
</ul>
<p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</p>
<div><pre><code>list1 <span>=</span> <span>[</span><span>'red'</span><span>,</span> <span>'green'</span><span>,</span> <span>'blue'</span><span>]</span>
list1<span>.</span>pop<span>(</span><span>)</span>
<span>print</span> <span>(</span><span>"列表现在为 : "</span><span>,</span> list1<span>)</span>
<span>#列表现在为 :  ['red', 'green']</span>
list1<span>.</span>pop<span>(</span><span>1</span><span>)</span>
<span>print</span> <span>(</span><span>"列表现在为 : "</span><span>,</span> list1<span>)</span>
<span>#列表现在为 :  ['red']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>对 python 代码进行讲解：</p>
<p>新建一个 list1 列表，我们对其使用 pop() ，那么 list1 列表中最后一个元素被移除，这个元素即为 'blue' ，然后继续对 list1 使用 pop 操作，此时 list1 中最后一个元素为 'green'，将其移除， list1 中最后只有 'red' 一个元素了。</p>
<ul>
<li>列表中的 remove 方法</li>
</ul>
<p>remove() 函数用于移除列表中某个值的第一个匹配项。即当列表中有一样的元素的时候，使用 remove 删除这个元素， remove 将会删除下标较小的。</p>
<div><pre><code>list1 <span>=</span> <span>[</span><span>'red'</span><span>,</span> <span>'green'</span><span>,</span> <span>'blue'</span><span>]</span>
list1<span>.</span>remove<span>(</span><span>'red'</span><span>)</span>
<span>print</span> <span>(</span><span>"列表现在为 : "</span><span>,</span> list1<span>)</span>
<span># 列表现在为 :  ['green','blue']</span>
list1<span>.</span>remove<span>(</span><span>'green'</span><span>)</span>
<span>print</span> <span>(</span><span>"列表现在为 : "</span><span>,</span> list1<span>)</span>
<span># 列表现在为 :  ['blue']</span>

<span># 有重复元素的情况</span>
list2 <span>=</span> <span>[</span><span>'red'</span><span>,</span><span>'red'</span><span>,</span><span>'green'</span><span>,</span><span>'blue'</span><span>,</span><span>'blue'</span><span>]</span>
list2<span>.</span>remove<span>(</span><span>'red'</span><span>)</span>
<span>print</span><span>(</span><span>"列表现在为："</span><span>,</span>list2<span>)</span>
<span># 列表现在为： ['red', 'green', 'blue', 'blue']</span>
list2<span>.</span>remove<span>(</span><span>'green'</span><span>)</span>
<span>print</span><span>(</span><span>"列表现在为："</span><span>,</span>list2<span>)</span>
<span># 列表现在为： ['red', 'blue', 'blue']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>对 python 代码进行讲解：</p>
<p>新建一个 list2 列表，我们对其使用 remove('red') ，那么 list2 列表中第一个 'red' 将会被移除，然后继续对 list2 使用 remove 操作，这次我们移除列表中第一个 'blue' ，打印列表可以发现，我们原列表中的 0 号位的 'red' 和 3 号位的 'blue' 都被删掉了，而剩下的 'red' 和 'blue' 没有被移除。</p>
<h3 id="时间复杂度分析-2"> 时间复杂度分析</h3>
<p>数组的插入，我们首先要考虑数组的长度和容量，如果容量空余，我们在插入前还要为元素腾出位置，因此我们在此的时间复杂度 为  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span> , 如果元素的容量已满，我们要扩容数组，那么这个操作的时间复杂度仍为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span> ，综合考虑，数组的插入操作时间复杂度为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span> .</p>
<p>数组的删除，无需考虑数组的长度和容量问题，只需要在删除元素之后，改变其它元素的位置即可，因此数组的删除操作消耗的时间在此的时间复杂度为  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span> .</p>
<h2 id="数组的优势和劣势"> 数组的优势和劣势</h2>
<p>数组的优势体现在查询和修改元素上，我们只需要知道元素的数组下标即可对其进行查询和修改，非常的方便。而这种特性也被二分查找法充分的利用了。</p>
<p>数组的劣势体现在它的插入操作和删除操作上，当插入一个元素或者删除一个元素时，其他的元素都需要改变，这极大地影响了程序的运行效率。</p>
<p>总之数组适用于，查找，修改较多，插入，删除较少的场景下。我们下周要讲的链表则和它的情况相反。</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291545158.png" alt="" /></p>
]]></content:encoded>
      <enclosure url="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291545158.png" type="image/png"/>
    </item>
    <item>
      <title>04-【久远讲算法】链表——实现无序列表</title>
      <link>https://book.bornforthi.com/zh/column/jysf/Linkedlisttoimplementanunorderedlist/</link>
      <guid>https://book.bornforthi.com/zh/column/jysf/Linkedlisttoimplementanunorderedlist/</guid>
      <source url="https://book.bornforthi.com/rss.xml">04-【久远讲算法】链表——实现无序列表</source>
      <category>久远讲算法</category>
      <pubDate>Tue, 28 Sep 2021 10:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是久远，上周开始我们算是正式入门了数据结构，进行了数组的讲解。</p>
<p>我们现在来总结回顾一下数组的知识。</p>
<ul>
<li>数组是什么？</li>
</ul>
<p>是由相同类型的元素的集合所组成的数据结构，分配一块连续的内存来存储。利用元素的索引（index）可以计算出该元素对应的存储地址。</p>
<ul>
<li>数组的储存类型</li>
</ul>
<p>顺序存储：数组在内存中的顺序存储，具体是什么样子呢？</p>
<p>内存是由一个个连续的内存单元组成的，每一个内存单元都有自己的地址。在这些内存单元中，有些被他数据占用了，有些是空闲的。</p>
<p>数组中的每一个元素，都存储在小小的内存单元中，并且元素之间紧密排列，既不能打乱元素的存储顺序，也不能跳过某个存储单元进行存储。</p>
<p>既然有顺序存储，那么一定就有无序存储咯？我们今天要介绍的链表便是无序存储的类型。</p>
<h2 id="链表的使用"> 链表的使用</h2>
<ul>
<li>我们为什么要学链表，它的存在又有什么作用呢？</li>
</ul>
<p>上周我们讲解到数组，数组的特点便是顺序存储，适用于查找和修改操作，如果要进行删除和插入元素的操作的时候，数组元素腾位置这件事就要花费不少时间，因此遇到一些经常要删除数据，插入数据的事情的时候，我们尽量不优先考虑用数组去解决这类问题，因为这样反复的使用数组，只会增加我们代码的运行时间，对我们其实是没什么好处的。</p>
<p>这种时候我们就可以使用链表了，链表主要是便于管理长度或数量不确定的数据，经常插入或者删除数据，链表轻而易举就能做到这些，花费的时间相对于数组少很多。</p>
<ul>
<li>列表和链表名字很像，它们之间有什么关系么？</li>
</ul>
<p>列表是我们接触 python 以后，最经常用到的数据类型，列表非常的强大，它为我们提供了很多操作。但是其实不是所有的编程语言都有列表的，而没有列表的编程语言，就要通过别的方式去实现列表的功能。链表便可以帮助我们完成列表的实现。</p>
<p>而列表又分为有序列表和无序列表，我们平常是非常常见列表的，数组就可以用来实现有序列表，而链表则用来实现无序列表。</p>
<ul>
<li>无序列表是什么？</li>
</ul>
<p>先从列表的定义来分析，列表是元素的集合，其中每一个元素都有一个相对于其他元素的位置。更具体地说，这种列表称为无序列表。可以认为列表有第一个元素、第二个元素、第三个元素，等等；也可以称第一个元素为列表的起点，称最后一个元素为列表的终点。为简单起见，我们假设列表中没有重复元素。</p>
<h2 id="什么是链表"> 什么是链表</h2>
<p>在计算机科学中，链表是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针。效果如图：</p>
<p>看似随意的一组数字，通过指针可以将它们进行连接。</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291551374.png" alt="" /></p>
<p>需要注意的是，必须指明链表中第一个元素的位置。一旦知道第一个元素的位置，就能根据
其中的链接信息访问第二个元素，接着访问第三个元素，依此类推。指向链表第一个元素的引用被称作头。最后一个元素需要知道自己没有下一个元素。</p>
<h2 id="使用链表实现无序列表"> 使用链表实现无序列表</h2>
<h3 id="node-类"> Node 类</h3>
<p>上文我们提到了一个例子，一个链表如果存在，那么我们需要知道它第一个元素的位置，让计算机清楚它应该从哪里开始寻找元素，还要告诉最后一个元素它没有下一个元素，让计算机懂得停止寻找元素。因此在实现链表时，我们需要知道一个元素的位置，以及元素自身，以及这个元素指向的下一个元素是什么，只有这样我们才能顺藤摸瓜找到接下来的元素嘛，我们将这一系列所需的东西合在一起，称作节点。</p>
<p>节点是构建链表的基本数据结构。每一个节点都必须包含有两种内容。首先，节点必须包含要生成的链表的元素，我们称之为节点的数据变量。其次，节点必须保存指向下一个节点的引用。
在构建节点时，需要为其提供初始值。执行下面的赋值语句会生成一个包含数据值20 的节点对象。</p>
<div><pre><code>temp <span>=</span> Node<span>(</span><span>20</span><span>)</span> 
temp<span>.</span>getData<span>(</span><span>)</span>
<span>#20</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>Node 类也包含访问和修改数据的方法，以及指向下一个元素的引用。</p>
<div><pre><code>
<span>class</span> <span>Node</span><span>:</span>
    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span>initdata<span>)</span><span>:</span>
        self<span>.</span>data <span>=</span> initdata
        self<span>.</span><span>next</span> <span>=</span> <span>None</span>
    
    <span>def</span> <span>getData</span><span>(</span>self<span>)</span><span>:</span>
        <span>return</span> self<span>.</span>data
    
    <span>def</span> <span>getNext</span><span>(</span>self<span>)</span><span>:</span>
        <span>return</span> self<span>.</span><span>next</span>
    
    <span>def</span> <span>setData</span><span>(</span>self<span>,</span>newdata<span>)</span><span>:</span>
        self<span>.</span>data <span>=</span> newdata
        
    <span>def</span> <span>setNext</span><span>(</span>self<span>,</span>newnext<span>)</span><span>:</span>
        self<span>.</span><span>next</span> <span>=</span> newnext
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>对 Python 代码进行分析：</p>
<p>我们定义一个 Node 类，那就需要有初始化方法 _<em>init</em>_ ，其中定义了一个 data 元素，用来存放节点的数据，又定义了一个 next 元素，用来指向下一个节点。 next 的值默认初始化为 None ，指向 None 的引用代表着该元素后面没有其他元素。</p>
<p>getData 方法主要是用于获取当前节点的数据。</p>
<p>getNext 用于告诉使用者该链表当前节点指向的下一节点是什么。</p>
<p>setData 方法主要用于修改当前节点的数据，传入一个新的数据（newdata），然后将其赋值给节点的原数据，这样，当前节点的数据内容就修改成功啦。</p>
<p>setNext 方法主要用于插入新节点，当我们在当前节点的后面插入一个新的节点得时候，要告诉当前节点它的后面有了新的节点，所以才有了  self.next = newnext。</p>
<h2 id="无序列表类"> 无序列表类</h2>
<p>由上文可知，节点是无序列表的构成要素之一。每一个节点都通过显式的引用指向下一个节点。只要知道第一个节点的位置，其后的每一个元素都能通过下一个引用找到。因此，无序列表类必须包含指向第一个节点的引用。</p>
<p>无序列表类的定义方法如下：</p>
<div><pre><code><span>class</span> <span>UnorderedList</span><span>:</span> 
     <span>def</span> <span>__init__</span><span>(</span>self<span>)</span><span>:</span> 
         self<span>.</span>head <span>=</span> <span>None</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>对 python 代码进行讲解：</p>
<p>无序列表类的生成方法包括有一行代码，self.head = None 即默认该无序列表的头节点为空，不指向任何元素。</p>
<p>因此我们可以加以思考，当我们定义一个无序列表时，判断一个无序列表是否为空，我们只需要知道它的头节点是不是指向空就可以了。我们可以以此延伸出判断无序列表是否为空的方法 isEmpty().</p>
<div><pre><code><span>def</span> <span>isEmpty</span><span>(</span>self<span>)</span><span>:</span>
        <span>return</span> self<span>.</span>head <span>==</span> <span>None</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>仅仅一行代码，如果头节点不为空，那则说明头节点必定有指向别处的元素，如果头节点为空那说明这个列表只有这么长。</p>
<p>现在我们已经做好了十足的前期准备了，即知道了无序列表是怎么定义的，也可以通过 isEmpty 方法来判断它其中是否有元素了。现在要做的便是对我们新建的无序列表进行增上改查操作了。</p>
<h2 id="add-方法"> Add 方法</h2>
<p>想生成一个无序列表，我们首先要向其中添加元素，那么我们就需要实现 add 方法。但在实现之前，需要考虑一个问题：新元素要被放在哪个位置？</p>
<p>这个问题是否似曾相识？在数组章节中，我们考虑了很多情况，在末尾，在开头，在中间加入新的元素，尤其是将元素插入到数组中间，处理起来非常的费劲，插入一个元素，剩下的不少元素都要为它腾出位置。但是现在我们要实现的列表是无序的，因此新元素相对于已有元素的位置并不重要。新的元素可以在任意位置。因此，将新元素放在最简便的位置是最合理的选择。这里我们首先考虑元素在列表头部插入。</p>
<div><pre><code><span>def</span> <span>add</span><span>(</span>self<span>)</span><span>:</span>
        temp <span>=</span> Node<span>(</span>data<span>)</span>
        temp<span>.</span>getNext<span>(</span>self<span>.</span>head<span>)</span>
        self<span>.</span>head <span>=</span> temp
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>代码讲解：</p>
<p>要向列表中加入新的元素，我们首先要记起，列表的组成单位为节点，想要成功插入一个元素，首先我们要生成一个包含有此元素的节点，因此我们使用了Node(data)，生成了一个包含有要插入的元素 data 的节点，并将其赋值给temp，以此这个节点的新名字就叫 temp 了，temp 节点想要加入到列表的首部，首先我们要让 temp 节点找到头节点，这样子才有说服力，如果连自己想要加入的列表队伍的首部都不认识，就算你说你是头节点了，你的后边没有队伍，也不算是加入到列表队伍中啊，因此才有了 temp.getNext(self.head) ,你找到了你要加入的列表的首部以后，你就可以名正言顺的成为第一名了，因此通过 self.head = temp 这行代码，你被冠名了列表首部这个名字。</p>
<h2 id="length-方法"> length 方法</h2>
<p>我们向列表中添加多个节点之后，想要计算当前列表的长度，我们引入 length 方法进行处理。</p>
<p>我们的具体做法是用一个外部引用从列表的头节点开始访问。随着访问每一个节点，然后根据每个节点的指针指向去寻找下一个节点，以此类推最后计算出列表的长度。</p>
<div><pre><code><span>def</span> <span>length</span><span>(</span>self<span>)</span><span>:</span>
        current <span>=</span> self<span>.</span>head
        cnt <span>=</span> <span>0</span>
        <span>while</span> current <span>!=</span> <span>None</span><span>:</span>
            cnt <span>=</span> cnt <span>+</span> <span>1</span>
            current <span>=</span> current<span>.</span>getNext<span>(</span><span>)</span>
            
        <span>return</span> cnt
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>代码讲解：</p>
<p>我们使用了一个叫做 current 的外部引用，让它从列表的头部开始进行访问，然后又引入了一个计数器 cnt ，用来计算节点的个数，之后我们要做的便是，寻找 current 所指向的节点是否为空，如果指向的节点不为空，则说明该节点后面还有另外的节点存在，计数器加1，如此循环直到 current 指向的节点为空，这就在提醒我们，该节点后没有别的节点了，已经到了列表的尾部，因此我们将返回计数器的个数即可。</p>
<h2 id="search-方法"> Search 方法</h2>
<p>既然我们能对列表的长度进行计算，那么我们能不能查找列表中的元素呢？当然可以，实现的基本思路和 length 方法是非常相似的，我们只需要加入一个boolean类型的变量found 来表示我们是否找到了我们要查找的那个元素即可。</p>
<div><pre><code><span>def</span> <span>search</span><span>(</span>self<span>,</span>item<span>)</span><span>:</span>
        current  <span>=</span> self<span>.</span>head
        found <span>=</span> <span>False</span>
        <span>while</span> current <span>!=</span> <span>None</span> <span>and</span> <span>not</span> found<span>:</span>
            <span>if</span> current<span>.</span>getData<span>(</span><span>)</span> <span>==</span> item<span>:</span>
                found <span>=</span> <span>True</span>
            <span>else</span><span>:</span>
                current <span>=</span> current<span>.</span>getNext<span>(</span><span>)</span>
        <span>return</span> found
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>与在 length 方法中相似，遍历从列表的头部开始。我们使用布尔型变量 found 来标记是否找到所需的元素。默认一开始我们没有找到元素，found的值为 False ，当我们对列表进行遍历时，我们使用 getData 方法来进行判断节点元素的获取，如果获取到的元素和我们要查找的元素 item 相同，我们就告诉 found ，我们找到了 item 这个元素，因此有 found = True，如果通过 getData 方法获取到的元素与 item 不同，那么我们就继续寻找下一个节点，直到节点的元素与 item 相同为止，如果我们找遍了整个列表都没有找到 item 元素，那我们最终就要返回 found 的默认值了，即为 False 。</p>
<h2 id="remove-方法"> remove 方法</h2>
<p>我们通过 remove 方法来进行列表元素的删除。要删除列表中的某个元素，我们是否要考虑先找到这个元素我们才能对其进行删除操作呢，因此其实 remove 方法和 search 方法也是十分相像的，我们首先要使用 search 方法找到我们要删除的元素，然后对其进行删除即可。但是删除具体要怎么删除呢？我们回到最初的那副图片。假设我要删除 21 这个节点，以我们正常的思维去想的话，直接去掉 21 不就好了么！但是这会出现一个问题，那便是，34 本身是指向 21 的，而 21 又指向了 56 ，唐突的把 21 删掉的话，34又要指向哪里呢？56也没有被指向的对象了，整个列表就从 21 这里断开了！我们不能因为一个元素的删除，就使得整个列表因此作废，因此我们要考虑，如果删除21的同时，又使得列表继续存在。</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291553273.png" alt="" /></p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291553185.png" alt="" /></p>
<p>这时，我们就可以考虑，如果我把 21 删掉了的话，34 和 56 岂不是前后邻居了？那这样的话，我直接让 34 无视 21 ，转而指向 56 不就可以了，又因为列表的长度是通过节点指向进行计算的嘛，只要没有节点指向 21 ，就相当于 21 不存在于列表中，从而达到了 21 被删除的效果。</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291553883.png" alt="" /></p>
<p>利用代码来实现 remove 方法：</p>
<div><pre><code><span>def</span> <span>remove</span><span>(</span>self<span>,</span>item<span>)</span><span>:</span>
        cur <span>=</span> self<span>.</span>head
        pre <span>=</span> <span>None</span>
        found <span>=</span> <span>False</span>
        <span>while</span> <span>not</span> found <span>:</span>
            <span>if</span> cur<span>.</span>getData<span>(</span><span>)</span> <span>==</span> item<span>:</span>
                found <span>=</span> <span>True</span>
            <span>else</span><span>:</span>
                pre <span>=</span> cur
                cur <span>=</span> cur<span>.</span>getNext<span>(</span><span>)</span>
                
        <span>if</span> pre <span>==</span> <span>None</span><span>:</span>
            self<span>.</span>head <span>=</span> current<span>.</span>getNext<span>(</span><span>)</span>
        <span>else</span><span>:</span>
            pre<span>.</span>setNext<span>(</span>cur<span>,</span>getNext<span>(</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>代码讲解：</p>
<p>先提出一个问题 ：为什么这段代码里引入了 pre 变量，它有什么特殊的用法么？</p>
<p>当我们使用循环进行元素遍历时，查找到要删除的节点时，cur 已经指向了要被删除的节点，还记得我们刚刚说的么？要删除这个节点，我们就要将这个节点前面的节点（它的前邻居）指向它后面的节点（它的后邻居），无视该节点，达到删除该节点的效果，而我们定义的节点类里面之后 getNext() 方法，没有任何关于查找前节点的方法，因此我们只通过 cur 这一个变量，是无法完成删除操作的。为了解决这一问题，我们引入了一个新的变量  pre ，cur 与之前一样，标记在链表中的当前位置。新的引用 pre 总是指向 cur上一次访问的节点。这样一来，当
cur指向需要被移除的节点时，pre 正好指向要删除节点的“前邻居”，可以起到修改前节点指向的作用。</p>
<p>一旦搜索过程结束，就需要执行删除操作。而删除操作又包括有以下两种情况：删除头节点，删除其他节点。</p>
<p>如果被删除的元素正好是链表的头节点所包含的元素的话，那么 cur会指向头节点，而 pre 则依旧为它的默认值 None，在这种情况下，我们只需要修改 cur 即可，告诉它头节点变成了它后面那个节点，而不再是它本身就可以了，无需修改 pre 的值。</p>
<p>如果 pre 的值不是 None，则说明需要移除的节点在链表结构中的某个位置。在这种情况下，pre 指向了 next 引用需要被修改的节点。我们对 pre 进行 setNext() 方法来进行节点的指向修改操作，这将意味着，pre 的下一个节点将指向 cur的下一个节点，而不再是指向 cur 本身了，修了指向，从而起到了删除 cur 的效果。</p>
<p>如果是删除最后的节点，我们应该告诉倒数第二个节点，它的下一个节点为空，即倒数第二个节点的指向为None。</p>
<h2 id="总结"> 总结</h2>
<p>恭喜你，又完成了一个数据结构类型的学习，在本次的文章中，我主要通过实现无序列表的方式来对链表的操作进行了详细的讲解，至于为什么不单独进行链表的讲解，最主要还是因为 python 底层的代码写的非常的强大，它将数组和链表结合在一起进而实现了列表，数组和链表其实就是列表实现的本质，没有这两个数据结构类型，列表便不会存在。我们平常的 python 使用中，一般都更常用列表，因此我们以列表为由，引出了它的本质之一，链表。</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110291551374.png" type="image/png"/>
    </item>
    <item>
      <title>02-【久远讲算法】 什么是空间复杂度？</title>
      <link>https://book.bornforthi.com/zh/column/jysf/TwoWhatisspatialcomplexity/</link>
      <guid>https://book.bornforthi.com/zh/column/jysf/TwoWhatisspatialcomplexity/</guid>
      <source url="https://book.bornforthi.com/rss.xml">02-【久远讲算法】 什么是空间复杂度？</source>
      <category>久远讲算法</category>
      <pubDate>Wed, 01 Sep 2021 09:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是久远，这周我们继续聊算法，接着上次的时间复杂度，我们进行关于空间复杂度的讲解。</p>
<h2 id="知识回顾"> 知识回顾</h2>
<p>首先，我们来对上周的任务进行大概的复习。</p>
<p>算法是什么？</p>
<ul>
<li>从理论层面来讲，算法就是我们写程序写代码的优化手册，它教会我们怎么让代码运行起来更快，或者占用的内存空间更少。直观层面来讲便是，算法是一系列程序指令，用于处理特定的运算和逻辑问题。一个算法是好是坏，我们通常根据时间复杂度和空间复杂度去评价。</li>
</ul>
<p>时间复杂度是什么？</p>
<ul>
<li>时间复杂度是对一个算法运行时间长短的量度，用大 O 表示，常见的时间复杂度按照从低到高的顺序，包括<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.064108em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>1</span><span>)</span><span>、</span><span style="margin-right:0.02778em;">O</span><span>(</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>)</span><span>、</span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span><span>、</span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>)</span><span>、</span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span> 等。</li>
</ul>
<p>时间复杂度的要点包括以下内容：</p>
<ul>
<li>基本操作执行次数。即每行代码的执行次数，我们通过这个来计算我们所写的代码详细的执行次数。</li>
<li>渐进时间复杂度。计算基本操作执行次数固然是一种求解时间复杂度的方法，但是我们平时写的代码是千奇百怪的，因此通过计算基本操作执行次数得到的数字或函数大多都比较复杂，并不适合直接充当我们的时间复杂度，因此我们引入了渐进时间复杂度的概念，渐进时间复杂度常用大 O 符号表述，不包括这个函数的低阶项和首项系数。使用渐进时间复杂度可保证我们算出的时间复杂度函数相比起基本执行操作次数总和更加简洁。</li>
</ul>
<h2 id="空间复杂度和时间复杂度的关系"> 空间复杂度和时间复杂度的关系</h2>
<p>空间复杂度和时间复杂度，这两个东西长得非常的像，但到底有什么区别呢？</p>
<p>从文字的角度，我们可以联想到，时间一般是我们摸不着的，比较抽象的东西。而空间一般是现实存在的，我们能摸到的，比较具体的东西。</p>
<p>再从平常我们思考的角度讲，我们去分析一件事情，一般要从理论和实际两种层面上进行分析。比如我想去旅游，理论上我只要有钱，有时间，我就可以出去旅游。但是从现实的层面去考虑这件事就很繁琐，我们要想到：当前季节上是否适合旅游，自己是否要先向学校或者上班的地方请假报备，然后再考虑订哪天的机票，以及目的地的选取等等琐事。</p>
<p>编程也并不是一件虚拟的事情，它是切实存在且在生活中被频繁使用的，因此我们有必要从理论和实际两种方面考虑自己所写的代码的可行性。</p>
<p>时间复杂度就是我们对自己代码的“理论分析”。从我们个人编程的角度而言，我们的代码仅用于个人电脑使用，并不参与企业开发，所以我们一般不去考虑计算机的性能。单纯的考虑了，怎么写这段代码，它不会出错，可以正确执行。在进行数据结构和算法的学习之后，我们慢慢的开始考虑自己代码的时间复杂度。即如何让自己写的代码运行速度的更快一些。</p>
<p>空间复杂度便是我们对自己代码的“实际分析”。可能我们个人写代码体会不到空间复杂度的重要性。假设你在大型企业上班，你的老板要求你开发一个手机应用，这个时候，我们要考虑的就不仅仅是，我写的代码能不能正常运行起来这件事了，因为你要站在用户的角度去考虑，你的体验度是怎么样的，作为手机应用的使用者，我们自然会想到，我希望这个手机应用能够秒开，而不是点进去半天才能加载出来，同时也希望这个手机应用占手机的内存少一点。而作为老板，让员工开发应用的时候，也希望公司提供的电脑能安全完成开发，不希望出现因为代码运行时间过长而消耗电脑硬件，导致电脑坏掉拖延项目进展的事情发生。</p>
<p>空间复杂度有着类似于时间复杂度的概念：一个算法或程序的空间复杂度定性地描述该算法或程序运行所需要的存储空间大小。空间复杂度是相应计算问题的输入值的长度的函数，它表示一个算法完全执行所需要的存储空间大小。</p>
<p>和时间复杂度类似，空间复杂度通常也使用大 O 记号来渐进地表示，即空间复杂度也有渐进空间复杂度一说。例如 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span>、<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>)</span></span></span></span> 、<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.0037em;">α</span></span></span></span></span></span></span></span><span>)</span></span></span></span> 、<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>2</span><span><span><span><span style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span><span>)</span></span></span></span> 等；其中 n 用来表示输入的长度，该值可以影响算法的空间复杂度。</p>
<p>就像时间复杂度的计算不考虑算法所使用的空间大小一样，空间复杂度也不考虑算法运行需要的时间长短。</p>
<h2 id="空间复杂度"> 空间复杂度</h2>
<p>从整个程序来讨论的话，程序的空间复杂度可以完全用程序代码本身所占用的存储空间多少来表示。</p>
<p>首先，程序自身所占用的存储空间取决于其包含的代码量，我们只要在编程环境下输入代码进行运行，那么这段代码必定会占用电脑的存储空间。想要压缩这部分存储空间，就要求我们在实现功能的同时，尽可能编写足够短的代码，但从这一方面来讲，过于庞大，毕竟我们编写一段代码，其中包含着很多内容，我们将继续将代码拆分分析为以下两种情况去推算空间复杂度。</p>
<p>一般一段代码的空间复杂度涉及到的空间类型有：</p>
<p>1..输入、输出空间。程序中如果需要输入输出数据，也会占用一定的存储空间。程序运行过程中输入输出的数据，往往由要解决的问题而定，即便所用算法不同，程序输入输出所占用的存储空间也是相近的。即，无论是我们使用 10 行代码还是三行代码去实现同一个问题，他们最终输出的东西一样的话，即使二者代码长度不尽相同，但是输出所占的存储空间是差不多大的。</p>
<p>2..暂存空间。程序在运行过程中，可能还需要临时申请更多的存储空间。事实上，对算法的空间复杂度影响最大的，往往是程序运行过程中所申请的临时存储空间。不同的算法所编写出的程序，其运行时申请的临时存储空间通常会有较大不同。</p>
<p>通常情况下，空间复杂度指在输入数据大小为 N 时，算法运行所使用的「暂存空间」+「输出空间」的总体大小。</p>
<p>先来看几种常见的空间复杂度。我们根据代码来进行详细分析。</p>
<h3 id="常量空间"> 常量空间</h3>
<p>当算法的存储空间大小固定，和输入规模没有直接的关系时，空间复杂度记作  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span> .</p>
<div><pre><code><span>void</span> <span>fun1</span><span>(</span><span>int</span> n<span>)</span><span>{</span>
    <span>int</span> <span>var</span> <span>=</span> <span>3</span><span>;</span>
    <span>.</span><span>.</span><span>.</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span>def</span> <span>fun1</span><span>(</span>n<span>)</span><span>:</span>
    var <span>=</span> <span>3</span>
    <span>.</span><span>.</span><span>.</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>讲解 python 代码：</p>
<p>我们定义了 <code>fun1()</code> 函数，当我们调用这个函数的时候，我们要向其中传入一个参数 n ，但是n传入后，函数  <code>fun1()</code> 做了一件事，它里层引入了一个 var 变量 并给它赋值 3 ，但这一切并没有改变我们输入的参数 n 的值和类型。根据上文第二条 “ 程序中如果需要输入输出数据，也会占用一定的存储空间 ”，我们输入的参数 n 从头至尾没有发生改变，因此程序所占的存储空间也没有发生改变。所以该程序的空间复杂度为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>1</span><span>)</span></span></span></span> .</p>
<h3 id="线性空间"> 线性空间</h3>
<p>当算法分配的空间是一个线性的集合（如列表或数组），并且集合大小和输入规模 n 成正比时，空间复杂度记作<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span> .</p>
<div><pre><code><span>void</span> <span>fun2</span><span>(</span><span>int</span> n<span>)</span><span>{</span>
    <span>int</span><span>[</span><span>]</span> array <span>=</span> <span>new</span> <span>int</span><span>[</span>n<span>]</span><span>;</span>
    <span>.</span><span>.</span><span>.</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span>def</span> <span>fun2</span><span>(</span>n<span>:</span><span>int</span><span>)</span><span>:</span>
    array_list <span>=</span> <span>[</span><span>for</span> x <span>in</span> <span>range</span><span>(</span><span>1</span><span>,</span>n<span>)</span><span>]</span>
    <span>.</span><span>.</span><span>.</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>讲解 python 代码：</p>
<p>我们定义了  <code>fun2()</code> 函数，当我们调用这个函数的时候，我们向其中传入一个参数 n ，参数 n 的类型为  int （整数类型），然后 n 被传入后，函数  <code>fun2()</code> 利用 n 做了一件事：定义了一个长度为 n ，元素为从1到 n 的列表 array_list 。我们本来的输入规模为 n ，由上文中“ 程序在运行过程中，可能还需要临时申请更多的存储空间 ”可知，在函数内我们引入了长度为 n 的列表。即在这个程序中，我们额外申请了 n 长度的一维列表，与输入规模 n 成正比，所以该程序的空间复杂度记为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span>.</p>
<h3 id="二维空间"> 二维空间</h3>
<p>当算法分配的空间是一个二维列表或数组集合，并且集合的长度和宽度都与输入规模 n 成正比时，空间复杂度记作 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.064108em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span>.</p>
<div><pre><code><span>void</span> <span>fun3</span><span>(</span><span>int</span> n<span>)</span><span>{</span>
    <span>int</span><span>[</span><span>]</span><span>[</span><span>]</span> matrix <span>=</span> <span>new</span> <span>int</span><span>[</span>n<span>]</span><span>[</span>n<span>]</span><span>;</span>
    <span>.</span><span>.</span><span>.</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span>def</span> <span>fun3</span><span>(</span>n<span>:</span><span>int</span><span>)</span><span>:</span>
    matrix_list <span>=</span> <span>[</span><span>]</span>
    <span>for</span> i <span>in</span> <span>range</span><span>(</span>n<span>)</span><span>:</span>
        matrix_list<span>.</span>append<span>(</span><span>[</span><span>0</span><span>]</span><span>*</span>n<span>)</span>
    <span>.</span><span>.</span><span>.</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>对 python 代码进行讲解：</p>
<p>我们新建了一个函数<code>fun3()</code> ,它的目的是新建一个 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>×</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span> 的二维列表，我们的做法是：首先新建一个空的列表 matrix_list 然后对 matrix_list 进行一维列表的迭代和添加，最后生成二维列表。首先我们从生成一维列表开始，将n  传入 <code>fun3()</code> 中，我们首先新建一个空列表，为之后向列表中添加元素做准备，然后我们要稍微动一下脑子，当新建一个长度为 n 元素全为 0 的一维列表时，我们使用了循环来进行列表的初始化，所以在新建二维列表时，我们可以用类似的方法，同样使用循环来进行初始化，在一维列表初始化过程中，我们是不是将0元素挨个添加到列表中，以实现有 n 个 0 的列表，那现在我们要生成拥有 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>×</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span> 个 0 的列表，那是不是将[0] 做 n 次循环添加到 matrix_list 中就可以了。然后我们根据“ 程序在运行过程中，可能还需要临时申请更多的存储空间。”这一点可知，我们传入的参数 n 与二维列表  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>×</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span> 的长度成正比。所以该代码空间复杂度即为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.064108em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span>.</p>
<p>以下我们使用了当 n 为2时的情况，进行了函数模拟。</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110281037121.gif" alt="" /></p>
<h3 id="递归空间"> 递归空间</h3>
<p>程序调用函数是基于栈实现的，函数在调用期间，引入一个栈并进行入栈操作，将调用来的函数以及其参数信息全都压入栈中，当函数进行 return 操作时，执行出栈操作，把上一次调用的函数和参数信息从栈中弹出。从而释放掉多余的内存。</p>
<div><pre><code><span>int</span> <span>fun4</span><span>(</span><span>int</span> <span>N</span><span>)</span><span>{</span>
    <span>if</span><span>(</span><span>N</span> <span>&lt;=</span> <span>1</span><span>)</span><span>{</span>
        <span>return</span> <span>1</span><span>;</span>
    <span>}</span>
    <span>return</span> <span>fun4</span><span>(</span><span>N</span> <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>1</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span>def</span> <span>fun4</span><span>(</span>N<span>:</span><span>int</span><span>)</span><span>:</span>
    <span>if</span> N <span>&lt;=</span> <span>1</span><span>:</span> <span>return</span> <span>1</span>
    <span>return</span> fun4<span>(</span>N <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>对 python 代码进行分析：</p>
<p>当我们输入的 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.72243em;vertical-align:-0.0391em;"></span><span style="margin-right:0.10903em;">N</span><span style="margin-right:0.2777777777777778em;"></span><span>&lt;=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span> 时，我们将直接返回 1， 这是我们的递归结束点。当我们输入的 N 大于 1时，程序会引入一个栈，将 <code>fun4(N)</code>放入栈中，而 <code>fun4(N)</code> 又要调用 <code>fun(N - 1) + 1</code> 因此我们将<code>fun(N - 1) - 1</code> 放入栈中，以此类推直到 N 变为 1 ，这是 我们找到了递归结束点，将栈内的函数全都挨个释放出来即可。由上面函数的出入栈过程可以看出，执行递归操作所需要的内存空间和递归的深度成正比。纯粹的递归操作的空间复杂度也是线性，但如果递归的深度是 n ，那么空间复杂度就是<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span>.</p>
<p>我们在这里给出当N=6时的程序模拟以及递归树方便读者进行理解（递归后续会进行详细讲解）。</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110281038266.gif" alt="" /></p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110281038722.png" alt="" /></p>
<h2 id="时间和空间的权衡"> 时间和空间的权衡</h2>
<p>在上文笔者也提到，写代码其实不是一件虚拟的事情，它涉及到了现实的很多情况，当你在企业工作时，你所写的代码并不是单单满足你自己的需求即可，而是要考虑各种各样现实的限制了。虽然随着科技的发展，电脑更新换代非常的快，性能也是越来越强大。但电脑的内存并不是无限的，它的性能终究是有限的。因此我们在写代码的时候也要 “精打细算”，选择更加高效的执行办法。</p>
<p>对于算法的性能，需要从时间和空间的使用情况来综合评价。好的算法应具备两个特性，即时间和空间复杂度均比较低。而实际上，对于某个算法问题，正因为电脑的能力是有限的，所以我们的时间复杂度和空间空间复杂度是没有办法同时兼顾的，因此将会出现，时间换空间或者空间换时间的情况发生。</p>
<p>因为现在科技发展很快，电脑性能一般比较强大，满足了我们的日常需求，所以在平常的代码编写过程中，我们绝大多数情况，会考虑空间换取时间的操作，多分配一些内存空间，让程序跑到更快。</p>
<h2 id="总结"> 总结</h2>
<ul>
<li>什么是空间复杂度？</li>
</ul>
<p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度，用大 O 表示，常见的空间复杂度按照从低到高的顺序，包括<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.064108em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>1</span><span>)</span><span>、</span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span><span>、</span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span> .其中递归算法的空间复杂度和递归深度成正比。</p>
<p>下次我们进行数据结构的讲解。</p>
<p>公众号：AI悦创，首发！</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110281037121.gif" type="image/gif"/>
    </item>
    <item>
      <title>08-Markdown 表格</title>
      <link>https://book.bornforthi.com/zh/column/md/EightMarkdownform/</link>
      <guid>https://book.bornforthi.com/zh/column/md/EightMarkdownform/</guid>
      <source url="https://book.bornforthi.com/rss.xml">08-Markdown 表格</source>
      <category>Markdown 基础</category>
      <pubDate>Sun, 24 Oct 2021 18:11:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p>
<p>语法格式如下：</p>
<div><pre><code><span><span><span>|</span><span>  表头   </span><span>|</span><span> 表头  </span><span>|</span>
</span><span><span>|</span>  <span>----</span>  <span>|</span> <span>----</span>  <span>|</span>
</span><span><span>|</span><span> 单元格  </span><span>|</span><span> 单元格 </span><span>|</span>
<span>|</span><span> 单元格  </span><span>|</span><span> 单元格 </span><span>|</span>
</span></span></code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>以上代码显示结果如下：</p>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody>
</table>
<p>对齐方式</p>
<p><strong>我们可以设置表格的对齐方式：</strong></p>
<ul>
<li><strong>-:</strong> 设置内容和标题栏居右对齐。</li>
<li><strong>:-</strong> 设置内容和标题栏居左对齐。</li>
<li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li>
</ul>
<p>实例如下：</p>
<div><pre><code><span><span><span>|</span><span> 左对齐 </span><span>|</span><span> 右对齐 </span><span>|</span><span> 居中对齐 </span><span>|</span>
</span><span><span>|</span> <span>:-----</span><span>|</span> <span>----:</span> <span>|</span> <span>:----:</span> <span>|</span>
</span><span><span>|</span><span> 单元格 </span><span>|</span><span> 单元格 </span><span>|</span><span> 单元格 </span><span>|</span>
<span>|</span><span> 单元格 </span><span>|</span><span> 单元格 </span><span>|</span><span> 单元格 </span><span>|</span>
</span></span></code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>以上代码显示结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:right">右对齐</th>
<th style="text-align:center">居中对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
</tbody>
</table>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>06-Markdown 链接</title>
      <link>https://book.bornforthi.com/zh/column/md/SixMarkdownlink/</link>
      <guid>https://book.bornforthi.com/zh/column/md/SixMarkdownlink/</guid>
      <source url="https://book.bornforthi.com/rss.xml">06-Markdown 链接</source>
      <category>Markdown 基础</category>
      <pubDate>Thu, 14 Oct 2021 16:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<p>链接使用方法如下：</p>
<div><pre><code><span>[<span>链接名称</span>](<span>链接地址</span>)</span>

或者

<span><span><span>&lt;</span>链接地址</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>例如：</p>
<div><pre><code>这是一个链接 <span>[<span>流沙团队</span>](<span>https://book.bornforthi.com/</span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>显示结果如下：</p>
<p>这是一个链接 <a href="https://book.bornforthi.com/" target="_blank" rel="noopener noreferrer">流沙团队</a></p>
<p>直接使用链接地址：</p>
<div><pre><code>&lt;https://book.bornforthi.com/>
</code></pre>
<div><span>1</span><br></div></div><p>显示结果如下：</p>
<p><a href="https://book.bornforthi.com/" target="_blank" rel="noopener noreferrer">https://book.bornforthi.com/</a></p>
<h3 id="高级链接"> 高级链接</h3>
<p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p>
<div><pre><code>这个链接用 1 作为网址变量 <span>[<span>Google</span>][<span>1</span>]</span>
这个链接用 bornforthi 作为网址变量 <span>[<span>bornforthi</span>][<span>bornforthi</span>]</span>
然后在文档的结尾为变量赋值（网址）

  <span><span>[</span><span>1</span><span>]</span><span>:</span> http://www.google.com/</span>
  <span><span>[</span><span>bornforthi</span><span>]</span><span>:</span> https://book.bornforthi.com/</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>显示结果如下：</p>
<p>这个链接用 1 作为网址变量 <a href="http://www.google.com/" target="_blank" rel="noopener noreferrer">Google</a>
这个链接用 bornforthi 作为网址变量 <a href="https://book.bornforthi.com/" target="_blank" rel="noopener noreferrer">bornforthi</a>
然后在文档的结尾为变量赋值（网址）</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>10-补充</title>
      <link>https://book.bornforthi.com/zh/column/md/Tensupplement/</link>
      <guid>https://book.bornforthi.com/zh/column/md/Tensupplement/</guid>
      <source url="https://book.bornforthi.com/rss.xml">10-补充</source>
      <category>Markdown 基础</category>
      <pubDate>Fri, 15 Oct 2021 18:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<div><pre><code><span><span><span>&lt;</span>video</span> <span>id</span><span><span>=</span><span>"</span>video<span>"</span></span> <span>controls</span><span><span>=</span><span>"</span><span>"</span></span> <span>preload</span><span><span>=</span><span>"</span>none<span>"</span></span> <span>poster</span><span><span>=</span><span>"</span>视频封面<span>"</span></span><span>></span></span>
      <span><span><span>&lt;</span>source</span> <span>id</span><span><span>=</span><span>"</span>mp4<span>"</span></span> <span>src</span><span><span>=</span><span>"</span>放上你自己的视频链接<span>"</span></span> <span>type</span><span><span>=</span><span>"</span>video/mp4<span>"</span></span><span>></span></span>
      <span><span><span>&lt;/</span>video</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><iframe src="//player.bilibili.com/player.html?aid=668871436&bvid=BV1sa4y1a7kN&cid=211502373&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="600"> </iframe>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown</title>
      <link>https://book.bornforthi.com/zh/column/md/</link>
      <guid>https://book.bornforthi.com/zh/column/md/</guid>
      <source url="https://book.bornforthi.com/rss.xml">Markdown</source>
      <pubDate>Mon, 25 Oct 2021 15:30:26 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="简介"> 简介</h1>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>
<p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p>
<p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p>
<p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</p>
<hr>
<h1 id="markdown-应用"> Markdown 应用</h1>
<p>Markdown 能被使用来撰写电子书，如：<a href="https://book.bornforthi.com/GitBook_All/" target="_blank" rel="noopener noreferrer">Gitbook</a> 、或者现在你正在阅读的我们的<a href="https://book.bornforthi.com" target="_blank" rel="noopener noreferrer">官网</a> 也是使用 Markdown 编写。</p>
<p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、CSDN、掘金、思否、51CTO 等。</p>
<h1 id="编辑器"> 编辑器</h1>
<p>本教程将使用 Typora 编辑器来讲解 Markdown 的语法，Typora 支持 MacOS 、Windows、Linux 平台，且包含多种主题，编辑后直接渲染出效果。</p>
<p>支持导出HTML、PDF、Word、图片等多种类型文件。</p>
<p>Typora 官网：https://typora.io/</p>
<p>你也可以使用我们的在线编辑器来测试：<a href="http://www.bornforthi.com/markdown-editor/" target="_blank" rel="noopener noreferrer">http://www.bornforthi.com/markdown-editor/</a></p>
<p>备用链接1：<a href="http://book.bornforthi.com/markdown-editor/" target="_blank" rel="noopener noreferrer">http://book.bornforthi.com/markdown-editor/</a></p>
<p>备用连接2：<a href="https://bornforthi.gitee.io/markdown-editor" target="_blank" rel="noopener noreferrer">https://bornforthi.gitee.io/markdown-editor</a></p>
<h1 id="测试实例"> 测试实例</h1>
<p>Mardown 编写 Hello World! 语法：</p>
<div><pre><code><span><span>#</span> Hello World! </span>
</code></pre>
<div><span>1</span><br></div></div><p><img src="/ColumnImages/MarkdownBase/01/image-20211022133509452.png" alt="" /></p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://book.bornforthi.com/ColumnImages/MarkdownBase/01/image-20211022133509452.png" type="image/png"/>
    </item>
    <item>
      <title>01-本网站文章编写格式</title>
      <link>https://book.bornforthi.com/zh/column/md/Oneformatforwritingarticlesonthiswebsite/</link>
      <guid>https://book.bornforthi.com/zh/column/md/Oneformatforwritingarticlesonthiswebsite/</guid>
      <source url="https://book.bornforthi.com/rss.xml">01-本网站文章编写格式</source>
      <category>Markdown 基础</category>
      <pubDate>Tue, 19 Oct 2021 20:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<p>页面的 frontmatter 新增如下配置选项:</p>
<h2 id="页面信息配置"> 页面信息配置</h2>
<h3 id="icon"> icon</h3>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 否</li>
</ul>
<p>设置当前页面图标的 FontClass (建议填写)</p>
<h3 id="title"> title</h3>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 否</li>
</ul>
<p>设置当前页面内容标题，默认为 Markdown 文件中的第一个 h1 标签内容。</p>
<h3 id="description"> description</h3>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 否</li>
</ul>
<p>设置当前页面内容描述。</p>
<h3 id="author"> author</h3>
<ul>
<li>类型: <code>string | boolean</code></li>
<li>必填: 否</li>
</ul>
<p>显示当前页面的作者，如果不填，则会回退到默认作者。</p>
<div><p>提示</p>
<p>当全局默认作者启用时，可以设置 <code>false</code> 取消作者显示</p>
</div>
<h3 id="original"> original</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认: <code>false</code></li>
</ul>
<p>当前文章是否为原创。</p>
<h3 id="time"> time</h3>
<ul>
<li>类型: <code>timeString | string</code></li>
<li>必填: 否</li>
<li>格式: <code>YYYY-MM-DD</code> 或 <code>YYYY/MM/DD hh:mm:ss</code></li>
</ul>
<p>设置当前页面的写作时间。</p>
<div><p>注意</p>
<p>尽管本主题及 Mister-Hope 的其他插件会正确解析你输入的时间，如 <code>YYYY/MM/DD hh:mm</code> <code>YYYY-MM-DD hh:mm</code> <code>YYYY/MM/DD</code> 等，但是其他插件可能不能正确的读取他们。使用非标准格式的值可能会导致其他插件报错，</p>
</div>
<h3 id="category"> category</h3>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 否</li>
</ul>
<p>设置当前页面的分类</p>
<h3 id="tags"> tags</h3>
<ul>
<li>类型: <code>string | string[]</code></li>
<li>必填: 否</li>
</ul>
<p>设置当前页面的标签</p>
<h3 id="sticky"> sticky</h3>
<ul>
<li>类型: <code>boolean | number</code></li>
<li>默认值: <code>false</code></li>
</ul>
<p>设置当前文章是否在列表中置顶。当填入数字时，数字越大，排名越靠前。</p>
<h3 id="star"> star</h3>
<ul>
<li>类型: <code>boolean | number</code></li>
<li>默认值: <code>false</code></li>
</ul>
<p>设置当前文章是否收藏在博客主题的文章列表中。当填入数字时，数字越大，排名越靠前。</p>
<h3 id="article"> article</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认: <code>true</code></li>
</ul>
<p>是否将该文章添加至文章列表中。</p>
<h3 id="timeline"> timeline</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认: <code>true</code></li>
</ul>
<p>是否将该文章添加至时间线中。</p>
<h3 id="password"> password</h3>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 否</li>
</ul>
<p>设置当前文章的密码。</p>
<div><p>注意</p>
<p>请注意，由于密码会进行二次混淆加密，请确保密码是字符串格式。<code>'1234'</code> 和 <code>1234</code> 混淆后产生的结果是不同的。</p>
</div>
<h3 id="image"> image</h3>
<ul>
<li>类型: <code>string</code></li>
<li>必填: 否</li>
</ul>
<p>设置当前页面的预览图(分享图)，请填入绝对路径。</p>
<h3 id="copyright-minlength"> copyright.minLength</h3>
<ul>
<li>类型: <code>number</code></li>
<li>默认值: <code>100</code></li>
</ul>
<p>触发版权信息或禁止复制动作的最少字符数。</p>
<h3 id="copyright-nocopy"> copyright.noCopy</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: <code>false</code></li>
</ul>
<p>是否禁止复制</p>
<h3 id="copyright-noselect"> copyright.noSelect</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: <code>false</code></li>
</ul>
<p>是否禁止选中文字</p>
<h2 id="页面显示配置"> 页面显示配置</h2>
<h3 id="pageinfo"> pageInfo</h3>
<ul>
<li>类型: <code>PageInfo[] | false</code></li>
<li>默认值: 全局中配置的值 (全局默认为 <code>['author', 'visitor', 'time', 'category', 'tag', 'reading-time']</code>)</li>
</ul>
<p><code>PageInfo</code> 可选的值和对应内容如下:</p>
<table>
<thead>
<tr>
<th>条目</th>
<th>对应内容</th>
<th>页面 frontmatter 值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>'author'</code></td>
<td>作者</td>
<td>author</td>
</tr>
<tr>
<td><code>'time'</code></td>
<td>写作日期</td>
<td>time</td>
</tr>
<tr>
<td><code>'category'</code></td>
<td>分类</td>
<td>category</td>
</tr>
<tr>
<td><code>'tag'</code></td>
<td>标签</td>
<td>tags</td>
</tr>
<tr>
<td><code>'reading-time'</code></td>
<td>预计阅读时间</td>
<td>N/A(自动生成)</td>
</tr>
<tr>
<td><code>'word'</code></td>
<td>字数</td>
<td>N/A(自动生成)</td>
</tr>
<tr>
<td><code>'visitor'</code></td>
<td>访问量</td>
<td>visitor(仅 Valine 可用)</td>
</tr>
</tbody>
</table>
<p>设置当前页面的文章信息内容</p>
<h3 id="visitor"> visitor</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: 全局中配置的值 (配置全局的 <code>comment</code> 为 <code>'valine'</code> 后默认为 <code>true</code>)</li>
</ul>
<p>当前页面是否显示浏览量</p>
<div><p>提示</p>
<p>显示浏览量功能需要你正确配置了 Valine 类型的评论配置。</p>
</div>
<h3 id="breadcrumb"> breadcrumb</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: 全局中配置的值 (全局默认为 <code>true</code>)</li>
</ul>
<p>当前页面是否开启路径导航</p>
<h3 id="breadcrumbicon"> breadcrumbIcon</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: 全局中配置的值 (全局默认为 <code>true</code>)</li>
</ul>
<p>当前页面是否开启路径导航图标</p>
<h3 id="navbar"> navbar</h3>
<ul>
<li>类型: <code>boolean</code></li>
</ul>
<p>页面的导航栏配置，填入 <code>false</code> 会禁用导航栏</p>
<h3 id="sidebar"> sidebar</h3>
<ul>
<li>类型: <code>false | 'auto'</code></li>
</ul>
<p>页面的侧边栏配置选项。支持 <code>false</code> 或 <code>auto</code>。</p>
<h3 id="sidebardepth"> sidebarDepth</h3>
<ul>
<li>类型: <code>number</code></li>
<li>默认值: <code>2</code></li>
</ul>
<p>该页面的侧边栏渲染深度</p>
<h3 id="comment"> comment</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: 全局中配置的值 (配置全局的 <code>comment</code> 后默认为 <code>true</code>)</li>
</ul>
<p>当前页面是否开启评论功能</p>
<h3 id="editlink"> editLink</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: 全局中配置的值</li>
</ul>
<p>是否显示编辑链接</p>
<h3 id="prev"> prev</h3>
<ul>
<li>类型: <code>string | false</code></li>
</ul>
<p>上一篇文章链接</p>
<h3 id="next"> next</h3>
<ul>
<li>类型: <code>string | false</code></li>
</ul>
<p>下一篇文章链接</p>
<h3 id="footer"> footer</h3>
<ul>
<li>类型: <code>boolean | string | HTMLString</code></li>
</ul>
<p>设置当前页面的页脚内容，如果你想要禁用页脚，请设置为 <code>false</code>，如果你想要移除默认的页脚内容，请设置为 <code>''</code>，如果你想使用默认页脚，请设置为 <code>true</code>。</p>
<p>更多详情请看 <a href="./../guide/layout/page.html#页脚支持">页面 → 页脚支持</a></p>
<h3 id="copyrighttext"> copyrightText</h3>
<ul>
<li>类型: <code>string | false</code></li>
<li>默认值: 全局中配置的值</li>
</ul>
<p>设置当前页面的版权信息，更多详情请看 <a href="./../guide/layout/page.html#页脚支持">页面 → 页脚支持</a></p>
<h3 id="medialink"> mediaLink</h3>
<ul>
<li>类型: <code>Record&lt;MediaType, string&gt; | false</code></li>
<li>默认值: 主题中 <code>themeConfig.blog.links</code> 的值</li>
</ul>
<p>设置当前页面的页脚社交链接。</p>
<div><p>可用的社交媒体:</p>
<p><code>MediaType</code> 的可选值如下:</p>
<ul>
<li><code>'Baidu'</code>: 百度</li>
<li><code>'Bitbucket'</code>: Bitbucket</li>
<li><code>'Dingding'</code>: 钉钉</li>
<li><code>'Discord'</code>: Discord</li>
<li><code>'Dribbble'</code>: Dribble</li>
<li><code>'Email'</code>: Email</li>
<li><code>'Evernote'</code>: 印象笔记</li>
<li><code>'Facebook'</code>: 脸书</li>
<li><code>'Flipboard'</code>: 红板报</li>
<li><code>'Gitee'</code>: Gitee</li>
<li><code>'Github'</code>: GitHub</li>
<li><code>'Gitlab'</code>: Gitlab</li>
<li><code>'Gmail'</code>: 谷歌邮箱(当然你也可以填入你自己的其他邮箱)</li>
<li><code>'Instagram'</code>: Instagram</li>
<li><code>'Line'</code>: Line</li>
<li><code>'Linkedin'</code>: 领英</li>
<li><code>'Pinterest'</code>: 拼趣</li>
<li><code>'Pocket'</code>: Pocket</li>
<li><code>'QQ'</code>: QQ</li>
<li><code>'Qzone'</code>: QQ 空间</li>
<li><code>'Reddit'</code>: Reddit</li>
<li><code>'Rss'</code>: RSS 地址</li>
<li><code>'Steam'</code>: Steam</li>
<li><code>'Twitter'</code>: Twitter</li>
<li><code>'Wechat'</code>: 微信</li>
<li><code>'Weibo'</code>: 微博</li>
<li><code>'Whatsapp'</code>: Whatsapp</li>
<li><code>'Youtube'</code>: YouTube</li>
<li><code>'Zhihu'</code>: 知乎</li>
</ul>
</div>
<h3 id="search"> search</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: 全局中配置的值 (全局默认为 <code>true</code>)</li>
</ul>
<p>当前页面是否显示搜索框。</p>
<h3 id="backtotop"> backToTop</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: 全局中配置的值 (全局默认为 <code>true</code>)</li>
</ul>
<p>设置当前页面是否显示返回顶部按钮</p>
<h3 id="anchordisplay"> anchorDisplay</h3>
<ul>
<li>类型: <code>boolean</code></li>
<li>默认值: 全局中配置的值 (全局默认为 <code>true</code>)</li>
</ul>
<p>设置当前页面在桌面模式下是否在右侧显示标题列表</p>
<h2 id="layout"> layout</h2>
<ul>
<li>类型: <code>string</code></li>
</ul>
<p>页面的自定义布局名称</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>04-Markdown 区块</title>
      <link>https://book.bornforthi.com/zh/column/md/fourmarkdownblock/</link>
      <guid>https://book.bornforthi.com/zh/column/md/fourmarkdownblock/</guid>
      <source url="https://book.bornforthi.com/rss.xml">04-Markdown 区块</source>
      <category>Markdown 基础</category>
      <pubDate>Sun, 24 Oct 2021 23:20:51 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p>
<div><pre><code><span>></span> 区块引用
<span>></span> 流沙教程
<span>></span> 学的不仅是技术更是梦想
<span>></span> 一股无形的力量！
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>显示结果如下：</p>
<blockquote>
<p>区块引用
流沙教程
学的不仅是技术更是梦想
一股无形的力量！</p>
</blockquote>
<p>另外区块是可以嵌套的，一个 <strong>&gt;</strong> 符号是最外层，两个 <strong>&gt;</strong> 符号是第一层嵌套，以此类推：</p>
<div><pre><code><span>></span> 最外层
<span>> ></span> 第一层嵌套
<span>> > ></span> 第二层嵌套
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>显示结果如下：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="区块中使用列表"> 区块中使用列表</h2>
<p>区块中使用列表实例如下：</p>
<div><pre><code><span>></span> 区块中使用列表
<span>></span> <span>1.</span> 第一项
<span>></span> <span>2.</span> 第二项
<span>></span> <span>+</span> 第一项
<span>></span> <span>+</span> 第二项
<span>></span> <span>+</span> 第三项
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>显示结果如下：</p>
<blockquote>
<p>区块中使用列表</p>
<ol>
<li>第一项</li>
<li>第二项</li>
</ol>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<h2 id="列表中使用区块"> 列表中使用区块</h2>
<p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p>
<p>列表中使用区块实例如下：</p>
<div><pre><code>* 第一项
    &gt; 流沙教程
    &gt; 学的不仅是技术更是梦想
    &gt; 一股无形的力量！
* 第二项
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>显示结果如下：</p>
<ul>
<li>
<p>第一项</p>
<blockquote>
<p>流沙教程
学的不仅是技术更是梦想
一股无形的力量！</p>
</blockquote>
</li>
<li>
<p>第二项</p>
</li>
</ul>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>09-Markdown 高级技巧</title>
      <link>https://book.bornforthi.com/zh/column/md/nineMarkdownskills/</link>
      <guid>https://book.bornforthi.com/zh/column/md/nineMarkdownskills/</guid>
      <source url="https://book.bornforthi.com/rss.xml">09-Markdown 高级技巧</source>
      <category>Markdown 基础</category>
      <pubDate>Fri, 22 Oct 2021 20:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<h3 id="支持的-html-元素"> 支持的 HTML 元素</h3>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>
<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p>
<div><pre><code>使用 <span><span><span>&lt;</span>kbd</span><span>></span></span>Ctrl<span><span><span>&lt;/</span>kbd</span><span>></span></span>+<span><span><span>&lt;</span>kbd</span><span>></span></span>Alt<span><span><span>&lt;/</span>kbd</span><span>></span></span>+<span><span><span>&lt;</span>kbd</span><span>></span></span>Del<span><span><span>&lt;/</span>kbd</span><span>></span></span> 重启电脑
</code></pre>
<div><span>1</span><br></div></div><p>输出结果为：</p>
<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>
<h3 id="转义"> 转义</h3>
<p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>
<div><pre><code><span><span>**</span><span>文本加粗</span><span>**</span></span> 
\*\* 正常显示星号 \*\*
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>输出结果为：</p>
<p><strong>文本加粗</strong></p>
<p>** 正常显示星号 **</p>
<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<div><pre><code>\   反斜线
`   反引号
<span>*</span>   星号
_   下划线
{}  花括号
[]  方括号
()  小括号
<span><span>#</span>   井字号</span>
<span>+</span>   加号
<span>-</span>   减号
.   英文句点
!   感叹号
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id="公式"> 公式</h3>
<p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>
<div><pre><code>$$
\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} 
\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\
\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\
\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\
\end{vmatrix}
${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}
$$
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p class='katex-block katex-error' title='ParseError: KaTeX parse error: Can&#039;t use function &#039;$&#039; in math mode at position 248: …
\end{vmatrix}
$̲{$tep1}{\style{…'>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} 
\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\
\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\
\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\
\end{vmatrix}
${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}
</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>07-Markdown 图片</title>
      <link>https://book.bornforthi.com/zh/column/md/SevenMarkdownpictures/</link>
      <guid>https://book.bornforthi.com/zh/column/md/SevenMarkdownpictures/</guid>
      <source url="https://book.bornforthi.com/rss.xml">07-Markdown 图片</source>
      <category>Markdown 基础</category>
      <pubDate>Wed, 13 Oct 2021 17:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>Markdown 图片语法格式如下：</p>
<div><pre><code>![alt 属性文本](图片地址)

![alt 属性文本](图片地址 &quot;可选标题&quot;)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>开头一个感叹号 !</li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 'title' 属性的文字。</li>
</ul>
<p>使用实例：</p>
<div><pre><code><span><span>!</span>[<span>bornforthi 图标</span>](<span>https://book.bornforthi.com/favicon.ico</span>)</span>

<span><span>!</span>[<span>bornforthi 图标</span>](<span>https://book.bornforthi.com/images/logo.png</span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><img src="https://book.bornforthi.com/favicon.ico" alt="bornforthi 图标" /></p>
<p><img src="https://book.bornforthi.com/images/logo.png" alt="bornforthi 图标" /></p>
<p>当然，你也可以像网址那样对图片网址使用变量:</p>
<div><pre><code>这个链接用 1 作为网址变量 [bornforthi][1].
然后在文档的结尾为变量赋值（网址）

[1]: https://book.bornforthi.com/images/logo.png
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>显示结果如下：</p>
<p>这个链接用 1 作为网址变量 <a href="https://book.bornforthi.com/images/logo.png" target="_blank" rel="noopener noreferrer">bornforthi</a>.
然后在文档的结尾为变量赋值（网址）</p>
<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p>
<div><pre><code>&lt;img src=&quot;https://book.bornforthi.com/images/logo.png&quot; width=&quot;20%&quot;&gt;
</code></pre>
<div><span>1</span><br></div></div><p>显示结果如下：</p>
<img src="https://book.bornforthi.com/images/logo.png" width="20%">
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>01-Markdown 标题</title>
      <link>https://book.bornforthi.com/zh/column/md/oneMarkdowntitle/</link>
      <guid>https://book.bornforthi.com/zh/column/md/oneMarkdowntitle/</guid>
      <source url="https://book.bornforthi.com/rss.xml">01-Markdown 标题</source>
      <category>Markdown 基础</category>
      <pubDate>Mon, 11 Oct 2021 12:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<p>Markdown 标题有两种格式。</p>
<h1 id="_1、使用-和-标记一级和二级标题"> 1、使用 = 和 - 标记一级和二级标题</h1>
<p>= 和 - 标记语法格式如下：</p>
<div><pre><code><span>我展示的是一级标题
<span>=================</span></span>

<span>我展示的是二级标题
<span>-----------------</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>显示效果如下图：</p>
<p><img src="/ColumnImages/MarkdownBase/01/image-20211022145145089.png" alt="" /></p>
<h1 id="_2-使用-号标记"> 2. 使用 # 号标记</h1>
<p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p>
<div><pre><code><span><span>#</span> 一级标题</span>
<span><span>##</span> 二级标题</span>
<span><span>###</span> 三级标题</span>
<span><span>####</span> 四级标题</span>
<span><span>#####</span> 五级标题</span>
<span><span>######</span> 六级标题</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>显示效果如下图：</p>
<p><img src="/ColumnImages/MarkdownBase/01/image-20211022150038645.png" alt="image-20211022150038645" /></p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://book.bornforthi.com/ColumnImages/MarkdownBase/01/image-20211022145145089.png" type="image/png"/>
    </item>
    <item>
      <title>02-代码演示</title>
      <link>https://book.bornforthi.com/zh/column/md/twoCodedemo/</link>
      <guid>https://book.bornforthi.com/zh/column/md/twoCodedemo/</guid>
      <source url="https://book.bornforthi.com/rss.xml">02-代码演示</source>
      <description>&amp;lt;p&amp;gt;让你的 VuePress 站点中的 Markdown 文件支持代码案例。&amp;lt;/p&amp;gt;
</description>
      <category>Markdown 基础</category>
      <pubDate>Sun, 17 Oct 2021 10:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>让你的 VuePress 站点中的 Markdown 文件支持代码案例。</p>

<h2 id="配置"> 配置</h2>
<div><div><br><br><br><div>&nbsp;</div><br><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  themeConfig<span>:</span> <span>{</span>
    mdEnhance<span>:</span> <span>{</span>
      demo<span>:</span> <span>true</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="语法"> 语法</h2>
<p>请使用以下语法：</p>
<div><pre><code>::: demo [类型] 可选的标题文字

<span><span>```</span><span>html</span>
<span><span>&lt;!-- ↑ 使用可用的语言 --></span>
<span>&lt;!-- 在代码块中放置你对应语言的代码，一个语言不能出现多个块 --></span>
<span>&lt;!-- 你可以有多个代码块，并且 html, js, css 都是视情况可选的 --></span></span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><pre><code><span>// json block 作为插件配置存放处</span>
<span>{</span>
  <span>// 放置你的配置 (optional)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>:::</p>
<div><pre><code>
::: tip

JSON 块是可选的，可用的配置详见 [配置](../config.md#demo)。

:::

该插件支持三种类型：

- normal (默认)
- vue
- react

### Normal

写法:

````md
::: demo 可选的标题文字

```html
&lt;!-- html code --&gt;
```

```js
// js code
```

```css
/* css code */
```

```json
// 配置 (可选)
{
  &quot;jsLib&quot;: [
    ...
  ],
  &quot;cssLib&quot;:[
    ...
  ]
}
```

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><h3 id="vue"> Vue</h3>
<p>语法:</p>
<div><pre><code>::: demo [vue] 可选的标题文字

<span><span>```</span><span>vue</span>
<span>&lt;!-- ↑ 你也可以使用 html -->
&lt;template>
  &lt;!-- vue 模板 -->
&lt;/template>
&lt;script>
export default {
  // vue 组件
};
&lt;/script>
&lt;style>
/* css 代码 */
&lt;/style></span>
<span>```</span></span>

<span><span>```</span><span>json</span>
<span><span>// 配置 (可选)</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id="react"> React</h3>
<p>语法:</p>
<div><pre><code>::: demo [react] 可选的标题文字

<span><span>```</span><span>js</span>
<span><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>// react 组件</span>
<span>}</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>/* 你的 css 内容 */</span></span>
<span>```</span></span>

<span><span>```</span><span>json</span>
<span><span>// 配置 (可选)</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id="可用的语言"> 可用的语言</h3>
<p>你可以在演示块中使用不同语言。</p>
<p>当你设置一些不能在浏览器上直接运行的语言时，由于插件无法解析它们，因此网页演示将被禁用。插件只显示代码。同时提供一个 &quot;在 CodePen 中打开&quot; 按钮允许用户直接在 CodePen 打开并浏览代码。</p>
<p>可用的 HTML 语言:</p>
<ul>
<li><code>&quot;html&quot;</code> (默认)</li>
<li><code>&quot;slim&quot;</code></li>
<li><code>&quot;haml&quot;</code></li>
<li><code>&quot;markdown&quot;</code></li>
</ul>
<blockquote>
<p>你也可以在代码块中使用 <code>md</code>。</p>
</blockquote>
<p>可用的 JS 语言:</p>
<ul>
<li><code>&quot;javascript&quot;</code> (default)</li>
<li><code>&quot;coffeescript&quot;</code></li>
<li><code>&quot;babel&quot;</code></li>
<li><code>&quot;livescript&quot;</code></li>
<li><code>&quot;typescript&quot;</code></li>
</ul>
<blockquote>
<p>你也可以在代码块中使用 <code>js</code>, <code>ts</code>, <code>coffee</code> 和 <code>ls</code>。</p>
</blockquote>
<p>可用的 CSS 语言:</p>
<ul>
<li><code>&quot;css&quot;</code> (default)</li>
<li><code>&quot;less&quot;</code></li>
<li><code>&quot;scss&quot;</code></li>
<li><code>&quot;sass&quot;</code></li>
<li><code>&quot;stylus&quot;</code></li>
</ul>
<blockquote>
<p>你也可以在代码块中使用 <code>styl</code>。</p>
</blockquote>
<h2 id="演示"> 演示</h2>

          <div
            id="code-demo-5ac6bc9f"
           
  
 data-title="Demo%20%E6%BC%94%E7%A4%BA"

            data-code="%7B%22html%22%3A%22%3Ch1%3EMr.Hope%3C%2Fh1%3E%5Cn%3Cp%3E%3Cspan%20id%3D%5C%22very%5C%22%3E%E5%8D%81%E5%88%86%3C%2Fspan%3E%20%E5%B8%85%3C%2Fp%3E%5Cn%22%2C%22js%22%3A%22document.querySelector(%5C%22%23very%5C%22).addEventListener(%5C%22click%5C%22%2C%20()%20%3D%3E%20%7B%5Cn%20%20alert(%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22)%3B%5Cn%7D)%3B%5Cn%22%2C%22css%22%3A%22span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"十分帅"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo Demo 演示

<span><span>```</span><span>html</span>
<span><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span></span>
<span>```</span></span>

<span><span>```</span><span>js</span>
<span>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"十分帅"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></details>

          <div
            id="code-demo-0efcc83d"
           
  data-type="react"
 data-title="%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E5%BC%8F%20React%20Demo"

            data-code="%7B%22js%22%3A%22export%20default%20()%20%3D%3E%20%7B%5Cn%20%20const%20message%20%3D%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%3B%5Cn%5Cn%20%20const%20handler%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20alert(message)%3B%5Cn%20%20%7D%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%20className%3D%5C%22box%5C%22%3E%5Cn%20%20%20%20%20%20Mr.Hope%5Cn%20%20%20%20%20%20%3Cspan%20id%3D%5C%22very%5C%22%20onClick%3D%7Bhandler%7D%3E%5Cn%20%20%20%20%20%20%20%20%7Bmessage%7D%5Cn%20%20%20%20%20%20%3C%2Fspan%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%3B%5Cn%22%2C%22css%22%3A%22.box%20span%20%7B%5Cn%20%20color%3A%20blue%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span>export</span> <span>default</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> message <span>=</span> <span>"十分帅"</span><span>;</span>

  <span>const</span> <span>handler</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>alert</span><span>(</span>message<span>)</span><span>;</span>
  <span>}</span><span>;</span>

  <span>return</span> <span>(</span>
    <span>&lt;</span>div className<span>=</span><span>"box"</span><span>></span>
      Mr<span>.</span>Hope
      <span>&lt;</span>span id<span>=</span><span>"very"</span> onClick<span>=</span><span>{</span>handler<span>}</span><span>></span>
        <span>{</span>message<span>}</span>
      <span>&lt;</span><span>/</span>span<span>></span>
    <span>&lt;</span><span>/</span>div<span>></span>
  <span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><div><pre><code><span>.box span</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo [react] 一个函数式 React Demo

<span><span>```</span><span>js</span>
<span><span>export</span> <span>default</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> message <span>=</span> <span>"十分帅"</span><span>;</span>

  <span>const</span> <span>handler</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>alert</span><span>(</span>message<span>)</span><span>;</span>
  <span>}</span><span>;</span>

  <span>return</span> <span>(</span>
    <span>&lt;</span>div className<span>=</span><span>"box"</span><span>></span>
      Mr<span>.</span>Hope
      <span>&lt;</span>span id<span>=</span><span>"very"</span> onClick<span>=</span><span>{</span>handler<span>}</span><span>></span>
        <span>{</span>message<span>}</span>
      <span>&lt;</span><span>/</span>span<span>></span>
    <span>&lt;</span><span>/</span>div<span>></span>
  <span>)</span><span>;</span>
<span>}</span><span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>.box span</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div></details>

          <div
            id="code-demo-89dfad82"
           
  data-type="react"
 data-title="%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%BC%8F%20React%20Demo"

            data-code="%7B%22js%22%3A%22export%20default%20class%20App%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22box%5C%22%3E%5Cn%20%20%20%20%20%20%20%20Mr.Hope%5Cn%20%20%20%20%20%20%20%20%3Cspan%20id%3D%5C%22very%5C%22%20onClick%3D%7Bthis.handler%7D%3E%5Cn%20%20%20%20%20%20%20%20%20%20%7Bthis.state.message%7D%5Cn%20%20%20%20%20%20%20%20%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%20%20handler()%20%7B%5Cn%20%20%20%20alert(this.state.message)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22css%22%3A%22.box%20span%20%7B%5Cn%20%20color%3A%20blue%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> message<span>:</span> <span>"十分帅"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box"</span><span>></span>
        Mr<span>.</span>Hope
        <span>&lt;</span>span id<span>=</span><span>"very"</span> onClick<span>=</span><span>{</span><span>this</span><span>.</span>handler<span>}</span><span>></span>
          <span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span>
        <span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
  <span>handler</span><span>(</span><span>)</span> <span>{</span>
    <span>alert</span><span>(</span><span>this</span><span>.</span>state<span>.</span>message<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><div><pre><code><span>.box span</span> <span>{</span>
  <span>color</span><span>:</span> blue<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo [react] 一个类式 React Demo

<span><span>```</span><span>js</span>
<span><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> message<span>:</span> <span>"十分帅"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box"</span><span>></span>
        Mr<span>.</span>Hope
        <span>&lt;</span>span id<span>=</span><span>"very"</span> onClick<span>=</span><span>{</span><span>this</span><span>.</span>handler<span>}</span><span>></span>
          <span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span>
        <span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
  <span>handler</span><span>(</span><span>)</span> <span>{</span>
    <span>alert</span><span>(</span><span>this</span><span>.</span>state<span>.</span>message<span>)</span><span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>.box-react span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div></details>

          <div
            id="code-demo-2889df4e"
           
  data-type="vue"
 data-title="%E4%B8%80%E4%B8%AA%20Vue%20Demo"

            data-code="%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22box%5C%22%3E%5Cn%20%20%20%20Mr.Hope%20%3Cspan%20%40click%3D%5C%22handler%5C%22%3E%7B%7B%20message%20%7D%7D%3C%2Fspan%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20data%3A%20()%20%3D%3E%20(%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D)%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20handler()%20%7B%5Cn%20%20%20%20%20%20alert(this.message)%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%2C%5Cn%7D%3B%5Cn%3C%2Fscript%3E%5Cn%3Cstyle%3E%5Cn.box%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
    Mr.Hope <span><span><span>&lt;</span>span</span> <span>@click</span><span><span>=</span><span>"</span>handler<span>"</span></span><span>></span></span>{{ message }}<span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span> message<span>:</span> <span>"十分帅"</span> <span>}</span><span>)</span><span>,</span>
  methods<span>:</span> <span>{</span>
    <span>handler</span><span>(</span><span>)</span> <span>{</span>
      <span>alert</span><span>(</span><span>this</span><span>.</span>message<span>)</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span><span>></span></span><span><span>
<span>.box span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo [vue] 一个 Vue Demo

<span><span>```</span><span>vue</span>
<span>&lt;template>
  &lt;div>
    Mr.Hope &lt;span @click="handler">{{ message }}&lt;/span>
  &lt;/div>
&lt;/template>
&lt;script>
export default {
  data: () => ({ message: "十分帅" }),
  methods: {
    handler() {
      alert(this.message);
    },
  },
};
&lt;/script>
&lt;style>
.box span {
  color: red;
}
&lt;/style></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div></details>

          <div
            id="code-demo-2869b0e2"
           
  
 data-title="%E4%B8%80%E4%B8%AA%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8D%E6%94%AF%E6%8C%81%E8%A7%A3%E6%9E%90%E8%AF%AD%E8%A8%80%20Demo"

            data-code="%7B%22md%22%3A%22%23%20%E6%A0%87%E9%A2%98%5Cn%5Cn%E5%8D%81%E5%88%86%E5%B8%85%5Cn%22%2C%22ts%22%3A%22const%20message%3A%20string%20%3D%20%5C%22Mr.Hope%5C%22%3B%5Cn%5Cndocument.querySelector(%5C%22h1%5C%22).innerHTML%20%3D%20message%3B%5Cn%22%2C%22scss%22%3A%22h1%20%7B%5Cn%20%20font-style%3A%20italic%3B%5Cn%5Cn%20%20%2B%20p%20%7B%5Cn%20%20%20%20color%3A%20red%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span>#</span> 标题</span>

十分帅
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo 一个使用浏览器不支持解析语言 Demo

<span><span>```</span><span>md</span>
<span><span><span>#</span> 标题</span>

十分帅</span>
<span>```</span></span>

<span><span>```</span><span>ts</span>
<span><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>scss</span>
<span><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>11-Markdown 数学公式语法</title>
      <link>https://book.bornforthi.com/zh/column/md/Markdownmathematicalformulasyntax/</link>
      <guid>https://book.bornforthi.com/zh/column/md/Markdownmathematicalformulasyntax/</guid>
      <source url="https://book.bornforthi.com/rss.xml">11-Markdown 数学公式语法</source>
      <category>Markdown 基础</category>
      <pubDate>Mon, 25 Oct 2021 15:10:53 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<h2 id="行内与独行"> 行内与独行</h2>
<ol>
<li>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：<code>$xyz$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span>x</span><span style="margin-right:0.04398em;">yz</span></span></span></span></li>
<li>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：<code>$$xyz$$</code>，效果：$$xyz$$</li>
</ol>
<h2 id="上标、下标与组合"> 上标、下标与组合</h2>
<ol>
<li>上标符号，符号：<code>^</code>，如：<code>$x^4$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8141079999999999em;vertical-align:0em;"></span><span><span>x</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span></span></span></span></span></span></span></span></li>
<li>下标符号，符号：<code>_</code>，如：<code>$x_1$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>组合符号，符号：<code>{}</code>，如：<code>${16}_{8}O{2+}_{2}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.79444em;vertical-align:-0.15em;"></span><span><span><span>16</span></span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>8</span></span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>o</span><span><span><span>2</span><span>+</span></span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>2</span></span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
</ol>
<h2 id="汉字、字体与格式"> 汉字、字体与格式</h2>
<ol>
<li>
<p>汉字形式，符号：<code>\mbox{}</code>，如：<code>$V_{\mbox{初始}}$</code>，效果：<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \mbox at position 4: V_{\̲m̲b̲o̲x̲{初始}}'>V_{\mbox{初始}}</span></p>
</li>
<li>
<p>字体控制，符号：<code>\displaystyle</code>，如：<code>$\displaystyle \frac{x+y}{y+z}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.1407700000000003em;vertical-align:-0.8804400000000001em;"></span><span><span></span><span><span><span><span style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span><span>​</span></span><span><span style="height:0.8804400000000001em;"><span></span></span></span></span></span><span></span></span></span></span></span></p>
</li>
<li>
<p>下划线符号，符号：<code>\underline</code>，如：<code>$\underline{x+y}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.97777em;vertical-align:-0.3944400000000001em;"></span><span><span><span><span style="height:0.5833299999999999em;"><span style="top:-2.6455599999999997em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span style="height:3em;"></span><span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span><span>​</span></span><span><span style="height:0.3944400000000001em;"><span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>标签，符号<code>\tag{数字}</code>，如：<code>$\tag{11}$</code>，效果：<span class='katex-error' title='ParseError: KaTeX parse error: \tag works only in display equations'>\tag{11}</span></p>
</li>
<li>
<p>上大括号，符号：<code>\overbrace{算式}</code>，如：<code>$\overbrace{a+b+c+d}^{2.0}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.076878em;vertical-align:-0.08333em;"></span><span><span><span><span style="height:1.9935479999999997em;"><span style="top:-3.34244em;"><span style="height:3.34244em;"></span><span><span><span><span style="height:1.3424399999999999em;"><span style="top:-3em;"><span style="height:3em;"></span><span><span>a</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span>b</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span>c</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span>d</span></span></span><span style="top:-3.79444em;"><span style="height:3em;"></span><span style="height:0.548em;min-width:1.6em;"><span style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117
-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7
 5-6 9-10 13-.7 1-7.3 1-20 1H6z'/></svg></span><span style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M200428 334
c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14
-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7
 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11
 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z'/></svg></span><span style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M400000 542l
-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5
s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1
c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z'/></svg></span></span></span></span><span>​</span></span><span><span style="height:0.08333em;"><span></span></span></span></span></span></span><span style="top:-4.88488em;"><span style="height:3.34244em;"></span><span><span><span>2.0</span></span></span></span></span><span>​</span></span><span><span style="height:0.08333em;"><span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>下大括号，符号：<code>\underbrace{算式}</code>，如：<code>$a+\underbrace{b+c}_{1.0}+d$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>a</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:2.076878em;vertical-align:-1.382438em;"></span><span><span><span><span style="height:0.69444em;"><span style="top:-1.617562em;"><span style="height:3em;"></span><span><span><span>1.0</span></span></span></span><span style="top:-3em;"><span style="height:3em;"></span><span><span><span><span style="height:0.69444em;"><span style="top:-2.26867em;"><span style="height:3em;"></span><span style="height:0.548em;min-width:1.6em;"><span style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13
 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688
 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7
-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214
c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14
 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3
 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0
-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3
 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237
-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span style="height:3em;"></span><span><span>b</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span>c</span></span></span></span><span>​</span></span><span><span style="height:0.73133em;"><span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:1.382438em;"><span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.69444em;vertical-align:0em;"></span><span>d</span></span></span></span></p>
</li>
<li>
<p>上位符号，符号：<code>\stacrel{上位符号}{基位符号}</code>，如：<code>$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.152978em;vertical-align:0em;"></span><span><span><span><span style="height:0.714em;"><span style="top:-3em;"><span style="height:3em;"></span><span>x</span></span><span style="top:-3em;"><span style="height:3em;"></span><span style="left:-0.20772em;"><span style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span><span><span><span><span style="height:1.152978em;"><span style="top:-3em;"><span style="height:3em;"></span><span><span>=</span></span></span><span style="top:-3.5668699999999998em;margin-left:0em;"><span style="height:3em;"></span><span><span><span><span style="margin-right:0.07778em;">def</span></span></span></span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
</li>
</ol>
<h2 id="占位符"> 占位符</h2>
<ol>
<li>两个 qquad 空格，符号：<code>\qquad</code>，如：<code>$x \qquad y$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span>x</span><span style="margin-right:2em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></li>
<li>quad空格，符号：<code>\quad</code>，如：<code>$x \quad y$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span>x</span><span style="margin-right:1em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></li>
<li>大空格，符号<code>\</code>，如：<code>$x \ y$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span>x</span><span> </span><span style="margin-right:0.03588em;">y</span></span></span></span></li>
<li>中空格，符号<code>\:</code>，如：<code>$x : y$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span>:</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></li>
<li>小空格，符号<code>\,</code>，如：<code>$x , y$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span>x</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></li>
<li>没有空格，符号，如：<code>$xy$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span>x</span><span style="margin-right:0.03588em;">y</span></span></span></span></li>
<li>紧贴，符号 <code>\!</code>，如：<code>$x ! y$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>x</span><span>!</span><span style="margin-right:0.03588em;">y</span></span></span></span></li>
</ol>
<h2 id="定界符与组合"> 定界符与组合</h2>
<ol>
<li>
<p>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：<code>$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$，</code>效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span>（）</span><span><span>(</span></span><span><span>)</span></span><span><span>(</span></span><span><span>)</span></span><span><span>(</span></span><span><span>)</span></span><span><span>(</span></span><span><span>)</span></span></span></span></span></p>
</li>
<li>
<p>中括号，符号：<code>[]</code>，如：<code>$[x+y]$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>[</span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">y</span><span>]</span></span></span></span></p>
</li>
<li>
<p>大括号，符号：<code>\{ \}</code>，如：<code>${x+y}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></span></p>
</li>
<li>
<p>自适应括号，符号：<code>\left \right</code>，如：<code>$\left(x\right)$</code>，<code>$\left(x{yz}\right)$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="top:0em;">(</span><span>x</span><span style="top:0em;">)</span></span></span></span></span>、<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="top:0em;">(</span><span>x</span><span><span style="margin-right:0.04398em;">yz</span></span><span style="top:0em;">)</span></span></span></span></span></p>
</li>
<li>
<p>组合公式，符号：<code>{上位公式 \choose 下位公式}</code>，如：<code>${n+1 \choose k}={n \choose k}+{n \choose k-1}$，</code>效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.245118em;vertical-align:-0.35001em;"></span><span><span><span style="top:0em;"><span>(</span></span><span><span><span><span style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.144em;"><span style="height:2.7em;"></span><span><span><span>n</span><span>+</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.345em;"><span></span></span></span></span></span><span style="top:0em;"><span>)</span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1.20001em;vertical-align:-0.35001em;"></span><span><span><span style="top:0em;"><span>(</span></span><span><span><span><span style="height:0.7453919999999999em;"><span style="top:-2.3550000000000004em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.144em;"><span style="height:2.7em;"></span><span><span><span>n</span></span></span></span></span><span>​</span></span><span><span style="height:0.345em;"><span></span></span></span></span></span><span style="top:0em;"><span>)</span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1.253331em;vertical-align:-0.403331em;"></span><span><span><span style="top:0em;"><span>(</span></span><span><span><span><span style="height:0.745392em;"><span style="top:-2.355em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03148em;">k</span><span>−</span><span>1</span></span></span></span><span style="top:-3.144em;"><span style="height:2.7em;"></span><span><span><span>n</span></span></span></span></span><span>​</span></span><span><span style="height:0.403331em;"><span></span></span></span></span></span><span style="top:0em;"><span>)</span></span></span></span></span></span></span></p>
</li>
<li>
<p>组合公式，符号：<code>{上位公式 \atop 下位公式}</code>，如：<code>$\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.50218em;vertical-align:-0.75218em;"></span><span><span style="position:relative;top:-0.0000050000000000050004em;">∑</span><span><span><span><span style="height:0.3447999999999999em;"><span style="top:-2.3448em;margin-left:0em;margin-right:0.05em;"><span style="height:2.69164em;"></span><span><span><span><span></span><span><span><span><span style="height:0.9880571428571429em;"><span style="top:-2.1349714285714283em;"><span style="height:2.5em;"></span><span><span><span><span style="margin-right:0.03148em;">k</span><span><span><span><span style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;"><span style="height:2.64444em;"></span><span>0</span></span></span><span>​</span></span><span><span style="height:0.29964em;"><span></span></span></span></span></span></span><span>+</span><span><span style="margin-right:0.03148em;">k</span><span><span><span><span style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;"><span style="height:2.64444em;"></span><span>1</span></span></span><span>​</span></span><span><span style="height:0.29964em;"><span></span></span></span></span></span></span><span>+</span><span>⋯</span><span>=</span><span>n</span></span></span></span><span style="top:-2.9920285714285715em;"><span style="height:2.5em;"></span><span><span><span><span style="margin-right:0.03148em;">k</span><span><span><span><span style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;"><span style="height:2.64444em;"></span><span>0</span></span></span><span>​</span></span><span><span style="height:0.29964em;"><span></span></span></span></span></span></span><span>,</span><span><span style="margin-right:0.03148em;">k</span><span><span><span><span style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;"><span style="height:2.64444em;"></span><span>1</span></span></span><span>​</span></span><span><span style="height:0.29964em;"><span></span></span></span></span></span></span><span>,</span><span>…</span><span>&gt;</span><span>0</span></span></span></span></span><span>​</span></span><span><span style="height:0.5790571428571429em;"><span></span></span></span></span></span><span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.75218em;"><span></span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span>A</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span><span style="margin-right:0.03148em;">k</span><span><span><span><span style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.2501em;"><span></span></span></span></span></span></span><span><span>A</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span><span style="margin-right:0.03148em;">k</span><span><span><span><span style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.2501em;"><span></span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span>⋯</span></span></span></span></p>
</li>
</ol>
<h2 id="四则运算"> 四则运算</h2>
<ol>
<li>
<p>加法运算，符号：<code>+</code>，如：<code>$x+y=z$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></p>
</li>
<li>
<p>减法运算，符号：<code>-</code>，如：<code>$x-y=z$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></p>
</li>
<li>
<p>加减运算，符号：<code>\pm</code>，如：<code>$x \pm y=z$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>±</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></p>
</li>
<li>
<p>减甲运算，符号：<code>\mp</code>，如：<code>$x \mp y=z$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>∓</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></p>
</li>
<li>
<p>乘法运算，符号：<code>\times</code>，如：<code>$x \times y=z$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>×</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></p>
</li>
<li>
<p>点乘运算，符号：<code>\cdot</code>，如：<code>$x \cdot y=z$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.44445em;vertical-align:0em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>⋅</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></p>
</li>
<li>
<p>星乘运算，符号：<code>\ast</code>，如：<code>$x \ast y=z$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.46528em;vertical-align:0em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>∗</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></p>
</li>
<li>
<p>除法运算，符号：<code>\div</code>，如：<code>$x \div y=z$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>÷</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></p>
</li>
<li>
<p>斜法运算，符号：<code>/</code>，如：<code>$x/y=z$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>x</span><span>/</span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></p>
</li>
<li>
<p>分式表示，符号：<code>\frac{分子}{分母}</code>，如：<code>$\frac{x+y}{y+z}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.335547em;vertical-align:-0.481108em;"></span><span><span></span><span><span><span><span style="height:0.854439em;"><span style="top:-2.6550000000000002em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span>+</span><span style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span style="height:3em;"></span><span><span><span>x</span><span>+</span><span style="margin-right:0.03588em;">y</span></span></span></span></span><span>​</span></span><span><span style="height:0.481108em;"><span></span></span></span></span></span><span></span></span></span></span></span></p>
</li>
<li>
<p>分式表示，符号：<code>{分子} \voer {分母}</code>，如：<code>${x+y} \over {y+z}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.335547em;vertical-align:-0.481108em;"></span><span><span></span><span><span><span><span style="height:0.854439em;"><span style="top:-2.6550000000000002em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span>+</span><span style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span style="height:3em;"></span><span><span><span>x</span><span>+</span><span style="margin-right:0.03588em;">y</span></span></span></span></span><span>​</span></span><span><span style="height:0.481108em;"><span></span></span></span></span></span><span></span></span></span></span></span></p>
</li>
<li>
<p>绝对值表示，符号：<code>||</code>，如：<code>$|x+y|$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>∣</span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">y</span><span>∣</span></span></span></span></p>
</li>
</ol>
<h2 id="高级运算"> 高级运算</h2>
<ol>
<li>平均数运算，符号：<code>\overline{算式}</code>，如：<code>$\overline{xyz}$，</code>效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.825em;vertical-align:-0.19444em;"></span><span><span><span><span style="height:0.63056em;"><span style="top:-3em;"><span style="height:3em;"></span><span><span>x</span><span style="margin-right:0.04398em;">yz</span></span></span><span style="top:-3.55056em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span></span><span>​</span></span><span><span style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></li>
<li>开二次方运算，符号：<code>\sqrt</code>，如：<code>$\sqrt x$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.04em;vertical-align:-0.23972em;"></span><span><span><span><span style="height:0.8002800000000001em;"><span style="top:-3em;"><span style="height:3em;"></span><span style="padding-left:0.833em;">x</span></span><span style="top:-2.76028em;"><span style="height:3em;"></span><span style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span>​</span></span><span><span style="height:0.23972em;"><span></span></span></span></span></span></span></span></span></li>
<li>开方运算，符号：<code>\sqrt[开方数]{被开方数}</code>，如：<code>$\sqrt[3]{x+y}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.04em;vertical-align:-0.26055499999999987em;"></span><span><span><span><span><span style="height:0.6335540000000002em;"><span style="top:-2.811334em;"><span style="height:2.5em;"></span><span><span><span>3</span></span></span></span></span></span></span></span><span><span><span style="height:0.7794450000000002em;"><span style="top:-3em;"><span style="height:3em;"></span><span style="padding-left:0.833em;"><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.739445em;"><span style="height:3em;"></span><span style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span>​</span></span><span><span style="height:0.26055499999999987em;"><span></span></span></span></span></span></span></span></span></li>
<li>对数运算，符号：<code>\log</code>，如：<code>$\log(x)$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>lo<span style="margin-right:0.01389em;">g</span></span><span>(</span><span>x</span><span>)</span></span></span></span></li>
<li>极限运算，符号：<code>\lim</code>，如：<code>$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.2298399999999998em;vertical-align:-0.481108em;"></span><span><span>lim</span><span><span><span><span style="height:0.748732em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span>→</span><span>0</span></span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>x</span><span>→</span><span>∞</span></span></span></span></span><span>​</span></span><span><span style="height:0.383108em;"><span></span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span><span></span><span><span><span><span style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span style="height:3em;"></span><span><span><span>x</span></span></span></span></span><span>​</span></span><span><span style="height:0.481108em;"><span></span></span></span></span></span><span></span></span></span></span></span></span></li>
<li>极限运算，符号：<code>\displaystyle \lim</code>，如：<code>$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.176272em;vertical-align:-0.8804400000000001em;"></span><span><span><span><span style="height:1.2958319999999999em;"><span style="top:-2.382892em;margin-left:0em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span>→</span><span>0</span></span></span></span><span style="top:-3em;"><span style="height:3em;"></span><span><span>lim</span></span></span><span style="top:-3.89444em;margin-left:0em;"><span style="height:3em;"></span><span><span><span>x</span><span>→</span><span>∞</span></span></span></span></span><span>​</span></span><span><span style="height:0.853216em;"><span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span><span></span><span><span><span><span style="height:1.10756em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style="height:0.8804400000000001em;"><span></span></span></span></span></span><span></span></span></span></span></span></span></li>
<li>求和运算，符号：<code>\sum</code>，如：<code>$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.2854em;vertical-align:-0.481108em;"></span><span><span style="position:relative;top:-0.0000050000000000050004em;">∑</span><span><span><span><span style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span>→</span><span>0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>x</span><span>→</span><span>∞</span></span></span></span></span><span>​</span></span><span><span style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span><span></span><span><span><span><span style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span style="height:3em;"></span><span><span><span>x</span></span></span></span></span><span>​</span></span><span><span style="height:0.481108em;"><span></span></span></span></span></span><span></span></span></span></span></span></span></li>
<li>求和运算，符号：<code>\displaystyle \sum</code>，如：<code>$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:3.0546180000000005em;vertical-align:-1.403221em;"></span><span><span><span><span style="height:1.6513970000000002em;"><span style="top:-1.8828869999999998em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span>→</span><span>0</span></span></span></span><span style="top:-3.0500049999999996em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>x</span><span>→</span><span>∞</span></span></span></span></span><span>​</span></span><span><span style="height:1.403221em;"><span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span><span></span><span><span><span><span style="height:1.10756em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span>x</span></span></span></span><span>​</span></span><span><span style="height:0.8804400000000001em;"><span></span></span></span></span></span><span></span></span></span></span></span></span></li>
<li>积分运算，符号：<code>\int</code>，如：<code>$\int^{\infty}_{0}{xdx}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.215112em;vertical-align:-0.35582em;"></span><span><span style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span><span><span><span style="height:0.8592920000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>0</span></span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>∞</span></span></span></span></span><span>​</span></span><span><span style="height:0.35582em;"><span></span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span>d</span><span>x</span></span></span></span></span></li>
<li>积分运算，符号：<code>\displaystyle \int</code>，如：<code>$\displaystyle \int^{\infty}_{0}{xdx}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.326242em;vertical-align:-0.9119499999999999em;"></span><span><span style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span><span><span><span style="height:1.414292em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>0</span></span></span></span><span style="top:-3.8129000000000004em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>∞</span></span></span></span></span><span>​</span></span><span><span style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span>d</span><span>x</span></span></span></span></span></li>
<li>微分运算，符号：<code>\partial</code>，如：<code>$\frac{\partial x}{\partial y}$</code>，效果：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.3612159999999998em;vertical-align:-0.481108em;"></span><span><span></span><span><span><span><span style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span>x</span></span></span></span></span><span>​</span></span><span><span style="height:0.481108em;"><span></span></span></span></span></span><span></span></span></span></span></span></li>
<li>矩阵表示，符号：<code>\begin{matrix} \end{matrix}</code>，如：<code>$\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]$</code>，效果：<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \5 at position 38: …1 &amp;2 &amp;\cdots &amp;4\̲5̲ &amp;6 &amp;\cdots &amp;8\…'>\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]</span></li>
</ol>
<h2 id="逻辑运算"> 逻辑运算</h2>
<ol>
<li>等于运算，符号：<code>=</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
<li>大于运算，符号：<code>&gt;</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
<li>小于运算，符号：<code>&lt;</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
<li>大于等于运算，符号：<code>\geq</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>≥</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
<li>小于等于运算，符号：<code>\leq</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
<li>不等于运算，符号：<code>\neq</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span><span><span><span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span><span></span></span></span><span></span></span></span></span></span><span>=</span></span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
<li>不大于等于运算，符号：<code>\ngeq</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1.09657em;vertical-align:-0.30274em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>≱</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
<li>不大于等于运算，符号：<code>\not\geq</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span><span><span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span><span></span></span></span><span></span></span></span></span></span></span><span><span style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span>≥</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
<li>不小于等于运算，符号：<code>\nleq</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1.09657em;vertical-align:-0.30274em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>≰</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
<li>不小于等于运算，符号：<code>\not\leq</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span><span><span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span><span></span></span></span><span></span></span></span></span></span></span><span><span style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
<li>约等于运算，符号：<code>\approx</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.6775599999999999em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>≈</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
<li>恒定等于运算，符号：<code>\equiv</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.65819em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>≡</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span style="margin-right:0.04398em;">z</span></span></span></span></li>
</ol>
<h2 id="集合运算"> 集合运算</h2>
<ol>
<li>
<p>属于运算，符号：<code>\in</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span>∈</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>不属于运算，符号：<code>\notin</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span><span><span>∈</span></span><span><span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span><span>/</span><span style="margin-right:0.05555555555555555em;"></span></span></span><span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>不属于运算，符号：<code>\not\in</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span><span><span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span><span></span></span></span><span></span></span></span></span></span></span><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>∈</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>子集运算，符号：<code>\subset</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span>⊂</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>子集运算，符号：<code>\supset</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span>⊃</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>真子集运算，符号：<code>\subseteq</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span>⊆</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>非真子集运算，符号：<code>\subsetneq</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span>⊊</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>真子集运算，符号：<code>\supseteq</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span>⊇</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>非真子集运算，符号：<code>\supsetneq</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span>⊋</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>非子集运算，符号：<code>\not\subset</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span><span><span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span><span></span></span></span><span></span></span></span></span></span></span><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>⊂</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>非子集运算，符号：<code>\not\supset</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span><span><span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span><span></span></span></span><span></span></span></span></span></span></span><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>⊃</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>并集运算，符号：<code>\cup</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.55556em;vertical-align:0em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>∪</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>交集运算，符号：<code>\cap</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.55556em;vertical-align:0em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>∩</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>差集运算，符号：<code>\setminus</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>∖</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>同或运算，符号：<code>\bigodot</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.00001em;vertical-align:-0.25001em;"></span><span>x</span><span style="margin-right:0.16666666666666666em;"></span><span style="position:relative;top:-0.0000050000000000050004em;">⨀</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>同与运算，符号：<code>\bigotimes</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.00001em;vertical-align:-0.25001em;"></span><span>x</span><span style="margin-right:0.16666666666666666em;"></span><span style="position:relative;top:-0.0000050000000000050004em;">⨂</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>实数集合，符号：<code>\mathbb{R}</code>，如：<code>\mathbb{R}</code></p>
</li>
<li>
<p>自然数集合，符号：<code>\mathbb{Z}</code>，如：<code>\mathbb{Z}</code></p>
</li>
<li>
<p>空集，符号：<code>\emptyset</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.80556em;vertical-align:-0.05556em;"></span><span>∅</span></span></span></span></p>
</li>
</ol>
<h2 id="数学符号"> 数学符号</h2>
<ol>
<li>
<p>无穷，符号：<code>\infty</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>∞</span></span></span></span></p>
</li>
<li>
<p>虚数，符号：<code>\imath</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span></span></span></span></span></p>
</li>
<li>
<p>虚数，符号：<code>\jmath</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span></span></span></span></span></p>
</li>
<li>
<p>数学符号，符号<code>\hat{a}</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span><span><span><span style="height:0.69444em;"><span style="top:-3em;"><span style="height:3em;"></span><span>a</span></span><span style="top:-3em;"><span style="height:3em;"></span><span style="left:-0.25em;"><span>^</span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>数学符号，符号<code>\check{a}</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.62847em;vertical-align:0em;"></span><span><span><span><span style="height:0.62847em;"><span style="top:-3em;"><span style="height:3em;"></span><span>a</span></span><span style="top:-3em;"><span style="height:3em;"></span><span style="left:-0.25em;"><span>ˇ</span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>数学符号，符号<code>\breve{a}</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span><span><span><span style="height:0.69444em;"><span style="top:-3em;"><span style="height:3em;"></span><span>a</span></span><span style="top:-3em;"><span style="height:3em;"></span><span style="left:-0.25em;"><span>˘</span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>数学符号，符号<code>\tilde{a}</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6678599999999999em;vertical-align:0em;"></span><span><span><span><span style="height:0.6678599999999999em;"><span style="top:-3em;"><span style="height:3em;"></span><span>a</span></span><span style="top:-3.35em;"><span style="height:3em;"></span><span style="left:-0.25em;"><span>~</span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>数学符号，符号<code>\bar{a}</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.56778em;vertical-align:0em;"></span><span><span><span><span style="height:0.56778em;"><span style="top:-3em;"><span style="height:3em;"></span><span>a</span></span><span style="top:-3em;"><span style="height:3em;"></span><span style="left:-0.25em;"><span>ˉ</span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>矢量符号，符号<code>\vec{a}</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.714em;vertical-align:0em;"></span><span><span><span><span style="height:0.714em;"><span style="top:-3em;"><span style="height:3em;"></span><span>a</span></span><span style="top:-3em;"><span style="height:3em;"></span><span style="left:-0.2355em;"><span style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>数学符号，符号<code>\acute{a}</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span><span><span><span style="height:0.69444em;"><span style="top:-3em;"><span style="height:3em;"></span><span>a</span></span><span style="top:-3em;"><span style="height:3em;"></span><span style="left:-0.25em;"><span>ˊ</span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>数学符号，符号<code>\grave{a}</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span><span><span><span style="height:0.69444em;"><span style="top:-3em;"><span style="height:3em;"></span><span>a</span></span><span style="top:-3em;"><span style="height:3em;"></span><span style="left:-0.25em;"><span>ˋ</span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>数学符号，符号<code>\mathring{a}</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span><span><span><span style="height:0.69444em;"><span style="top:-3em;"><span style="height:3em;"></span><span>a</span></span><span style="top:-3em;"><span style="height:3em;"></span><span style="left:-0.375em;"><span>˚</span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>一阶导数符号，符号<code>\dot{a}</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66786em;vertical-align:0em;"></span><span><span><span><span style="height:0.66786em;"><span style="top:-3em;"><span style="height:3em;"></span><span>a</span></span><span style="top:-3em;"><span style="height:3em;"></span><span style="left:-0.13889em;"><span>˙</span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>二阶导数符号，符号<code>\ddot{a}</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66786em;vertical-align:0em;"></span><span><span><span><span style="height:0.66786em;"><span style="top:-3em;"><span style="height:3em;"></span><span>a</span></span><span style="top:-3em;"><span style="height:3em;"></span><span style="left:-0.25em;"><span>¨</span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>上箭头，符号：<code>\uparrow</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>↑</span></span></span></span></p>
</li>
<li>
<p>上箭头，符号：<code>\Uparrow</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>⇑</span></span></span></span></p>
</li>
<li>
<p>下箭头，符号：<code>\downarrow</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>↓</span></span></span></span></p>
</li>
<li>
<p>下箭头，符号：<code>\Downarrow</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>⇓</span></span></span></span></p>
</li>
<li>
<p>左箭头，符号：<code>\leftarrow</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.36687em;vertical-align:0em;"></span><span>←</span></span></span></span></p>
</li>
<li>
<p>左箭头，符号：<code>\Leftarrow</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.36687em;vertical-align:0em;"></span><span>⇐</span></span></span></span></p>
</li>
<li>
<p>右箭头，符号：<code>\rightarrow</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.36687em;vertical-align:0em;"></span><span>→</span></span></span></span></p>
</li>
<li>
<p>右箭头，符号：<code>\Rightarrow</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.36687em;vertical-align:0em;"></span><span>⇒</span></span></span></span></p>
</li>
<li>
<p>底端对齐的省略号，符号：<code>\ldots</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>n</span></span></span></span></p>
</li>
<li>
<p>中线对齐的省略号，符号：<code>\cdots</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span><span>x</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span><span>x</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>⋯</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1.061108em;vertical-align:-0.247em;"></span><span><span>x</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>竖直对齐的省略号，符号：<code>\vdots</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.53em;vertical-align:-0.03em;"></span><span><span>⋮</span><span style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></p>
</li>
<li>
<p>斜对齐的省略号，符号：<code>\ddots</code>，如：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.823em;vertical-align:0em;"></span><span>⋱</span></span></span></span></p>
</li>
</ol>
<h2 id="希腊字母"> 希腊字母</h2>
<table>
<thead>
<tr>
<th>字母</th>
<th>实现</th>
<th>字母</th>
<th>实现</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td><code>A</code></td>
<td>α</td>
<td><code>\alhpa</code></td>
</tr>
<tr>
<td>B</td>
<td><code>B</code></td>
<td>β</td>
<td><code>\beta</code></td>
</tr>
<tr>
<td>Γ</td>
<td><code>\Gamma</code></td>
<td>γ</td>
<td><code>\gamma</code></td>
</tr>
<tr>
<td>Δ</td>
<td><code>\Delta</code></td>
<td>δ</td>
<td><code>\delta</code></td>
</tr>
<tr>
<td>E</td>
<td><code>E</code></td>
<td>ϵ</td>
<td><code>\epsilon</code></td>
</tr>
<tr>
<td>Z</td>
<td><code>Z</code></td>
<td>ζ</td>
<td><code>\zeta</code></td>
</tr>
<tr>
<td>H</td>
<td><code>H</code></td>
<td>η</td>
<td><code>\eta</code></td>
</tr>
<tr>
<td>Θ</td>
<td><code>\Theta</code></td>
<td>θ</td>
<td><code>\theta</code></td>
</tr>
<tr>
<td>I</td>
<td><code>I</code></td>
<td>ι</td>
<td><code>\iota</code></td>
</tr>
<tr>
<td>K</td>
<td><code>K</code></td>
<td>κ</td>
<td><code>\kappa</code></td>
</tr>
<tr>
<td>Λ</td>
<td><code>\Lambda</code></td>
<td>λ</td>
<td><code>\lambda</code></td>
</tr>
<tr>
<td>M</td>
<td><code>M</code></td>
<td>μ</td>
<td><code>\mu</code></td>
</tr>
<tr>
<td>N</td>
<td><code>N</code></td>
<td>ν</td>
<td><code>\nu</code></td>
</tr>
<tr>
<td>Ξ</td>
<td><code>\Xi</code></td>
<td>ξ</td>
<td><code>\xi</code></td>
</tr>
<tr>
<td>O</td>
<td><code>O</code></td>
<td>ο</td>
<td><code>\omicron</code></td>
</tr>
<tr>
<td>Π</td>
<td><code>\Pi</code></td>
<td>π</td>
<td><code>\pi</code></td>
</tr>
<tr>
<td>P</td>
<td><code>P</code></td>
<td>ρ</td>
<td><code>\rho</code></td>
</tr>
<tr>
<td>Σ</td>
<td><code>\Sigma</code></td>
<td>σ</td>
<td><code>\sigma</code></td>
</tr>
<tr>
<td>T</td>
<td><code>T</code></td>
<td>τ</td>
<td><code>\tau</code></td>
</tr>
<tr>
<td>Υ</td>
<td><code>\Upsilon</code></td>
<td>υ</td>
<td><code>\upsilon</code></td>
</tr>
<tr>
<td>Φ</td>
<td><code>\Phi</code></td>
<td>ϕ</td>
<td><code>\phi</code></td>
</tr>
<tr>
<td>X</td>
<td><code>X</code></td>
<td>χ</td>
<td><code>\chi</code></td>
</tr>
<tr>
<td>Ψ</td>
<td><code>\Psi</code></td>
<td>ψ</td>
<td><code>\psi</code></td>
</tr>
<tr>
<td>Ω</td>
<td><code>\v</code></td>
<td>ω</td>
<td><code>\omega</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>03-Markdown 列表</title>
      <link>https://book.bornforthi.com/zh/column/md/threeMarkdown_list/</link>
      <guid>https://book.bornforthi.com/zh/column/md/threeMarkdown_list/</guid>
      <source url="https://book.bornforthi.com/rss.xml">03-Markdown 列表</source>
      <category>Markdown 基础</category>
      <pubDate>Sat, 16 Oct 2021 13:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p>
<div><pre><code><span>*</span> 第一项
<span>*</span> 第二项
<span>*</span> 第三项

<span>+</span> 第一项
<span>+</span> 第二项
<span>+</span> 第三项


<span>-</span> 第一项
<span>-</span> 第二项
<span>-</span> 第三项
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>显示结果如下：</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如：</p>
<div><pre><code><span>1.</span> 第一项
<span>2.</span> 第二项
<span>3.</span> 第三项
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>显示结果如下：</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h2 id="列表嵌套"> 列表嵌套</h2>
<p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p>
<div><pre><code>1. 第一项：
    - 第一项嵌套的第一个元素
    - 第一项嵌套的第二个元素
2. 第二项：
    - 第二项嵌套的第一个元素
    - 第二项嵌套的第二个元素
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>显示结果如下：</p>
<ol>
<li>第一项：
<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：
<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>03-本网站使用视频和音频格式</title>
      <link>https://book.bornforthi.com/zh/column/md/moveandmuisc/</link>
      <guid>https://book.bornforthi.com/zh/column/md/moveandmuisc/</guid>
      <source url="https://book.bornforthi.com/rss.xml">03-本网站使用视频和音频格式</source>
      <category>Markdown 基础</category>
      <pubDate>Fri, 29 Oct 2021 18:10:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="视频"> 视频</h2>
<div><pre><code><span><span><span>&lt;</span>video</span> <span>id</span><span><span>=</span><span>"</span>video<span>"</span></span> <span>controls</span><span><span>=</span><span>"</span><span>"</span></span> <span>preload</span><span><span>=</span><span>"</span>none<span>"</span></span> <span>height</span><span><span>=</span>400</span> <span>width</span><span><span>=</span>850</span><span>></span></span>
      <span><span><span>&lt;</span>source</span> <span>id</span><span><span>=</span><span>"</span>mp4<span>"</span></span> <span>src</span><span><span>=</span><span>"</span>./Final.mp4<span>"</span></span> <span>type</span><span><span>=</span><span>"</span>video/mp4<span>"</span></span><span>></span></span>
      <span><span><span>&lt;/</span>video</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><video id="video" controls="" preload="none" height=400 width=850>
      <source id="mp4" src="./Final.mp4" type="video/mp4">
      </video>
<h2 id="音频"> 音频</h2>
<div><pre><code><span><span><span>&lt;</span>audio</span> <span>id</span><span><span>=</span><span>"</span>audio<span>"</span></span> <span>controls</span><span><span>=</span><span>"</span><span>"</span></span> <span>preload</span><span><span>=</span><span>"</span>none<span>"</span></span><span>></span></span>
      <span><span><span>&lt;</span>source</span> <span>id</span><span><span>=</span><span>"</span>mp3<span>"</span></span> <span>src</span><span><span>=</span><span>"</span>./aiyc.mp3<span>"</span></span><span>></span></span>
      <span><span><span>&lt;/</span>audio</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><audio id="audio" controls="" preload="none">
      <source id="mp3" src="./aiyc.mp3">
      </audio>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Python 办公自动化</title>
      <link>https://book.bornforthi.com/zh/column/python/Officeautomation/</link>
      <guid>https://book.bornforthi.com/zh/column/python/Officeautomation/</guid>
      <source url="https://book.bornforthi.com/rss.xml">Python 办公自动化</source>
      <pubDate>Fri, 29 Oct 2021 15:43:34 GMT</pubDate>
      <content:encoded><![CDATA[<p>您好，我是悦创，很高兴能和您一起学习 Python 办公自动化。</p>
<p>恭喜你在搞定 Python 基础内容之后，来到办公自动化的课程，请确保你对 Python 的数据结构、条件、循环、函数等这些基础知识已经掌握得不错，本课程中对于基本的 Python 语法不会做过多的讲解。</p>
<p>请记得跟流沙团队说一声，让我们把你加到微信群中，方便为你提供其他服务哦。</p>
<h1 id="_1-课程概述"> 1. 课程概述</h1>
<p>所谓<strong>办公自动化</strong>，是将计算机技术使用到办公过程中，节省人工重复劳动，提高工作效率的一种现代化工作方式。</p>
<p>在日常的工作当中，你接触最多的办公软件，想必就是 office 套装中的那些工具了：Excel、Word、PPT。</p>
<p>表格整理、统计总结、文字处理，也许大量重复繁琐的工作正在耗费你的青春，你希望使用工具，更好的驱使电脑完成重复的劳动。</p>
<p>这门课程就是为了解放自我而设计。流沙团队为你讲述通过 Python 语言，如何让办公变得更为快捷和高效。</p>
<p>借助 Python 世界丰富的包资源，除了可以便捷的处理 office 文档，对于其它办公领域的工作，比如文件整理、电子邮件处理、Web 信息爬取、自动化消息处理等等，都可以手到擒来。</p>
<p>老师以日常工作中的常见需求为基础，结合实际案例为你编写了本门课程。期待在学习之后，可以让你掌握事半功倍的办公技巧：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>章节</th>
<th>知识点</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>天才老师防作弊</td>
<td>自动化工具的构建</td>
</tr>
<tr>
<td>2</td>
<td>寻找VIP</td>
<td>Excel 文件读取、读取工作表、读取单元格、工作表切片</td>
</tr>
<tr>
<td>3</td>
<td>自动合并周报</td>
<td>Excel 文件写入、操作工作表、修改单元格</td>
</tr>
<tr>
<td>4</td>
<td>自动生成销售英雄榜</td>
<td>Excel 中的字体、公式、行列宽度调整、合并及拆分、图表绘制等</td>
</tr>
<tr>
<td>5</td>
<td>文件整理自动化工具</td>
<td>文件及目录操作、压缩及解压</td>
</tr>
<tr>
<td>6</td>
<td>自动批量生成邀请函</td>
<td>Word 文档读写</td>
</tr>
<tr>
<td>7</td>
<td>自动合成文档、添加水印的小能手</td>
<td>PDF 批量生成、页面读取、合并、叠加、加密和解密</td>
</tr>
<tr>
<td>8</td>
<td>自动发送通知和检查回复的小秘书</td>
<td>电子邮件处理</td>
</tr>
<tr>
<td>9</td>
<td>自动抽取页面信息的工具</td>
<td>使用 requests 做网页下载、BeautifulSoup 进行信息提取</td>
</tr>
<tr>
<td>10</td>
<td>网页交互操作自动化工具</td>
<td>selenium 的使用</td>
</tr>
<tr>
<td>11</td>
<td>站巨人之肩上天揽月</td>
<td>以 API 方式使用网络服务</td>
</tr>
<tr>
<td>12</td>
<td>自动识别图片中的表格</td>
<td>以 SDK 方式使用网络服务</td>
</tr>
<tr>
<td>13</td>
<td>自动发送微信消息</td>
<td>操作键盘和鼠标</td>
</tr>
</tbody>
</table>
<h2 id="_1-1-学习环境"> 1.1 学习环境</h2>
<p>阅读此文章搭建：<a href="https://www.aiyc.top/772.html" target="_blank" rel="noopener noreferrer">https://www.aiyc.top/772.html</a></p>
<p>在代码执行错误时，如果遇到不会的问题，可以点加流沙团队微信，群友就可以看到你的代码帮你解答了。当然，流沙也支持付费答疑。</p>
<h2 id="_1-2-学习方法"> 1.2 学习方法</h2>
<p>Python 办公自动化是一门实用性非常强的课程。在这里，我们将 Python 视为一个实现自动化处理的工具，课程主要聚焦如何正确的使用这个工具来完成工作需求。</p>
<p>你不需要对 Python 实现某个功能的具体原理细节了解太多，只需要知道如何正确的使用，解决问题就可以。</p>
<p>在学习的过程中，坚持<strong>三多</strong>原则（多想哪些工作可以通过程序自动化解决、多查资料实现想法、根据实际需求多练习），一定能娴熟的掌握 Python 工具，让你在工作中如虎添翼。</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Python 零基础快速入门</title>
      <link>https://book.bornforthi.com/zh/column/python/base/</link>
      <guid>https://book.bornforthi.com/zh/column/python/base/</guid>
      <source url="https://book.bornforthi.com/rss.xml">Python 零基础快速入门</source>
      <pubDate>Tue, 02 Nov 2021 02:28:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>您好，我是悦创。</p>
<p>希望这个专栏在帮助你顺利掌握 Python 的同时，也能让读者领悟学习任何一门语言的高效方法。</p>
<p>当你打开了这篇文章，我知道你一定是个饱含学习热情的人。现在你可能对 Python 有一些想法，想要让它为你所用，但同时可能有一丝犹豫。你不知道这个专栏的深度适不适合你。放心，无论你曾经是否有编程经验，学习 Python 这个专栏都是合适你的。另外你可能会想，Python 是不是一个好的选择？</p>
<h1 id="_1-python-是不是一个好选择"> 1. Python 是不是一个好选择</h1>
<p>如果你从未有过编程经验，无论你是想将编程作为业余爱好，还是只想体验编程思维，或者是想以此为开端今后从事软件开发工作，从 Python 入手学习编程都是个不错的选择。</p>
<p>对于新手而言 Python 的优势有：</p>
<ol>
<li>上手容易</li>
<li>第三方库众多无所不不包</li>
<li>相较于 C / C++ / Java 等语言有更强的表现力，这也意味着实现相同的功能需要的代码量更少</li>
<li>上面的 2. 和 3. 可以从侧面说明 Python 有着很高的开发效率</li>
<li>和其他解释型语言一样，可交互式地执行代码，便于快速试验</li>
</ol>
<p>同样的，如果你有编程经验，并且想在软件开发这个领域继续深入发展，通过学习 Python 来拓展自己的技能和知识面也不失为一个好的选择。</p>
<p>有些读者在学习一门新的程序语言时，往往会很谨慎，费尽心思想找到最好的那一门语言。觉的语言有优劣之分，在完美主义心理理的驱使下要学最好的。另一方面觉得学习一门语言会付出很多努力，入错了门那沉没成本就太高了。其实大可不必如此。</p>
<p>对于程序语言而言，很难断定究竟谁是最好的。历史上程序语言有很多，经过时间淘洗留下来的并且还在广泛使用的，自然有其价值。虽然就语言设计而言，各个程序语言间可能存在一些设计上的优劣，但每个语言都有其独有的优势和擅长的应用场景。</p>
<p>想找出最好的那门语言其实也是没必要的，不能指望自己的整个职业生涯可以靠一门语言一招鲜吃遍天。程序员的职业生涯中会因为很多原因而需要学习新的语言，可能是因为你换了公司或部门，也可能你的所在的团队需要应对新的场景。</p>
<p>每个程序员都应该主动去学习多门语言，去感受多种不同语言背后的思想，而 Python 是你应该去学习的语言之一。Python 可能是目前市面上使用场景最广泛的语言，普遍应用于数据科学，机器学习，Web 开发，爬虫，自动化运维，自动化测试等领域。并且 Python 也具备多样的编程范式，如过程式，面向对象，以及一些函数式特性。面对着这样一个多面手，即使眼前暂无需要，但在日后终究会有好处，更何况艺多不压身是吧。</p>
<h1 id="_2-python-未来潜力如何"> 2. Python 未来潜力如何</h1>
<p>如果我们从语言易用性，成熟度，社区规模，典型应用场景，以及衍生的一系列技术栈等角度来看，Python 的表现是很优秀的。近年来的热门领域，如机器学习，数据科学，Python 也有着举足轻重的地位。加之越来越多的国内外高校开始将 Python 作为编程入门教学语言，Python 的使用基数在持续扩大。在笔者看来，Python 在未来还会有一番天地。</p>
<h1 id="_3-python-2-or-python-3-亦或者是-3-10"> 3. Python 2 or Python 3 亦或者是 3.10</h1>
<p>在过去的很长一段时间中，学习 Python 的人常常在 Python 2 和 Python 3 版本（当然现在已经有了 3.10）间陷入选择困难。</p>
<p>因为这两个版本存在着较大的不兼容，而 Python 2 由于历史更加悠久所以积累的第三方库要比 Python 3 多很多，同时由于将代码由 Python 2 迁移到 Python 3 不是一件容易的事，所以在 Python 3 发布后几年时间⾥，大家并没有太大动力使用这个新的版本，直接导致 Python 2 和 Python 3 在过去几年间割裂得十分严重。</p>
<p>但是时间已经来到了了 2021 年，大量的代码从 Python 2 版本迁移到了 Python 3，Python 官方也在2020 年停止维护 Python 2 版本。所以 Python 2 和 Python 3 的选择已不再是个问题，读者朋友也不必再纠结怎么选择，请直接选 Python 3 吧，我也将使用 Python 3 作为教学版本。</p>
<h1 id="_4-开始-python-之旅"> 4. 开始 Python 之旅</h1>
<p>好了，主意一旦拿定就算是扬起了帆，我们该起航了，Python 之旅正式开始。</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>02-Markdown 段落</title>
      <link>https://book.bornforthi.com/zh/column/md/twoMarkdown_paragraph/</link>
      <guid>https://book.bornforthi.com/zh/column/md/twoMarkdown_paragraph/</guid>
      <source url="https://book.bornforthi.com/rss.xml">02-Markdown 段落</source>
      <category>Markdown 基础</category>
      <pubDate>Mon, 18 Oct 2021 12:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行直接回车就好。</strong></p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/image-20211027172857577.png" alt="image-20211027172857577" /></p>
<h2 id="字体"> 字体</h2>
<p>Markdown 可以使用以下几种字体：</p>
<div><pre><code><span><span>*</span><span>斜体文本</span><span>*</span></span>
<span><span>_</span><span>斜体文本</span><span>_</span></span>
<span><span>**</span><span>粗体文本</span><span>**</span></span>
<span><span>__</span><span>粗体文本</span><span>__</span></span>
<span><span>**</span><span><span><span>*</span><span>粗斜体文本</span><span>*</span></span></span><span>**</span></span>
<span><span>__</span><span><span><span>_</span><span>粗斜体文本</span><span>_</span></span></span><span>__</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>显示效果如下所示：</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/20211027193424.png" alt="" /></p>
<h2 id="分隔线"> 分隔线</h2>
<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<div><pre><code><span>***</span>

<span>* * *</span>

<span>*****</span>

<span>- - -</span>

<span>----------</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>显示效果如下所示：</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/20211027204813.png" alt="" /></p>
<h2 id="删除线"> 删除线</h2>
<p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，实例如下：</p>
<div><pre><code>aiyc.top

book.bornforthi.com

<span><span>~~</span><span>baidu.com</span><span>~~</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>显示效果如下所示：</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/image-20211027211907431.png" alt="image-20211027211907431" /></p>
<h2 id="下划线"> 下划线</h2>
<p>下划线可以通过 HTML 的 <strong><u></strong> 标签来实现：</p>
<div><pre><code><span><span><span>&lt;</span>u</span><span>></span></span>带下划线文本<span><span><span>&lt;/</span>u</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><p>显示效果如下所示：</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/image-20211027212240861.png" alt="image-20211027212240861" /></p>
<h2 id="脚注"> 脚注</h2>
<p>脚注是对文本的补充说明。</p>
<p>Markdown 脚注的格式如下:</p>
<div><pre><code>[^要注明的文本]
</code></pre>
<div><span>1</span><br></div></div><p>以下实例演示了脚注的用法：</p>
<div><pre><code>创建脚注格式类似这样 [^RUNOOB]。

<span><span>[</span><span>^RUNOOB</span><span>]</span><span>:</span> 流沙团队</span> -- 一股无形的力量，学的不仅是技术，更是梦想！！！
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>演示效果如下：</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/image-20211027212704519.png" alt="image-20211027212704519" /></p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://gitee.com/huangjiabaoaiyc/image/raw/master/image-20211027172857577.png" type="image/png"/>
    </item>
    <item>
      <title>第1关 天才老师防作弊</title>
      <link>https://book.bornforthi.com/zh/column/python/Officeautomation/Thefirstlevelgeniusteachertopreventcheating/</link>
      <guid>https://book.bornforthi.com/zh/column/python/Officeautomation/Thefirstlevelgeniusteachertopreventcheating/</guid>
      <source url="https://book.bornforthi.com/rss.xml">第1关 天才老师防作弊</source>
      <category>Markdown 基础</category>
      <pubDate>Sat, 30 Oct 2021 12:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<h2 id="_1-3-知识结构"> 1.3 知识结构</h2>
<ul>
<li>需求描述</li>
<li>试卷生成（提取 provinces 和 options、创建试卷、创建答案）</li>
<li>生成答案迥异（jiǒng yì）的试卷</li>
</ul>
<h1 id="_2-需求描述"> 2. 需求描述</h1>
<p>小悦在日常的工作中，遇到过这样的需求：<strong>考察学员或者公司新员工的技术能力。</strong></p>
<p><strong>出一份考题让被考察者完成是一个最常用的方法。</strong></p>
<p>在本文中，请你跟着老师一起，用 Python 自动化地生成一份简单的地理试卷。这份试卷由 34 道选择题组成，题目形式都类似如下：</p>
<ol>
<li>河北省的省会是哪里？</li>
</ol>
<p>A. 北京
B. 郑州
C. 石家庄
D. 张家口</p>
<h2 id="_2-1-试卷生成"> 2.1 试卷生成</h2>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110300054343.png" alt="image.png" />
试卷生成的工具以一个省与省会名的对应字典作为输入：</p>
<div><pre><code>capitals <span>=</span> <span>{</span><span>'北京市'</span><span>:</span> <span>'北京'</span><span>,</span> <span>'天津市'</span><span>:</span> <span>'天津'</span><span>,</span> <span>'上海市'</span><span>:</span> <span>'上海'</span><span>,</span> <span>'重庆市'</span><span>:</span> <span>'重庆'</span><span>,</span>
            <span>'河北省'</span><span>:</span> <span>'石家庄'</span><span>,</span> <span>'山西省'</span><span>:</span> <span>'太原'</span><span>,</span> <span>'陕西省'</span><span>:</span> <span>'西安'</span><span>,</span> <span>'山东省'</span><span>:</span> <span>'济南'</span><span>,</span>
            <span>'河南省'</span><span>:</span> <span>'郑州'</span><span>,</span> <span>'辽宁省'</span><span>:</span> <span>'沈阳'</span><span>,</span> <span>'吉林省'</span><span>:</span> <span>'长春'</span><span>,</span> <span>'黑龙江省'</span><span>:</span> <span>'哈尔滨'</span><span>,</span>
            <span>'江苏省'</span><span>:</span> <span>'南京'</span><span>,</span> <span>'浙江省'</span><span>:</span> <span>'杭州'</span><span>,</span> <span>'安徽省'</span><span>:</span> <span>'合肥'</span><span>,</span> <span>'江西省'</span><span>:</span> <span>'南昌'</span><span>,</span>
            <span>'福建省'</span><span>:</span> <span>'福州'</span><span>,</span> <span>'湖北省'</span><span>:</span> <span>'武汉'</span><span>,</span> <span>'湖南省'</span><span>:</span> <span>'长沙'</span><span>,</span> <span>'四川省'</span><span>:</span> <span>'成都'</span><span>,</span>
            <span>'贵州省'</span><span>:</span> <span>'贵阳'</span><span>,</span> <span>'云南省'</span><span>:</span> <span>'昆明'</span><span>,</span> <span>'广东省'</span><span>:</span> <span>'广州'</span><span>,</span> <span>'海南省'</span><span>:</span> <span>'海口'</span><span>,</span>
            <span>'甘肃省'</span><span>:</span> <span>'兰州'</span><span>,</span> <span>'青海省'</span><span>:</span> <span>'西宁'</span><span>,</span> <span>'台湾省'</span><span>:</span> <span>'台北'</span><span>,</span> <span>'内蒙古自治区'</span><span>:</span> <span>'呼和浩特'</span><span>,</span>
            <span>'新疆维吾尔自治区'</span><span>:</span> <span>'乌鲁木齐'</span><span>,</span> <span>'西藏自治区'</span><span>:</span> <span>'拉萨'</span><span>,</span> <span>'广西壮族自治区'</span><span>:</span> <span>'南宁'</span><span>,</span>
            <span>'宁夏回族自治区'</span><span>:</span> <span>'银川'</span><span>,</span> <span>'香港特别行政区'</span><span>:</span> <span>'香港'</span><span>,</span> <span>'澳门特别行政区'</span><span>:</span> <span>'澳门'</span><span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>我们要完成的这个工具需要做三件事情：</p>
<ol>
<li>抽取出 capitals 中的省名（key），组成一个列表 provinces。</li>
<li>为每个 provinces 中的元素生成对应的题目选项，放置到列表 options 中。选项由城市名组成，其中有一个选项是正确答案，另外三个从其它城市中随机抽取。</li>
<li>根据第1、2 步生成的 provinces 和 options，生成试卷以及试卷结果并保存到文件。</li>
</ol>
<p><strong>也许只用语言描述有些抽象，我们用一张表来展视要构建的 provinces 和 options。</strong></p>
<table>
<thead>
<tr>
<th>元素索引</th>
<th>provinces</th>
<th>options</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>北京市</td>
<td>[拉萨,北京,海口,西宁]</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>n</td>
<td>河北省</td>
<td>[石家庄,银川, 贵阳, 哈尔滨]</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<ul>
<li>provinces 是一个一维列表，每个元素是一个省的名字</li>
<li>options 是一个二维列表，列表中的每个元素也是列表，由四个城市名组成，其中有一个城市是 provinces 中对应省的省会。</li>
</ul>
<p>这样的两个列表一旦构建出来，生成试卷就会变得很简单，只需要从 0 到 33 遍历两个列表中的每个元素，分别取出省份名字以及城市选项名字，省份名字用在题面上，而城市选项用在选项上，就能正确输出结果了。</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110300050558.gif" alt="c43ea65545f7973c743fe8fea45e4296.gif" /></p>
<p>我们按照这个思路，分两步构建试卷。</p>
<h2 id="_2-2-提取-provinces-和-options"> 2.2 提取 provinces 和 options</h2>
<p>capitals 这个字典中，所有元素的 key 就是我们想要的省份名字，我们可以将它们提取出来，放到列表 provinces 中。</p>
<div><pre><code>capitals <span>=</span> <span>{</span><span>'北京市'</span><span>:</span> <span>'北京'</span><span>,</span> <span>'天津市'</span><span>:</span> <span>'天津'</span><span>,</span> <span>'上海市'</span><span>:</span> <span>'上海'</span><span>,</span> <span>'重庆市'</span><span>:</span> <span>'重庆'</span><span>,</span>
            <span>'河北省'</span><span>:</span> <span>'石家庄'</span><span>,</span> <span>'山西省'</span><span>:</span> <span>'太原'</span><span>,</span> <span>'陕西省'</span><span>:</span> <span>'西安'</span><span>,</span> <span>'山东省'</span><span>:</span> <span>'济南'</span><span>,</span>
            <span>'河南省'</span><span>:</span> <span>'郑州'</span><span>,</span> <span>'辽宁省'</span><span>:</span> <span>'沈阳'</span><span>,</span> <span>'吉林省'</span><span>:</span> <span>'长春'</span><span>,</span> <span>'黑龙江省'</span><span>:</span> <span>'哈尔滨'</span><span>,</span>
            <span>'江苏省'</span><span>:</span> <span>'南京'</span><span>,</span> <span>'浙江省'</span><span>:</span> <span>'杭州'</span><span>,</span> <span>'安徽省'</span><span>:</span> <span>'合肥'</span><span>,</span> <span>'江西省'</span><span>:</span> <span>'南昌'</span><span>,</span>
            <span>'福建省'</span><span>:</span> <span>'福州'</span><span>,</span> <span>'湖北省'</span><span>:</span> <span>'武汉'</span><span>,</span> <span>'湖南省'</span><span>:</span> <span>'长沙'</span><span>,</span> <span>'四川省'</span><span>:</span> <span>'成都'</span><span>,</span>
            <span>'贵州省'</span><span>:</span> <span>'贵阳'</span><span>,</span> <span>'云南省'</span><span>:</span> <span>'昆明'</span><span>,</span> <span>'广东省'</span><span>:</span> <span>'广州'</span><span>,</span> <span>'海南省'</span><span>:</span> <span>'海口'</span><span>,</span>
            <span>'甘肃省'</span><span>:</span> <span>'兰州'</span><span>,</span> <span>'青海省'</span><span>:</span> <span>'西宁'</span><span>,</span> <span>'台湾省'</span><span>:</span> <span>'台北'</span><span>,</span> <span>'内蒙古自治区'</span><span>:</span> <span>'呼和浩特'</span><span>,</span>
            <span>'新疆维吾尔自治区'</span><span>:</span> <span>'乌鲁木齐'</span><span>,</span> <span>'西藏自治区'</span><span>:</span> <span>'拉萨'</span><span>,</span> <span>'广西壮族自治区'</span><span>:</span> <span>'南宁'</span><span>,</span>
            <span>'宁夏回族自治区'</span><span>:</span> <span>'银川'</span><span>,</span> <span>'香港特别行政区'</span><span>:</span> <span>'香港'</span><span>,</span> <span>'澳门特别行政区'</span><span>:</span> <span>'澳门'</span><span>}</span>

<span># 提取 capitals 变量中所有元素的 key 值，组成新的列表变量 provinces</span>
provinces <span>=</span> 
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><details><summary>想想怎么写，先自己写一下，然后点开看看，我提供的代码！</summary>
<p>看下老师的方法：</p>
<div><pre><code>provinces <span>=</span> <span>list</span><span>(</span>capitals<span>.</span>keys<span>(</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div></details>
<p>接下来，为每道题生成答案。像之前构想的那样，用二维列表变量 <code>options</code> 存储答案选项，<code>options</code> 的每个元素，是由一道题中4个备选项组成的列表。</p>
<p>对于每道题目的选项构建，是这个项目最困难的环节，跟着老师思路，我们一步步捋：</p>
<ol>
<li>
<p>对于某个确定的省份，从 <code>capitals</code> 中获取这个省份对应的正确省会名字，把它存储到变量 <code>right_answer</code> 中。</p>
</li>
<li>
<p>从 <code>capitals</code> 中，获取所有城市的名字，然后将其中是正确答案的那个剔除掉，剩下一个全部由错误省会名字组成的变量 <code>wrong_answer</code> 。下面动画表现的是当正确答案是<strong>昆明</strong>时的情形。</p>
</li>
</ol>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110301803522.gif" alt="" /></p>
<ol start="3">
<li>从<code>wrong_answer</code>中随机挑选出3个名字，与第一步生成的<code>right_answer</code>一同组成由4个元素组成的选项。</li>
</ol>
<details><summary>在给你正式代码前，我给你补充点知识点：</summary>
<div><pre><code>In <span>[</span><span>1</span><span>]</span><span>:</span> <span>from</span> faker <span>import</span> Faker

In <span>[</span><span>2</span><span>]</span><span>:</span> faker <span>=</span> Faker<span>(</span><span>)</span>

In <span>[</span><span>3</span><span>]</span><span>:</span> name_lst <span>=</span> <span>[</span><span>]</span>

In <span>[</span><span>4</span><span>]</span><span>:</span> <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>10</span><span>)</span><span>:</span>
   <span>.</span><span>.</span><span>.</span><span>:</span>     name_lst<span>.</span>append<span>(</span>faker<span>.</span>name<span>(</span><span>)</span><span>)</span>
   <span>.</span><span>.</span><span>.</span><span>:</span>

In <span>[</span><span>5</span><span>]</span><span>:</span> name_lst
Out<span>[</span><span>5</span><span>]</span><span>:</span>
<span>[</span><span>'Jonathan Kemp'</span><span>,</span>
 <span>'Shannon Moore'</span><span>,</span>
 <span>'Desiree Vaughan'</span><span>,</span>
 <span>'Christina Allen'</span><span>,</span>
 <span>'Jamie Petty'</span><span>,</span>
 <span>'Bonnie Green'</span><span>,</span>
 <span>'Mrs. Kristina Hamilton'</span><span>,</span>
 <span>'Lisa Harris'</span><span>,</span>
 <span>'Richard Hicks'</span><span>,</span>
 <span>'Natalie Long'</span><span>]</span>

In <span>[</span><span>6</span><span>]</span><span>:</span> <span>import</span> random

In <span>[</span><span>7</span><span>]</span><span>:</span> r <span>=</span> random<span>.</span>sample<span>(</span>name_lst<span>,</span> <span>3</span><span>)</span>

In <span>[</span><span>8</span><span>]</span><span>:</span> r
Out<span>[</span><span>8</span><span>]</span><span>:</span> <span>[</span><span>'Shannon Moore'</span><span>,</span> <span>'Christina Allen'</span><span>,</span> <span>'Jonathan Kemp'</span><span>]</span>

In <span>[</span><span>9</span><span>]</span><span>:</span> r <span>=</span> random<span>.</span>sample<span>(</span>name_lst<span>,</span> <span>3</span><span>)</span>

In <span>[</span><span>10</span><span>]</span><span>:</span> r
Out<span>[</span><span>10</span><span>]</span><span>:</span> <span>[</span><span>'Lisa Harris'</span><span>,</span> <span>'Mrs. Kristina Hamilton'</span><span>,</span> <span>'Desiree Vaughan'</span><span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div></details>
<p>将以上需求翻译成代码实现，如以下这样：</p>
<div><pre><code><span>import</span> random

<span>def</span> <span>generate_options</span><span>(</span>index<span>)</span><span>:</span>
	<span># generate_options 函数，根据输入的省份编号 index，生成对应的答案选项。</span>
	<span># 1. 从 capitals 中获取 index 这个编号对应的省份的省会名字，存到 right_answer 变量中。</span>
	right_answer <span>=</span> capitals<span>[</span>provinces<span>[</span>index<span>]</span><span>]</span>
	<span># 2. 从 capitals 中获取所有城市名字，并剔除正确的答案，构建错误省会名组成的列表，</span>
	<span># 存到变量 wrong_answer 中。</span>
	wrong_answer <span>=</span> <span>list</span><span>(</span>capitals<span>.</span>values<span>(</span><span>)</span><span>)</span>
	<span>del</span> wrong_answer<span>[</span>index<span>]</span>
	<span># 3. 从 wrong_answer 中随机挑选 3 个名字，并与 right_answer 一同组成由4个元素组成的选项</span>
	wrong_answer <span>=</span> random<span>.</span>sample<span>(</span>wrong_answer<span>,</span> <span>3</span><span>)</span>
	current_options <span>=</span> <span>[</span>right_answer<span>]</span> <span>+</span> wrong_answer
	<span># 将选项中元素的顺序打乱</span>
	random<span>.</span>shuffle<span>(</span>current_options<span>)</span>
	<span># 用列表结构返回第 index 个省的答案选项</span>
	<span>return</span> current_options
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>老师将以上所述3个步骤封装到了函数 <code>generate_options()</code> 中。这个函数接收传入参数 <code>index</code> ，用于指定要生成备选项的省份编号。</p>
<p>在第1步中，使用 <code>provinces[index]</code> 即获取了 <code>index</code> 对应的省的名字。然后，将这个名字作为 <code>capitals</code> 字典的 key，读取 <code>capitals[provinces[index]]</code> 就得到省会城市名，将它赋值给 <code>right_answer</code>。</p>
<p>在第2步中，使用 <code>capitals.values()</code> 读取 <code>capitals</code> 的所有城市名，再将它转成列表类型，赋值给 <code>wrong_answer</code> 变量。</p>
<p>这时，<code>wrong_answer</code>中还包含了正确选项，因此再使用 <code>del wrong_answer[index]</code> 将 <code>woring_answer</code> 中的正确答案城市名剔除掉。</p>
<p>第3步，老师使用了 Python 的 <strong>random</strong> 模块的两个重要功能： <code>sample()</code> 和 <code>shuffle()</code> 。</p>
<p><code>sample()</code> 可以实现从一个候选集中随机挑选指定数量元素的功能。传入它的第一个参数是待挑选的集合变量，第二个参数是个数字，表示要挑选的元素数量。因此，代码使用 <code>random.sample(wrong_answer, 3)</code> 从 <code>woring_answer</code> 中随机挑选了三个城市。</p>
<p>而 <code>shuffle()</code> 就如它的单词意思所描述，是个<strong>混洗</strong>函数，可以将传入的数据集合里的元素顺序打乱。将 <code>right_answer</code> 跟 <code>wrong_answer</code> 拼成 <code>current_options</code> 之后，使用 <code>random.shuffle(current_options)</code> 就实现了将 <code>current_options</code> 中的答案顺序进行混洗的目的。</p>
<p>函数最后将 <code>current_options</code> 作为返回结果，使得调用者可以通过函数的返回列表获取到传入的 <code>index</code> 所对应的答案选项。这个选项中的错误答案，是随机从城市里挑选的，并且答案顺序经过了混洗。</p>
<p>借助这个定义好的 <code>generate_options()</code> 函数，我们就可以构建 <code>options</code> 了，请在下面代码块中，尝试补全 <strong>TODO</strong> 部分的逻辑，生成我们在前面构想中希望创建的 <code>options</code> 列表：</p>
<div><pre><code><span>import</span> random

capitals <span>=</span> <span>{</span><span>'北京市'</span><span>:</span> <span>'北京'</span><span>,</span> <span>'天津市'</span><span>:</span> <span>'天津'</span><span>,</span> <span>'上海市'</span><span>:</span> <span>'上海'</span><span>,</span> <span>'重庆市'</span><span>:</span> <span>'重庆'</span><span>,</span>
            <span>'河北省'</span><span>:</span> <span>'石家庄'</span><span>,</span> <span>'山西省'</span><span>:</span> <span>'太原'</span><span>,</span> <span>'陕西省'</span><span>:</span> <span>'西安'</span><span>,</span> <span>'山东省'</span><span>:</span> <span>'济南'</span><span>,</span>
            <span>'河南省'</span><span>:</span> <span>'郑州'</span><span>,</span> <span>'辽宁省'</span><span>:</span> <span>'沈阳'</span><span>,</span> <span>'吉林省'</span><span>:</span> <span>'长春'</span><span>,</span> <span>'黑龙江省'</span><span>:</span> <span>'哈尔滨'</span><span>,</span>
            <span>'江苏省'</span><span>:</span> <span>'南京'</span><span>,</span> <span>'浙江省'</span><span>:</span> <span>'杭州'</span><span>,</span> <span>'安徽省'</span><span>:</span> <span>'合肥'</span><span>,</span> <span>'江西省'</span><span>:</span> <span>'南昌'</span><span>,</span>
            <span>'福建省'</span><span>:</span> <span>'福州'</span><span>,</span> <span>'湖北省'</span><span>:</span> <span>'武汉'</span><span>,</span> <span>'湖南省'</span><span>:</span> <span>'长沙'</span><span>,</span> <span>'四川省'</span><span>:</span> <span>'成都'</span><span>,</span>
            <span>'贵州省'</span><span>:</span> <span>'贵阳'</span><span>,</span> <span>'云南省'</span><span>:</span> <span>'昆明'</span><span>,</span> <span>'广东省'</span><span>:</span> <span>'广州'</span><span>,</span> <span>'海南省'</span><span>:</span> <span>'海口'</span><span>,</span>
            <span>'甘肃省'</span><span>:</span> <span>'兰州'</span><span>,</span> <span>'青海省'</span><span>:</span> <span>'西宁'</span><span>,</span> <span>'台湾省'</span><span>:</span> <span>'台北'</span><span>,</span> <span>'内蒙古自治区'</span><span>:</span> <span>'呼和浩特'</span><span>,</span>
            <span>'新疆维吾尔自治区'</span><span>:</span> <span>'乌鲁木齐'</span><span>,</span> <span>'西藏自治区'</span><span>:</span> <span>'拉萨'</span><span>,</span> <span>'广西壮族自治区'</span><span>:</span> <span>'南宁'</span><span>,</span>
            <span>'宁夏回族自治区'</span><span>:</span> <span>'银川'</span><span>,</span> <span>'香港特别行政区'</span><span>:</span> <span>'香港'</span><span>,</span> <span>'澳门特别行政区'</span><span>:</span> <span>'澳门'</span><span>}</span>

provinces <span>=</span> <span>list</span><span>(</span>capitals<span>.</span>keys<span>(</span><span>)</span><span>)</span>


<span>def</span> <span>generate_options</span><span>(</span>index<span>)</span><span>:</span>
	<span># generate_options函数，根据输入的省份编号index，生成对应的答案选项。</span>

	<span># 1. 从capitals中获取index这个编号对应的省份的省会名字，存到right_answer变量中。</span>
	right_answer <span>=</span> capitals<span>[</span>provinces<span>[</span>index<span>]</span><span>]</span>

	<span># 2. 从capitals中获取所有城市名字，并剔除正确的答案，构建错误省会名组成的列表，</span>
	<span># 存到变量wrong_answer中。</span>
	wrong_answer <span>=</span> <span>list</span><span>(</span>capitals<span>.</span>values<span>(</span><span>)</span><span>)</span>
	<span>del</span> wrong_answer<span>[</span>index<span>]</span>

	<span># 3. 从wrong_answer中随机挑选3个名字，并与right_answer一同组成由4个元素组成的选项</span>
	wrong_answer <span>=</span> random<span>.</span>sample<span>(</span>wrong_answer<span>,</span> <span>3</span><span>)</span>
	current_options <span>=</span> <span>[</span>right_answer<span>]</span> <span>+</span> wrong_answer

	<span># 将选项打乱</span>
	random<span>.</span>shuffle<span>(</span>current_options<span>)</span>

	<span># 用列表结构返回第index个省的答案选项</span>
	<span>return</span> current_options


options <span>=</span> <span>[</span><span>]</span>
<span>for</span> i <span>in</span> <span>range</span><span>(</span><span>len</span><span>(</span>capitals<span>)</span><span>)</span><span>:</span>
	<span># TODO，根据编号i，创建每道题的选项，并把选项列表添加到options中</span>

<span>print</span><span>(</span>options<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><details><summary>是否填写出来了？看下老师的参考答案，你可以把它拷贝到代码中看下执行结果：</summary>
<div><pre><code><span>for</span> i <span>in</span> <span>range</span><span>(</span><span>len</span><span>(</span>capitals<span>)</span><span>)</span><span>:</span>
	<span># TODO，根据编号i，创建每道题的选项，并把选项列表添加到options中</span>
	option <span>=</span> generate_options<span>(</span>i<span>)</span>
	options<span>.</span>append<span>(</span>option<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></details>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://gitee.com/huangjiabaoaiyc/image/raw/master/202110300054343.png" type="image/png"/>
    </item>
    <item>
      <title>02-让 Python 在你的电脑上安家落户</title>
      <link>https://book.bornforthi.com/zh/column/python/base/three_makes_Python_a_home_on_your_computer/</link>
      <guid>https://book.bornforthi.com/zh/column/python/base/three_makes_Python_a_home_on_your_computer/</guid>
      <source url="https://book.bornforthi.com/rss.xml">02-让 Python 在你的电脑上安家落户</source>
      <category>Python 基础</category>
      <pubDate>Tue, 02 Nov 2021 12:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。首先，欢迎上车！</p>
<p>从这一章节开始，我们正式学习 Python 相关的内容。学习 Python 不仅仅是认识和记忆它的用法，还要实际动手去操作试验，只有不断地实践才能真正掌握一门语言。所以现在的第一件事是——将 Python 安装到你电脑上，边学习边实践。</p>
<h2 id="_1-安装-python-究竟安装的是什么"> 1. 安装 Python 究竟安装的是什么</h2>
<p><strong>我们说「安装 Python」，可是 Python 明明只是种程序语言，为什么有安装不安装之说？</strong></p>
<p>其实这只是种笼统的说法，「安装 Python」主要指的是安装 Python 解释器。Python 的代码被编写出来后，要想执行它，就需要用到 Python 解析器，Python 解释器可以直接执行 Python 代码。</p>
<p>::: detail 扩展</p>
<blockquote>
<p>与解释器概念有点相似的是<strong>编译器</strong>，如 C、Java、Go 的代码想要被执行，需要先经过编译器的编译（以及链接器的链接），之后生成二进制文件或字节码文件，然后才能被执行。Python 与它们不同，Python 代码可以直接被解释器<strong>解释执行</strong>，也就是说不需要显式的编译过程。</p>
</blockquote>
<p>:::</p>
<h2 id="_2-安装-python"> 2. 安装 Python</h2>
<p>由于大家的操作系统不同，故本小节对内容作了划分，请你根据自己的操作系统类型来阅读相应的内容。</p>
<h3 id="_2-1-windows-上的安装"> 2.1 Windows 上的安装</h3>
<ol>
<li>在 Windows 上安装 Python，首先需要去 <a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener noreferrer">Python 官网</a> 下载安装程序，方便起见，这里直接给出官网的下载链接：
<ol>
<li>Windows 64 位：<a href="https://www.python.org/ftp/python/3.9.7/python-3.9.7-amd64.exe" target="_blank" rel="noopener noreferrer">https://www.python.org/ftp/python/3.9.7/python-3.9.7-amd64.exe</a></li>
<li>Windows 32 位：<a href="https://www.python.org/ftp/python/3.9.7/python-3.9.7.exe" target="_blank" rel="noopener noreferrer">https://www.python.org/ftp/python/3.9.7/python-3.9.7.exe</a></li>
</ol>
</li>
<li>下载完成后打开安装程序，界面上勾选「Install launcher for all users」和「Add Python 3.7 to Path」（<strong>重要</strong>）。</li>
</ol>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202111021153477.png" alt="image.png" /></p>
<p>之后点击「Install Now」完成后续的安装。</p>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202111021154090.png" alt="image.png" /></p>
<ol start="3">
<li>我们可以通过如下方式来验证安装是否成功，打开命令行（CMD）输入：</li>
</ol>
<div><pre><code>python <span>-</span><span>-</span>version
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span># python --version</span>
Python <span>3.9</span><span>.7</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>若命令行中显示「Python 3.9.7」则表明 Python 安装成功，若不是请在讨论区留言大家一起排查问题。</p>
<h3 id="_2-2-linux-上的安装"> 2.2 Linux 上的安装</h3>
<p>在个人电脑上使用 Linux 的同学，多数都是在使用它的 Ubuntu 发行版。所以这里以 Linux 的 ubuntu 发行版为例来介绍 Python 的安装过程。</p>
<ol>
<li>首先，有些版本的 Ubuntu 中可能自带有 Python 3，我们先来确认下。在命令行（虚拟终端）中执行下述命令：</li>
</ol>
<div><pre><code>python3 <span>-</span><span>-</span>version
</code></pre>
<div><span>1</span><br></div></div><div><pre><code>如：

<span>></span> ➜ <span>~</span> python3 <span>-</span><span>-</span>version  Python <span>3.7</span><span>.3</span>

若命令行中输出「Python <span>3.</span>x<span>.</span>x」，表明你的系统中已有 Pyhton <span>3</span>，可直接跳过安装过程。
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>若上一步中命令行输出「bash: python3: command not found」或类似信息，则表明系统中没有 Python3，那么执行如下命令安装：</p>
<div><pre><code>sudo apt update <span>-</span>y  
sudo apt install python3 <span>-</span>y
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ol start="3">
<li>验证安装是否成功的方法和步骤 1. 一样。</li>
</ol>
<h3 id="_2-3-macos-上的安装"> 2.3 MacOS 上的安装</h3>
<p>MacOS 上安装 Python，可以去官网下载对应的安装包，但是这里推荐用 Homebrew 来安装。</p>
<ol>
<li><a href="https://brew.sh/" target="_blank" rel="noopener noreferrer">Homebrew</a> 是 MacOS 上的包管理工具，可以非常便利地通过命令安装各种软件。既然用了 MacOS，就不能错过 Homebrew。如果你的 MacOS 中没有 Homebrew，可以在命令行（虚拟终端）中执行如下命令来安装：</li>
</ol>
<div><pre><code><span>/</span>usr<span>/</span><span>bin</span><span>/</span>ruby <span>-</span>e <span>"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>></span> ➜ <span>~</span> `<span>/</span>usr<span>/</span><span>bin</span><span>/</span>ruby <span>-</span>e <span>"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span>`
<span>></span> 
<span>></span> <span>==</span><span>></span> This script will install<span>:</span>  
<span>/</span>usr<span>/</span>local<span>/</span><span>bin</span><span>/</span>brew  
<span>.</span><span>.</span><span>.</span>  
Press RETURN to <span>continue</span> <span>or</span> <span>any</span> other key to abort
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>出现提示「Press RETURN to continue or any other key to abort」后敲击回车键继续安装。安 装成功后将输出如下信息：</p>
<div><pre><code><span>==</span><span>></span> Installation successful! …
<span>==</span><span>></span> Next steps<span>:</span>
<span>-</span> Run brew <span>help</span> to get started
<span>-</span> Further documentation<span>:</span> https<span>:</span><span>//</span>docs<span>.</span>brew<span>.</span>sh
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ol start="2">
<li>之后我们再通过 Homebrew 安装 Python，执行命令：</li>
</ol>
<div><pre><code>brew update  
brew install Python3
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ol start="3">
<li>要验证安装是否成功，可以执行命令：</li>
</ol>
<div><pre><code>python3 <span>-</span><span>-</span>version
</code></pre>
<div><span>1</span><br></div></div><div><pre><code>➜ <span>~</span> python3 <span>-</span><span>-</span>version Python <span>3.7</span><span>.3</span>
</code></pre>
<div><span>1</span><br></div></div><p>若命令行输出「Python 3.x.x」则表明 Python 安装成功，若不是请在讨论区留言大家一起排查问题。</p>
<h2 id="_3-小结"> 3. 小结</h2>
<p>到这里 Python 就安装好了，是不是有点迫不及待想去用啦，下一节《如何运行 Python 代码》将会为大家介绍该如何使用刚刚安装好的 Python 解释器，以及怎么用它执行代码。</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://gitee.com/huangjiabaoaiyc/image/raw/master/202111021153477.png" type="image/png"/>
    </item>
    <item>
      <title>03-如何运行 Python 代码？</title>
      <link>https://book.bornforthi.com/zh/column/python/base/how_do_i_run_Python_code/</link>
      <guid>https://book.bornforthi.com/zh/column/python/base/how_do_i_run_Python_code/</guid>
      <source url="https://book.bornforthi.com/rss.xml">03-如何运行 Python 代码？</source>
      <category>Python 基础</category>
      <pubDate>Wed, 03 Nov 2021 11:46:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<p>上节课我带着大家来让 Python 在我们的电脑上安家落户。既然安装成功了，那么使用起来也不是问题。运行 Python 代码有两种方式。一种是直接在 Python 解释器中的输入代码，然后就地执行它（也就是交互模式）。另一种是把 Python 代码保存到文件中，之后去执行这个文件。</p>
<h2 id="_1-交互模式执行-python-代码"> 1. 交互模式执行 Python 代码</h2>
<p>先来看下如何在交互模式下执行 Python 代码。首先进入 Python 解释器交互模式，进入方法是：</p>
<ul>
<li>使用 Linux 和 MacOS 的读者在命令行（虚拟终端）中执行命令 python3</li>
<li>使用 Windows 的读者在命令行（CMD）中执行命令 python</li>
</ul>
<p>之后你会看一些版本和帮助信息：</p>
<div><pre><code>➜ <span>~</span> python3 Python <span>3.7</span><span>.3</span> <span>(</span>default<span>,</span> Mar <span>27</span> <span>2019</span><span>,</span> <span>09</span><span>:</span><span>23</span><span>:</span><span>15</span><span>)</span>
<span>[</span>Clang <span>10.0</span><span>.1</span> <span>(</span>clang<span>-</span><span>1001.0</span><span>.46</span><span>.3</span><span>)</span><span>]</span> on darwin
Type “<span>help</span>”<span>,</span> “copyright”<span>,</span> “credits” <span>or</span> “license” <span>for</span> more information<span>.</span>
<span>>></span><span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这便是 Python 解释器交互模式，上例中左下角的 &gt;&gt;&gt; 表示这里是输入代码的地方，此时正在等待你的输入。试着输入一些内容，然后按回车键去执行它：</p>
<div><pre><code><span>12345</span> <span>+</span> <span>54321</span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>>></span><span>></span> <span>12345</span> <span>+</span> <span>54321</span>
<span>66666</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code><span>'apple'</span> <span>+</span> <span>'pen'</span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>>></span><span>></span> <span>'apple'</span> <span>+</span> <span>'pen'</span>
<span>'applepen'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>可以看到，按下回车键后解释器会立即执行刚才输入的代码，并直接将执行结果输出出来。</p>
<h2 id="_2-执行-python-文件"> 2. 执行 Python 文件</h2>
<p>再来看下如何执行 Python 文件。所谓 Python 文件，其实就是保存 Python 代码的文件，通常将其文件后缀名约定为 <code>.py</code>。</p>
<details><summary>扩展</summary>
<blockquote>
<p>其实用别的后缀名甚至不用后缀名都是可以的，但是既然是约定，那么大家就该遵守。<code>.py</code> 后缀能很清晰的表明这是 Python 文件。</p>
</blockquote>
</details>
<p>我们来创建一个文件，如 <code>today.py</code>，然后把以下代码拷贝进去：</p>
<div><pre><code><span>import</span> datetime

today <span>=</span> datetime<span>.</span>date<span>.</span>today<span>(</span><span>)</span><span>.</span>strftime<span>(</span><span>'%Y{}%m{}%d{}'</span><span>)</span><span>.</span><span>format</span><span>(</span><span>*</span><span>'年月日'</span><span>)</span>
<span>print</span><span>(</span><span>'今天是：'</span> <span>+</span> today<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>然后通过 Python 命令来执行这个 <code>today.py</code> 文件：</p>
<ul>
<li>Windows 下执行：</li>
</ul>
<div><pre><code>python today<span>.</span>py
</code></pre>
<div><span>1</span><br></div></div><div><pre><code>C<span>:</span><span>></span> python today<span>.</span>py
今天是：<span>2021</span>年<span>11</span>月<span>03</span>日
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ul>
<li>Linux 和 MacOS 下执行：</li>
</ul>
<div><pre><code>python3 today<span>.</span>py
</code></pre>
<div><span>1</span><br></div></div><div><pre><code>➜ <span>~</span> python3 today<span>.</span>py
今天是：<span>2021</span>年<span>11</span>月<span>03</span>日
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><p>注意</p>
<p>上述文件使用的是省略了路径前缀的相对路径形式，执行命令前须先进入到 Python 文件所在目录（即确保工作目录和文件所在目录一致），否则解释器会找不到该文件。也可以直接使用绝对路径的形式，如 <code>python C:\Users\aiyuechuang\today.py</code>，此时无需考虑工作目录。</p>
</div>
<h2 id="_3-交互模式执行和-python-文件执行的差别"> 3. 交互模式执行和 Python 文件执行的差别</h2>
<p>显而易见，Python 代码的交互模式执行和文件执行在使用形式上是不同的。除此之外，在输出结果的方式上这两种方法也存在一些不同。</p>
<p>比如代码：</p>
<div><pre><code><span>12345</span> <span>+</span> <span>54321</span>
</code></pre>
<div><span>1</span><br></div></div><p>在交互模式下执行时，计算结果会被直接输出出来：</p>
<div><pre><code><span>>></span><span>></span> <span>12345</span> <span>+</span> <span>54321</span>
<span>66666</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>在这里我们没有使用任何输出操作，代码执行时计算出结果并自动输出。</p>
<p>而如果把这行代码写到文件里（如 <code>add.py</code>），然后使用文件执行的方式来执行它，这时命令行中没有任何内容被输出显示。如下：</p>
<div><pre><code>➜ <span>~</span> python3 add<span>.</span>py
➜ <span>~</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>这是因为文件执行时，每个语句的执行结果并不会被自动输出，<strong>除非代码中有明确的输出操作</strong>。</p>
<p>**这输出操作具体是什么呢？**比如 Python 里有个叫 <code>print()</code> 函数的东西，它可以把结果输出显示到命令行中。使用时只需将想要输出的内容放在 <code>print()</code> 的括号中，像这样：</p>
<div><pre><code><span>print</span><span>(</span><span>12345</span> <span>+</span> <span>54321</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>好了，我们修改下文件中的代码，用 <code>print(12345 + 54321)</code> 完整替换原来的 <code>12345 + 54321</code>，再次执行下看看：</p>
<div><pre><code>➜ <span>~</span> python3 add<span>.</span>py
<span>66666</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>这样结果就显示出来了。交互模式下当然也可以使用 <code>print()</code>，效果也是一样的。</p>
<blockquote>
<p>注意：代码中的所有符号，包括括号<code>「()」</code>、逗号<code>「,」</code>、分号<code>「;」</code>等必须使用英文半角符号，否则程序会出错。</p>
</blockquote>
<blockquote>
<p>扩展：<code>print()</code> 是 Python 的内置函数（函数概念后续会提到），无需从包（程序库）中导入。准确来讲，它的行为是将内容写到标准输出中。</p>
</blockquote>
<h2 id="_4-交互模式-or-python-文件"> 4. 交互模式 or Python 文件？</h2>
<p>在做 Python 开发时，大多数时候都是用执行 Python 文件的方式来运行代码。交互模式往往只是在试验小段代码，或者用 Python 做一些简单事情的时候才会去使用。原因是：</p>
<ul>
<li>大多数场景下，我们的程序需要以自动化的方式来运行，而交互模式顾名思义是需要人的参与的，不便于自动化；</li>
<li>把代码写到文件里方便反复执行；</li>
<li>交互模式下的输入体验不佳，编写大段代码时不够便利；</li>
</ul>
<h2 id="_5-趁手的代码编辑器"> 5. 趁手的代码编辑器</h2>
<p>执行 Python 文件是运行 Python 代码的主要方式，正因为如此，我们需要一个好用的编辑器来编写 Python 文件，毕竟系统自带的文本编辑器太简陋了。</p>
<p>用来写代码的编辑器实在很多，比如老牌的 VIM、Emacs，之后的 Atom、Sublime，以及新秀 VS code。除此之外，还可以用重量级的 IDE（Integrated Development Environment——集成开发环境）。</p>
<blockquote>
<p>扩展：编辑器通常有代码编辑、高亮显示、基于历史记录的代码补全等功能。IDE 在编辑器的基础上还支持基于静态分析的代码补全，引用查看，代码跳转，重构，代码格式化，编辑时错误提示，风格提示等强大且常用的功能。</p>
</blockquote>
<blockquote>
<p>编辑器能通过插件来扩展得到这些功能，但需要经历一番折腾。想省些力气的读者可以直接用 IDE 来做开发。</p>
</blockquote>
<p>这里分别推荐一款代码编辑和一款 IDE：</p>
<ul>
<li>VS code，微软开源的优秀代码编辑器。 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">官方下载页面</a></li>
</ul>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202111031142547.png" alt="image.png" /></p>
<ul>
<li>PyCharm。它是 Python 领域口碑和人气双高的 IDE。有付费的个人版本和免费的社区版本，我们使用社区版本就足够了。<a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener noreferrer">官方下载页面</a></li>
</ul>
<p><img src="https://gitee.com/huangjiabaoaiyc/image/raw/master/202111031142875.png" alt="image.png" /></p>
<h1 id="_6-本专栏代码演示说明"> 6. 本专栏代码演示说明</h1>
<p>值得说明的是，后续文章中的代码执行演示以交互模式为主。交互模式的典型标记是 &gt;&gt;&gt; 提示符，如下示例就是在解释器交互模式下进行的：</p>
<div><pre><code><span>>></span><span>></span> <span>33</span><span>+</span><span>725</span>
<span>758</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>另外在代码较长时，本专栏也会使用执行 Python 文件的方式来作代码执行演示。此时的典型标记是 <code>➜ ~</code>，表明这是在命令行（即 Windows CMD 或 Llinux / MacOS 虚拟终端）中执行命令。如下：</p>
<div><pre><code>➜ <span>~</span> python3 hello<span>.</span>py
hello
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>说明：上述使用的是 Linux / MacOS 下的 python3 命令，使用 Windows 的读者请自行替换为 python。</p>
<p>当然！我有时候更喜欢使用 IPython 来开发。</p>
<div><pre><code>In <span>[</span><span>1</span><span>]</span><span>:</span> <span>1</span> <span>+</span> <span>1</span>
Out<span>[</span><span>1</span><span>]</span><span>:</span> <span>2</span>

In <span>[</span><span>2</span><span>]</span><span>:</span> <span>"Hello QuickSand"</span>
Out<span>[</span><span>2</span><span>]</span><span>:</span> <span>'Hello QuickSand'</span>

In <span>[</span><span>3</span><span>]</span><span>:</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>这是本专栏的代码演示形式。读者自己试验代码时，是选择交互模式还是 Python 文件的方式完全由个人喜好而定。如果使用 Python 文件的方式，请不要忘记想要输出执行结果需要在代码里使用 <code>print()</code>。</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://gitee.com/huangjiabaoaiyc/image/raw/master/202111031142547.png" type="image/png"/>
    </item>
    <item>
      <title>05-Markdown 代码</title>
      <link>https://book.bornforthi.com/zh/column/md/FiveMarkdowncode/</link>
      <guid>https://book.bornforthi.com/zh/column/md/FiveMarkdowncode/</guid>
      <source url="https://book.bornforthi.com/rss.xml">05-Markdown 代码</source>
      <category>Markdown 基础</category>
      <pubDate>Sun, 24 Oct 2021 15:08:44 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（<strong>`</strong>），例如：</p>
<div><pre><code><span>`printf()`</span> 函数
</code></pre>
<div><span>1</span><br></div></div><p>显示结果如下：</p>
<p><code>printf()</code> 函数</p>
<h2 id="代码区块"> 代码区块</h2>
<p>你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p>
<div><pre><code><span><span>```</span><span>javascript</span>
<span><span>$</span><span>(</span>document<span>)</span><span>.</span><span>ready</span><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>
    <span>alert</span><span>(</span><span>'bornforthi.com'</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>显示结果如下：</p>
<div><pre><code><span>$</span><span>(</span>document<span>)</span><span>.</span><span>ready</span><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>
    <span>alert</span><span>(</span><span>'bornforthi.com'</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>专栏目录</title>
      <link>https://book.bornforthi.com/zh/guide/</link>
      <guid>https://book.bornforthi.com/zh/guide/</guid>
      <source url="https://book.bornforthi.com/rss.xml">专栏目录</source>
      <content:encoded><![CDATA[<p>如果你有其他需求或者疑问，点击：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ 在线客服</a></p>
<h2 id="答疑星球"> 答疑星球</h2>
<p><img src="./README.assets/202111051426350.jpg" alt="" /></p>
<p>提问格式：</p>
<ol>
<li>什么专栏</li>
<li>专栏的哪个内容</li>
<li>遇到什么问题？</li>
<li>如果有代码请加上代码和报错截图</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>流沙团队</title>
      <link>https://book.bornforthi.com/zh/home/</link>
      <guid>https://book.bornforthi.com/zh/home/</guid>
      <source url="https://book.bornforthi.com/rss.xml">流沙团队</source>
      <pubDate>Sat, 23 Oct 2021 02:01:49 GMT</pubDate>
      <content:encoded><![CDATA[<p>如果你有其他需求或者疑问，点击：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ 在线客服</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>01-我会怎样带你学 Python？</title>
      <link>https://book.bornforthi.com/zh/column/python/base/two_how_would_i_teach_you_python/</link>
      <guid>https://book.bornforthi.com/zh/column/python/base/two_how_would_i_teach_you_python/</guid>
      <source url="https://book.bornforthi.com/rss.xml">01-我会怎样带你学 Python？</source>
      <category>Python 基础</category>
      <pubDate>Mon, 01 Nov 2021 12:10:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>你好，我是悦创。</p>
<h2 id="_1-为什么需要程序语言"> 1. 为什么需要程序语言</h2>
<p>市面上程序语言很多，且各有不同，但无论你用什么语言来写程序，有一点你需要知道，那就是——计算机实际运行的是计算机指令序列。这些指令序列的直接表现形式是一连串的 0 和 1，也就是机器码。机器码不属于程序语言，所以程序的执行是与语言无关的，计算机在运行时感知不到你的语言。</p>
<p><strong>既然计算机程序的实际执行和语言无关，那么为什么要搞出来语言这种东西来？</strong></p>
<p>显然用机器码的 0 和 1 这两个字符来编程是困难和低效的。为了提高生产效率，我们需要一种容易书写和阅读的标记来表达机器码指令。使用方式是用这种标记进行程序编码，编码完成后再将这些标记翻译为机器码。最初达到这个目的的是汇编语言，汇编语言一种是程序语言，不过是低级程序语言，它和机器码之间有着比较直接的一一对应关系。</p>
<details><summary>扩展</summary>
<blockquote>
<p>这种「比较直接的一一对应关系」怎么理解呢？例如，你甚至可以通过查表的方式，得出汇编语言 MOV AX,66H 对应机器码的十六进制 B866，也就是二进制 1011100001100110。
所以汇编 MOV AX,66H 与机器码 1011100001100110 相对应。这个结果也可以反向推导。
十六进制怎么转二进制？有了 Python 就不要去手工算了，执行 Python 代码 bin(int('B866', 16)) 轻松得到结果。</p>
</blockquote>
</details>
<p>随着计算机技术的发展，计算和存储能力逐步提升，人们对程序的要求要也越来越高，开始追求更多样更复杂的功能，汇编语言的开发效率渐渐捉襟见肘。由此演进出一系列的高级程序语言，如 Fortran，Pascal，以及当下广泛使用 C，Java，Python 等。之所以被称为高级程序语言，是因为它们相较于机器码和汇编语言有着更高级的抽象，同时不再与机器码有明显的对应关系。</p>
<details><summary>扩展</summary>
<blockquote>
<p>计算机的世界里「抽象」这次词表示屏蔽掉内部纷繁复杂的细节，直接触达其核心功能，为外部建立起更高效更易用的使用入口和操作方法。
在之后的文章中「抽象」这个词会被频繁提及，因为它是计算机技术里非常重要的且具有指导意义的一个概念。</p>
</blockquote>
</details>
<p>为什么会有这么多高级语言？每种语言都因为有不同的使用理念和应用场景而被设计出来。例如：</p>
<ul>
<li>C 语言有非常高的执行效率，和马马虎虎的开发效率，在一些极度依赖执行效率和底层控制的领域独占鳌头，比如操作系统开发。</li>
<li>Java 借助于 JVM 得以跨越不同的操作系统和计算机架构而运行 Java 程序。Java 也拥有良好的执行效率和稳定性，它的执行效率与 C 语言相比，最高能保持在同一个数量级上。</li>
<li>Python 与 C 和 Java 相比有较大的不同，Python 是解释型语言，没有显式编译的过程，代码可直接由解释器解释执行，同时借助于解释器，其代码也可以跨平台运行。另一方面它是动态语言，在一定程度上更加灵活。Python 的理念是优雅和简单，虽然执行效率相较于 C 和 Java 大约慢一到两个数量级，不过 Python 的开发效率却数倍高于它们。</li>
</ul>
<h2 id="_2-程序语言特性的层次"> 2. 程序语言特性的层次</h2>
<p>各种语言有如此多的不同之处，那它们的本质是什么呢？从本质上来看，这些程序语言都是机器码或者汇编语言的高级抽象，抽象出来的各种语言特性，可以以更高效易用的方式去表达计算机的指令。</p>
<h3 id="_2-1-语言核心特性"> 2.1 语言核心特性</h3>
<p>完整地表达计算机的指令只会用到语言的一部分特性，在这里我们把这部分特性叫作是核心特性。虽然每种语言都有着不同的表达方式（语法规则），但对于核心特性的表达却有着相近的模式，可以说它们是适用于大多数语言的通用特性。核心特性有：</p>
<ul>
<li>数据类型</li>
<li>数值运算和比较</li>
<li>变量定义、赋值</li>
<li>数组、字符串</li>
<li>分支跳转</li>
<li>循环</li>
<li>函数</li>
</ul>
<h3 id="_2-2-语言扩展特性"> 2.2 语言扩展特性</h3>
<p>除上述必要的核心特性之外，为了让语言有更强的表达力和易用性，每种语言都有自己的一些扩展特性。如在 Python 中常用的有：</p>
<ul>
<li>异常机制</li>
<li>类</li>
<li>模块与包</li>
<li>内置数据结构</li>
<li>内置函数</li>
<li>迭代器</li>
<li>生成器</li>
<li>装饰器</li>
<li>函数式特性</li>
<li>动态类型</li>
<li>以及其它常用语言特性</li>
</ul>
<p>说明：虽然异常机制、类、模块与包是语言扩展特性，但它们是 Python 中的十分常用且无法回避的特性，所以本专栏在章节组织时将这三者放入语言核心特性章节中来作介绍。</p>
<h3 id="_2-3-语言周边知识和功能"> 2.3 语言周边知识和功能</h3>
<p>除了核心特性和扩展特性以外，语言一般还会整合一些语言特性之外的功能，或关联一些语言相关的知识，在这里我们将它们称为语言周边知识和功能。如常见的：</p>
<ul>
<li>标准库</li>
<li>IO 操作</li>
<li>进程线程</li>
<li>序列化</li>
<li>代码规范</li>
<li>以及运行环境相关，如 Python 解释器、虚拟环境，Java 的 JVM 等</li>
</ul>
<p>这些周边知识和功能严格来讲不属于语言特性的范畴，但却和语言紧密相关，其中有些十分有用甚至不可或缺。它们通常是操作系统、框架、运行环境相关的内容。</p>
<h2 id="_3-语言特性有层次之分-学习也有侧重点"> 3. 语言特性有层次之分，学习也有侧重点</h2>
<p>上面的内容是为了让大家对程序语言有了一个全盘的认识，这样在学习时才能做到有的放矢。那具体该如何来学习 Python 呢？</p>
<p>首先，核心特性是学习重点对象，这部分内容也不多。只要掌握了语言的核心特性，就可以编写程序来完成所有的计算功能了。通用特性要是没掌握好，后续的学习如空中楼阁。</p>
<p>其次，语言扩展特性的学习多多益善。语言拓展特性很大程度上增强了语言的表达力，使得在开发中能大幅缩减代码量提升开发效率。但是扩展特性很繁杂，有很多细枝末节的东西，有些在开发时并不一定被用到，所以不要求把一门语言的拓展特性完全掌握，学习时只需掌握其中常用的部分，其它部分在以后的日常使用中逐渐积累即可。</p>
<p>最后，语言的周边知识和功能虽不属于语言特性的范畴，但是对其中一些知识的学习是有必要的。如标准库和 IO 操作中封装有大量的系统调用，为程序与操作系统（或系统外部）的交互提供了入口。另外标准库中也包含大量高效稳定的现成代码，省却了使用者造轮子的功夫。</p>
<p>其实无论是学习 Python 还是学习其它语言，认清语言特性的层次，然后有所侧重地学习，这才是高效掌握一门新语言的不二法门。我们也将以此为脉络来为大家开展后续的 Python 课程。</p>
<blockquote>
<p>流沙团队推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！</p>
<p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p>
<p>方法二：微信：Jiabcdefh</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>幻灯片页</title>
      <link>https://book.bornforthi.com/zh/slides/</link>
      <guid>https://book.bornforthi.com/zh/slides/</guid>
      <source url="https://book.bornforthi.com/rss.xml">幻灯片页</source>
      <pubDate>Sat, 23 Oct 2021 02:01:49 GMT</pubDate>
      <content:encoded><![CDATA[
<i>Not supported content</i>]]></content:encoded>
      <enclosure url="https://book.bornforthi.com/logo.svg" type="image/svg+xml"/>
    </item>
  </channel>
</rss>