"use strict";(self.webpackChunkbornforthi_book=self.webpackChunkbornforthi_book||[]).push([[29],{9572:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4817b4b2",path:"/zh/column/jiuyuan_algorithm/01.html",title:"【久远讲算法】什么是时间复杂度",lang:"zh-CN",frontmatter:{lang:"zh-CN",title:"【久远讲算法】什么是时间复杂度",description:"页面的描述"},excerpt:"",headers:[{level:2,title:"什么是算法",slug:"什么是算法",children:[]},{level:2,title:"时空复杂度",slug:"时空复杂度",children:[]},{level:2,title:"时间复杂度",slug:"时间复杂度",children:[{level:3,title:"基本操作次数",slug:"基本操作次数",children:[]},{level:3,title:"渐进时间复杂度",slug:"渐进时间复杂度",children:[]}]},{level:2,title:"时间复杂度的差异",slug:"时间复杂度的差异",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"zh/column/jiuyuan_algorithm/01.md",git:{updatedTime:1634605283e3,contributors:[{name:"aiyc",email:"1432803776@qq.com",commits:1}]}}},6413:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<p>大家好 ，我是久远，今天开始，由我来给大家分享算法以及数据结构的相关知识。</p><p>\\left(\\LARGE{AB}\\right)</p><h2 id="什么是算法" tabindex="-1"><a class="header-anchor" href="#什么是算法" aria-hidden="true">#</a> 什么是算法</h2><p>今天我们先来讨论一个问题：什么是算法？</p><p>算法是指计算方法么？并不准确。</p><p>算法这个名称虽然听着硬核，但是我们换个场景你就会非常熟悉。</p><p>小学数学课上，你是不是可以用 3+3+3 或者 3*3 来解决三个三相加这个问题，虽然算的结果都是9，但是中间我们用的方法是不一样的。</p><p>假如你今天要做一道菜，你是不是需要菜谱，菜谱上肯定会告诉你，你做这个菜需要什么材料，分几步完成，完成这道菜需要多久。</p><p>而我们今天要讲的算法，就是计算机编程界的菜谱，它就是计算机解决问题的方法。用不同的办法去解决同一个问题，结果虽然都一样，但是过程可能千差万别。</p><p>正因为计算机解决问题的方法有很多个，我们便要拿标准去衡量，到底哪些算法更好，更适合我们去使用。</p><h2 id="时空复杂度" tabindex="-1"><a class="header-anchor" href="#时空复杂度" aria-hidden="true">#</a> 时空复杂度</h2><p>怎么衡量一个算法的好坏呢？</p><p>举个现实的例子：</p><p>小明和小亮去企业面试，hr要求他们用代码实现一个需求，一天之后，两个人交付了各自的代码，都能实现hr的需求。而只有小明被录用了。这是因为：</p><p>小明的代码运行一次花了50ms,内存占用5MB。</p><p>而小亮的代码运行一次要花10s，占用内存50MB。</p><p>小亮的代码虽然能够实现功能，但是运行时间和内存占用都没有小明的少，自然没有被录用。</p><p>所以我们衡量代码的好坏要从时间和空间两个角度去考虑。即：</p><ul><li>时间复杂度</li><li>空间复杂度</li></ul><p>在本文中，我们先讲解空间复杂度。</p><h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h2><p>我们可以将时间复杂度划分为两个小概念：</p><ul><li>基本操作次数</li><li>渐进时间复杂度</li></ul><h3 id="基本操作次数" tabindex="-1"><a class="header-anchor" href="#基本操作次数" aria-hidden="true">#</a> 基本操作次数</h3><p>我们假设计算机运行一行基础代码执行一次运算。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">T0101</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行一次</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;helo world&quot;</span><span class="token punctuation">)</span><span class="token comment">#执行一次</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这个方法需要执行1次运算。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">T0102</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 再计算for循环外层执行次数 n+1 次</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token comment">//先计算for循环里层执行的次数 n次</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#再计算for循环外层执行次数 n+1 次</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token comment">#先计算for循环里层执行的次数为 n次</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面这个方法需要执行（n+1+n）= 2n+1 次运算。</p><p>我们把算法需要执行的运算次数用 输入大小n 的函数表示，即 T(n).</p><p>为了估算算法需要的运行时间和简化算法分析，我们引入时间复杂度的概念。</p><p>我们再来看几个例子：</p><ol><li>$T(n) = 3n$,执行次数是线性的。</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">T0103</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 外层循环n次 </span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行一次</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行一次</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行一次</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 外层循环n次 </span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token comment">#执行一次</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;二&quot;</span><span class="token punctuation">)</span><span class="token comment">#执行一次</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;三&quot;</span><span class="token punctuation">)</span><span class="token comment">#执行一次</span>\n    \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>2.$T(n) = 5logn$ ,执行次数是用对数计算的。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">T0104</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//观察n与i的运算关系 成对数关系</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行一次</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行一次</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行一次</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行一次</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行一次</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>i <span class="token operator">=</span> n <span class="token comment">#在这里n代表的是某个特定的数字，如果要进行代码复制，请将n改为指定的数字去运行</span>\n<span class="token keyword">while</span> i <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;一&quot;</span><span class="token punctuation">)</span><span class="token comment">#执行一次</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;二&quot;</span><span class="token punctuation">)</span><span class="token comment">#执行一次</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;三&quot;</span><span class="token punctuation">)</span><span class="token comment">#执行一次</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;四&quot;</span><span class="token punctuation">)</span><span class="token comment">#执行一次</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;五&quot;</span><span class="token punctuation">)</span><span class="token comment">#执行一次</span>\n    i <span class="token operator">=</span> i<span class="token operator">//</span><span class="token number">2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>3.$T(n) = 2$ , 执行次数是常量。</p><div class="language-JAVA ext-JAVA line-numbers-mode"><pre class="language-JAVA"><code>void T0105(int n){    System.out.println(&quot;一&quot;);//没有循环次数    System.out.println(&quot;二&quot;);//只需要输出两次内容执行次数为2}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;一&quot;</span><span class="token punctuation">)</span><span class="token comment">#无循环次数print(&quot;二&quot;)#只需要输出两次内容执行的次数为2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="4"><li>$ T(n) = n^2$ ,执行次数为幂函数。</li></ol><div class="language-JAVA ext-JAVA line-numbers-mode"><pre class="language-JAVA"><code>void T0106(int n) {    for(int i = 0; i &lt; n; i++) { // 循环次数为 n        for(int j = 0; j &lt; n; j++) {// 循环次数为 n            System.out.println(&quot;Hello, World!&quot;); //循环体时间复杂度为 O(1)        }    }}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#循环次数n    for j in range(n):#循环次数n        print(&quot;hello world&quot;)#循环体时间复杂度为O(1)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="渐进时间复杂度" tabindex="-1"><a class="header-anchor" href="#渐进时间复杂度" aria-hidden="true">#</a> 渐进时间复杂度</h3><p>现在我们已经有了T(n),是否就可以分析和比较代码的运行时间了呢？不不不，n你还没确定呢。</p><p>假设A的执行次数是$ T(n) = 100n $，算法B执行的次数是 $ T(n) = 5n^2 $ ,这辆谁大就要取决于n了。</p><p>因此为了解决这类难题，我们有了渐进时间复杂度的概念。</p><p>维基百科的定义如下：</p><p>在计算机科学中，算法的时间复杂度是一个函数，它定性描述该算法的运行时间。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。</p><p>直白的讲就是，渐进复杂度就是将我们计算的程序的执行次数函数$T(n)$ 简化为数量级，例如 $n$、$n^2$ 、$n^3$ 等。</p><p>那我们要如何推算出时间复杂度呢？有以下几个原则：</p><ul><li>如果运行时间是常数级的（例如：1,2,3,4,6等），则直接用常数1代替表示。</li><li>只保留时间函数中的最高阶项。</li><li>如果最高阶项存在，则省去最高阶项前面的系数。</li></ul><p>例如，如果一个算法对于任何大小为 n （必须比 n0 大）的输入，它至多需要 $5n^3 + 3n$ 的时间运行完毕，那么它的渐近时间复杂度是 $O(n^3)$。</p><p>这个推算过程即为：</p><p>1.保留函数中的最高阶项。</p><p>即: $5n^3+3n$ $-&gt;$ $5n^3$</p><p>2.最高阶项存在，则省去最高阶项前面的系数。</p><p>即: $5n^3$ $-&gt;$ $n^3$</p><p>我们再来复习一下我们刚才看的那几个计算时间函数的例子。</p><ol><li>$T(n) = 3n$</li></ol><p>最高阶项为$3n$ ,省去3，则转化为的时间复杂度为：</p><p>$$T(n) = O(n)$$</p><p><img src="/article/jiuyuansuanfaimgaes/01.assets/5eiXqvJhQZnImrw-16337642107011.png" alt="O(n)"></p><ol start="2"><li><p>$T(n) = 5logn$ , 最高阶项为 $5logn$，省去系数 5，则转化的时间复杂度为：</p><p>$$T(n) = O(logn)$$</p><p><img src="/article/jiuyuansuanfaimgaes/01.assets/2tnO7PRxVaTcEGW-16337642147222.png" alt="O(logn)"></p></li><li><p>$T(n) = 2$，只有常数量级，则拿1替换常数，转换后的时间复杂度为：</p><p>$$T(n) = O(1)$$</p><p><img src="/article/jiuyuansuanfaimgaes/01.assets/cpPDqRsfKIQra7J-16337642172093.png" alt="O(1)"></p></li><li><p>$T(n)=n^2$</p></li></ol><p>这四种时间复杂度究竟谁更快，谁更更慢呢？当n足够大时，我们可以得到这样的结论：</p><p>$$O(1)&lt;O(logn)&lt;O(n)&lt;O(n^2)$$</p><p><img src="/article/jiuyuansuanfaimgaes/01.assets/nsugKlkIo4UbCt1-16337642563414.png" alt="时间复杂度比较"></p><h2 id="时间复杂度的差异" tabindex="-1"><a class="header-anchor" href="#时间复杂度的差异" aria-hidden="true">#</a> 时间复杂度的差异</h2><p>介绍了这么多，肯定有读者心中会产生疑问，你这说了半天...函数式子，能不能让我们直接体会一下时间复杂度的差异？</p><p>假设算法A的执行次数是$T(n) =100n$ ,</p><p>时间复杂度为$O(n)=n$</p><p>算法B的执行次数是$T(n) = 5n^2$ ,</p><p>时间复杂度为$O(n) = n^2$</p><p>如果 $n=1$，使用算法A和算法B的次数均为1</p><p>但是当$n$ 逐渐增大时，时间复杂度的差异性就体现出来了。</p><p>当$n&lt;20$时，$T(n)=100n$的增长速度比$T(n)=5n^2$快</p><p>当$n&gt;20$时，$T(n)5n^2$ 的增长速度比$T(n) = 100$ 快</p><p><img src="/article/jiuyuansuanfaimgaes/01.assets/LWigqsPhnekTbx7-16337642585625.png" alt="比较"></p><p>可见当我们要处理的对象足够大的时候，选时间复杂度较低的算法可使我们事半功倍，提高我们的程序运行效率。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本次我们详细的介绍了时间复杂度的概念。下次我们将引入空间复杂度的概念。</p><p>点个公众号关注不迷路。持续更新数据结构讲解以及力扣刷题技巧。</p>',85),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);